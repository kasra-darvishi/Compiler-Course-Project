
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'And Boolean_KW Character_KW Closing_Brace Closing_Bracket Closing_Parentheses Colon ComeBack_KW Comma Comment Const_KW Continue_KW Divide DivideEqual DoubleAnd DoubleOr EEqual Else_KW Equal False_KW GEqual GiveBack_KW GreaterOP If_KW Integer_KW LEqual LessOP Letter MM Minus MinusEqual ModeOP NonEqualOP Num Opening_Brace Opening_Bracket Opening_Parentheses Or Other_KW PP Plus PlusEqual QMark Semicolon Static_KW Then_KW Tilda Till_KW Times TimesEqual True_KW bool_KW char_KW int_KW reserved void_KWprogram : listnumOrLetter : Num\n        | Letter\n        | numOrLetter\n        | list : list declaration\n        | declarationdeclaration : function\n        | varDeclarationvarDeclaration : type  variableList SemicolonScopedVariableDec : scopedSpecifier variableList SemicolonvariableList : variableList Comma varInitialization\n        | varInitializationvarInitialization : varForm\n        | varForm Colon Opening_Parentheses eachExpression Closing_ParenthesesvarForm : Letter numOrLetter Opening_Bracket Num Closing_Bracket\n        | Letter  numOrLetter scopedSpecifier : Static_KW type\n        | typetype : Boolean_KW\n        | Character_KW\n        | Integer_KW\n        | char_KW\n        | bool_KW\n        | int_KWfunction : void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket\n                    | type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statementparameter : listOfParameters\n        | listOfParameters : listOfParameters Semicolon paramTypeList\n        | paramTypeListparamTypeList : type paramListparamList :  paramList Comma paramId\n        | paramIdlocalDeclarations : localDeclarations ScopedVariableDec\n        | paramId : Letter numOrLetter\n        | Letter numOrLetter Opening_Bracket Closing_Bracketstatement : phrase\n        | compoundPhrase\n        | selectPhrase\n        | iterationPhrase\n        | returnPhrase\n        | continuecompoundPhrase : Opening_Brace localDeclarations  statementList Closing_BracestatementList : statementList statement\n        | phrase : allExpression Semicolon\n        | SemicolonselectPhrase : If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody\n                        | If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_BraceifBody : statement\n        | statement Other_KW statement\n        | SemicoloniterationPhrase : Till_KW Opening_Parentheses eachExpression Closing_Parentheses statementreturnPhrase : ComeBack_KW Semicolon\n        | GiveBack_KW allExpression Semicolon\n        | GiveBack_KW numOrLetter Semicoloncontinue : Continue_KW SemicolonallExpression : alterable mathOp allExpression\n        | alterable PP\n        | alterable MM\n        | eachExpression\n        | alterable mathOp alterablemathOp : Equal\n        | PlusEqual\n        | MinusEqual\n        | TimesEqual\n        | DivideEqualeachExpression : eachExpression logicOp eachExpression\n        | eachExpression logicOp Then_KW eachExpression\n        | logicOp eachExpression\n        | relExpression\n        | eachExpression logicOp Else_KW eachExpressionrelExpression : mathEXP compareType mathEXP\n        | mathEXPcompareType : equal\n        | nonEqualequal : LEqual\n        | GEqual\n        | EEqualnonEqual : GreaterOP\n        | LessOP\n        | NonEqualOPmathEXP : mathEXP op mathEXP\n        | unaryExpressionop : Plus\n        | Minus\n        | Times\n        | Divide\n        | ModeOPunaryExpression : unaryop unaryExpression\n        | factorunaryop : Minus\n        | Times\n        | QMarkfactor : inalterable\n        | alterablealterable : Letter numOrLetter\n        | alterable Opening_Bracket allExpression Closing_Bracket\n        | alterable Letter numOrLetterinalterable : Opening_Parentheses allExpression Closing_Parentheses\n        | constant\n        | Letter numOrLetter Opening_Parentheses args Closing_Parenthesesargs : arguments\n        | arguments : arguments Comma allExpression\n        | allExpressionconstant : Const_KW\n        | True_KW\n        | False_KWlogicOp : DoubleAnd\n        | DoubleOr\n        | Tilda\n        | And\n        | Or'
    
_lr_action_items = {'void_KW':([0,2,3,4,5,14,24,100,101,102,103,104,105,107,116,135,136,140,144,161,162,165,173,175,176,177,181,182,],[6,6,-7,-8,-9,-6,-10,-39,-40,-41,-42,-43,-44,-49,-27,-26,-48,-56,-59,-57,-58,-45,-50,-52,-49,-55,-53,-51,]),'Boolean_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[8,8,-7,-8,-9,-6,8,-10,8,8,-39,-40,-41,-42,-43,-44,-49,-36,-27,-26,-48,8,-56,-59,-35,8,-57,-58,-45,-11,-50,-36,-52,-49,-55,-53,-51,]),'Character_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[9,9,-7,-8,-9,-6,9,-10,9,9,-39,-40,-41,-42,-43,-44,-49,-36,-27,-26,-48,9,-56,-59,-35,9,-57,-58,-45,-11,-50,-36,-52,-49,-55,-53,-51,]),'Integer_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[10,10,-7,-8,-9,-6,10,-10,10,10,-39,-40,-41,-42,-43,-44,-49,-36,-27,-26,-48,10,-56,-59,-35,10,-57,-58,-45,-11,-50,-36,-52,-49,-55,-53,-51,]),'char_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[11,11,-7,-8,-9,-6,11,-10,11,11,-39,-40,-41,-42,-43,-44,-49,-36,-27,-26,-48,11,-56,-59,-35,11,-57,-58,-45,-11,-50,-36,-52,-49,-55,-53,-51,]),'bool_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[12,12,-7,-8,-9,-6,12,-10,12,12,-39,-40,-41,-42,-43,-44,-49,-36,-27,-26,-48,12,-56,-59,-35,12,-57,-58,-45,-11,-50,-36,-52,-49,-55,-53,-51,]),'int_KW':([0,2,3,4,5,14,22,24,31,37,100,101,102,103,104,105,107,108,116,135,136,137,140,144,155,157,161,162,165,172,173,174,175,176,177,181,182,],[13,13,-7,-8,-9,-6,13,-10,13,13,-39,-40,-41,-42,-43,-44,-49,-36,-27,-26,-48,13,-56,-59,-35,13,-57,-58,-45,-11,-50,-36,-52,-49,-55,-53,-51,]),'$end':([1,2,3,4,5,14,24,100,101,102,103,104,105,107,116,135,136,140,144,161,162,165,173,175,176,177,181,182,],[0,-1,-7,-8,-9,-6,-10,-39,-40,-41,-42,-43,-44,-49,-27,-26,-48,-56,-59,-57,-58,-45,-50,-52,-49,-55,-53,-51,]),'Num':([6,18,32,34,40,63,76,97,112,143,],[16,16,42,16,16,16,16,16,16,16,]),'Letter':([6,7,8,9,10,11,12,13,16,17,18,25,30,34,35,40,44,46,48,49,50,51,52,55,57,58,59,61,63,67,69,71,74,76,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,126,128,129,133,134,136,137,138,139,140,143,144,146,150,154,155,156,158,161,162,164,165,166,168,169,170,172,173,174,175,176,177,178,179,181,182,],[17,18,-20,-21,-22,-23,-24,-25,-2,-3,17,34,40,17,63,17,76,63,-112,-113,-114,-115,-116,63,-94,-95,-96,97,17,76,40,76,97,17,63,63,63,-77,-78,-87,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,76,17,-4,-39,-40,-41,-42,-43,-44,-49,-36,143,76,-65,-66,-67,-68,-69,-4,63,63,-4,76,-48,-47,63,63,-56,17,-59,97,-100,76,-35,34,-19,-57,-58,76,-45,-46,-18,76,76,-11,-50,76,-52,-49,-55,76,76,-53,-51,]),'Opening_Parentheses':([6,15,16,17,18,23,26,35,44,46,48,49,50,51,52,55,57,58,59,63,67,71,76,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,98,100,101,102,103,104,105,107,108,109,110,112,118,121,122,123,124,125,126,128,129,134,136,137,138,139,140,143,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-5,22,-2,-3,-5,31,35,44,44,44,-112,-113,-114,-115,-116,44,-94,-95,-96,-5,44,44,-5,44,44,44,-77,-78,-87,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,44,134,-39,-40,-41,-42,-43,-44,-49,-36,138,139,44,44,-65,-66,-67,-68,-69,134,44,44,44,-48,-47,44,44,-56,-5,-59,44,-35,-57,-58,44,-45,-46,44,44,-11,-50,44,-52,-49,-55,44,44,-53,-51,]),'Opening_Bracket':([16,17,18,23,34,36,40,43,61,63,70,74,76,97,98,126,133,143,146,150,],[-2,-3,-5,32,-5,67,-5,32,96,-5,115,96,-5,-5,-4,-4,-4,-5,96,-100,]),'Colon':([16,17,18,21,23,34,43,72,],[-2,-3,-5,26,-4,-5,-4,-16,]),'Semicolon':([16,17,18,19,20,21,23,28,29,33,34,38,39,40,43,47,53,54,56,60,61,62,63,64,65,66,67,68,70,71,72,74,75,76,77,79,95,97,98,100,101,102,103,104,105,106,107,108,111,112,113,114,117,119,120,126,127,130,131,133,136,137,140,141,142,143,144,145,146,147,148,149,150,154,155,161,162,163,165,166,167,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,-5,24,-13,-14,-4,37,-31,-12,-5,-32,-34,-5,-4,-73,-76,-86,-93,-97,-98,-103,-5,-109,-110,-111,107,-30,-4,107,-16,-98,-63,-5,-15,-72,-92,-5,-4,-39,-40,-41,-42,-43,-44,136,-49,-36,140,-5,144,-33,-102,-61,-62,-4,-70,-75,-85,-4,-48,-47,-56,161,162,-3,-59,-38,-64,-60,-71,-74,-100,107,-35,-57,-58,-104,-45,-46,172,176,107,-11,-50,176,-52,-49,-55,176,107,-53,-51,]),'Comma':([16,17,18,19,20,21,23,33,34,38,39,40,43,47,53,54,56,60,61,62,63,64,65,66,70,72,74,75,76,77,79,95,97,98,114,117,119,120,126,127,130,131,133,145,146,147,148,149,150,152,153,163,167,171,],[-2,-3,-5,25,-13,-14,-4,-12,-5,69,-34,-5,-4,-73,-76,-86,-93,-97,-98,-103,-5,-109,-110,-111,-4,-16,-98,-63,-5,-15,-72,-92,-5,-4,-33,-102,-61,-62,-4,-70,-75,-85,-4,-38,-64,-60,-71,-74,-100,164,-108,-104,25,-107,]),'Closing_Parentheses':([16,17,22,27,28,29,31,38,39,40,41,45,47,53,54,56,60,61,62,63,64,65,66,68,70,73,74,75,76,79,95,97,98,114,117,119,120,126,127,130,131,133,134,145,146,147,148,149,150,151,152,153,159,160,163,171,],[-2,-3,-29,36,-28,-31,-29,-32,-34,-5,71,77,-73,-76,-86,-93,-97,-98,-103,-5,-109,-110,-111,-30,-4,117,-98,-63,-5,-72,-92,-5,-4,-33,-102,-61,-62,-4,-70,-75,-85,-4,-106,-38,-64,-60,-71,-74,-100,163,-105,-108,169,170,-104,-107,]),'Plus':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,130,131,133,143,146,150,163,],[-2,-3,84,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-5,-92,-5,-4,-102,-4,84,84,-4,-5,-98,-100,-104,]),'Minus':([16,17,35,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,74,76,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,128,129,130,131,133,134,136,137,138,139,140,143,144,146,150,154,155,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,57,57,57,-112,-113,-114,-115,-116,85,-86,57,-93,-94,-95,-96,-97,-98,-103,-5,-109,-110,-111,57,57,-98,-5,57,57,57,-77,-78,-87,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,-92,57,-5,-4,-39,-40,-41,-42,-43,-44,-49,-36,57,-102,57,-65,-66,-67,-68,-69,-4,57,57,85,85,-4,57,-48,-47,57,57,-56,-5,-59,-98,-100,57,-35,-57,-58,-104,57,-45,-46,57,57,-11,-50,57,-52,-49,-55,57,57,-53,-51,]),'Times':([16,17,35,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,74,76,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,128,129,130,131,133,134,136,137,138,139,140,143,144,146,150,154,155,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,58,58,58,-112,-113,-114,-115,-116,86,-86,58,-93,-94,-95,-96,-97,-98,-103,-5,-109,-110,-111,58,58,-98,-5,58,58,58,-77,-78,-87,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,-92,58,-5,-4,-39,-40,-41,-42,-43,-44,-49,-36,58,-102,58,-65,-66,-67,-68,-69,-4,58,58,86,86,-4,58,-48,-47,58,58,-56,-5,-59,-98,-100,58,-35,-57,-58,-104,58,-45,-46,58,58,-11,-50,58,-52,-49,-55,58,58,-53,-51,]),'Divide':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,130,131,133,143,146,150,163,],[-2,-3,87,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-5,-92,-5,-4,-102,-4,87,87,-4,-5,-98,-100,-104,]),'ModeOP':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,130,131,133,143,146,150,163,],[-2,-3,88,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-5,-92,-5,-4,-102,-4,88,88,-4,-5,-98,-100,-104,]),'LEqual':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,89,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-5,-92,-5,-4,-102,-4,-85,-4,-5,-98,-100,-104,]),'GEqual':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,90,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-5,-92,-5,-4,-102,-4,-85,-4,-5,-98,-100,-104,]),'EEqual':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,91,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-5,-92,-5,-4,-102,-4,-85,-4,-5,-98,-100,-104,]),'GreaterOP':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,92,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-5,-92,-5,-4,-102,-4,-85,-4,-5,-98,-100,-104,]),'LessOP':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,93,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-5,-92,-5,-4,-102,-4,-85,-4,-5,-98,-100,-104,]),'NonEqualOP':([16,17,53,54,56,60,61,62,63,64,65,66,74,76,95,97,98,117,126,131,133,143,146,150,163,],[-2,-3,94,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-5,-92,-5,-4,-102,-4,-85,-4,-5,-98,-100,-104,]),'DoubleAnd':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,48,48,48,48,-73,-112,-113,-114,-115,-116,-76,-86,-93,-97,-98,-103,-5,-109,-110,-111,48,48,-98,48,-5,48,48,-92,48,-5,-4,-39,-40,-41,-42,-43,-44,-49,-36,48,-102,48,-65,-66,-67,-68,-69,-4,48,48,48,-75,-85,-4,48,-48,-47,48,48,-56,-5,-59,-98,48,48,-100,48,-35,48,48,-57,-58,-104,48,-45,-46,48,48,-11,-50,48,-52,-49,-55,48,48,-53,-51,]),'DoubleOr':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,49,49,49,49,-73,-112,-113,-114,-115,-116,-76,-86,-93,-97,-98,-103,-5,-109,-110,-111,49,49,-98,49,-5,49,49,-92,49,-5,-4,-39,-40,-41,-42,-43,-44,-49,-36,49,-102,49,-65,-66,-67,-68,-69,-4,49,49,49,-75,-85,-4,49,-48,-47,49,49,-56,-5,-59,-98,49,49,-100,49,-35,49,49,-57,-58,-104,49,-45,-46,49,49,-11,-50,49,-52,-49,-55,49,49,-53,-51,]),'Tilda':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,50,50,50,50,-73,-112,-113,-114,-115,-116,-76,-86,-93,-97,-98,-103,-5,-109,-110,-111,50,50,-98,50,-5,50,50,-92,50,-5,-4,-39,-40,-41,-42,-43,-44,-49,-36,50,-102,50,-65,-66,-67,-68,-69,-4,50,50,50,-75,-85,-4,50,-48,-47,50,50,-56,-5,-59,-98,50,50,-100,50,-35,50,50,-57,-58,-104,50,-45,-46,50,50,-11,-50,50,-52,-49,-55,50,50,-53,-51,]),'And':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,51,51,51,51,-73,-112,-113,-114,-115,-116,-76,-86,-93,-97,-98,-103,-5,-109,-110,-111,51,51,-98,51,-5,51,51,-92,51,-5,-4,-39,-40,-41,-42,-43,-44,-49,-36,51,-102,51,-65,-66,-67,-68,-69,-4,51,51,51,-75,-85,-4,51,-48,-47,51,51,-56,-5,-59,-98,51,51,-100,51,-35,51,51,-57,-58,-104,51,-45,-46,51,51,-11,-50,51,-52,-49,-55,51,51,-53,-51,]),'Or':([16,17,35,44,45,46,47,48,49,50,51,52,53,54,56,60,61,62,63,64,65,66,67,71,74,75,76,78,79,95,96,97,98,100,101,102,103,104,105,107,108,112,117,118,121,122,123,124,125,126,127,128,129,130,131,133,134,136,137,138,139,140,143,144,146,148,149,150,154,155,159,160,161,162,163,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[-2,-3,52,52,52,52,-73,-112,-113,-114,-115,-116,-76,-86,-93,-97,-98,-103,-5,-109,-110,-111,52,52,-98,52,-5,52,52,-92,52,-5,-4,-39,-40,-41,-42,-43,-44,-49,-36,52,-102,52,-65,-66,-67,-68,-69,-4,52,52,52,-75,-85,-4,52,-48,-47,52,52,-56,-5,-59,-98,52,52,-100,52,-35,52,52,-57,-58,-104,52,-45,-46,52,52,-11,-50,52,-52,-49,-55,52,52,-53,-51,]),'Closing_Bracket':([16,17,42,47,53,54,56,60,61,62,63,64,65,66,74,75,76,79,95,97,98,99,100,101,102,103,104,105,107,115,117,119,120,126,127,130,131,132,133,136,140,144,146,147,148,149,150,161,162,163,165,173,175,176,177,181,182,],[-2,-3,72,-73,-76,-86,-93,-97,-98,-103,-5,-109,-110,-111,-98,-63,-5,-72,-92,-5,-4,135,-39,-40,-41,-42,-43,-44,-49,145,-102,-61,-62,-4,-70,-75,-85,150,-4,-48,-56,-59,-64,-60,-71,-74,-100,-57,-58,-104,-45,-50,-52,-49,-55,-53,-51,]),'PP':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,119,-5,-5,-4,-4,-5,119,-100,]),'MM':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,120,-5,-5,-4,-4,-5,120,-100,]),'Equal':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,121,-5,-5,-4,-4,-5,121,-100,]),'PlusEqual':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,122,-5,-5,-4,-4,-5,122,-100,]),'MinusEqual':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,123,-5,-5,-4,-4,-5,123,-100,]),'TimesEqual':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,124,-5,-5,-4,-4,-5,124,-100,]),'DivideEqual':([16,17,74,76,97,126,133,143,146,150,],[-2,-3,125,-5,-5,-4,-4,-5,125,-100,]),'QMark':([35,44,46,48,49,50,51,52,55,57,58,59,67,71,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,128,129,134,136,137,138,139,140,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[59,59,59,-112,-113,-114,-115,-116,59,-94,-95,-96,59,59,59,59,59,-77,-78,-87,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,59,-39,-40,-41,-42,-43,-44,-49,-36,59,59,-65,-66,-67,-68,-69,59,59,59,-48,-47,59,59,-56,-59,59,-35,-57,-58,59,-45,-46,59,59,-11,-50,59,-52,-49,-55,59,59,-53,-51,]),'Const_KW':([35,44,46,48,49,50,51,52,55,57,58,59,67,71,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,128,129,134,136,137,138,139,140,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[64,64,64,-112,-113,-114,-115,-116,64,-94,-95,-96,64,64,64,64,64,-77,-78,-87,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,64,-39,-40,-41,-42,-43,-44,-49,-36,64,64,-65,-66,-67,-68,-69,64,64,64,-48,-47,64,64,-56,-59,64,-35,-57,-58,64,-45,-46,64,64,-11,-50,64,-52,-49,-55,64,64,-53,-51,]),'True_KW':([35,44,46,48,49,50,51,52,55,57,58,59,67,71,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,128,129,134,136,137,138,139,140,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[65,65,65,-112,-113,-114,-115,-116,65,-94,-95,-96,65,65,65,65,65,-77,-78,-87,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,65,-39,-40,-41,-42,-43,-44,-49,-36,65,65,-65,-66,-67,-68,-69,65,65,65,-48,-47,65,65,-56,-59,65,-35,-57,-58,65,-45,-46,65,65,-11,-50,65,-52,-49,-55,65,65,-53,-51,]),'False_KW':([35,44,46,48,49,50,51,52,55,57,58,59,67,71,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,100,101,102,103,104,105,107,108,112,118,121,122,123,124,125,128,129,134,136,137,138,139,140,144,154,155,161,162,164,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[66,66,66,-112,-113,-114,-115,-116,66,-94,-95,-96,66,66,66,66,66,-77,-78,-87,-88,-89,-90,-91,-79,-80,-81,-82,-83,-84,66,-39,-40,-41,-42,-43,-44,-49,-36,66,66,-65,-66,-67,-68,-69,66,66,66,-48,-47,66,66,-56,-59,66,-35,-57,-58,66,-45,-46,66,66,-11,-50,66,-52,-49,-55,66,66,-53,-51,]),'Then_KW':([48,49,50,51,52,78,],[-112,-113,-114,-115,-116,128,]),'Else_KW':([48,49,50,51,52,78,],[-112,-113,-114,-115,-116,129,]),'Opening_Brace':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[108,108,-39,-40,-41,-42,-43,-44,-49,-36,-48,-47,-56,-59,108,-35,-57,-58,-45,-46,174,108,-11,-50,108,-52,-49,-55,108,108,-53,-51,]),'If_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[109,109,-39,-40,-41,-42,-43,-44,-49,-36,-48,-47,-56,-59,109,-35,-57,-58,-45,-46,109,109,-11,-50,109,-52,-49,-55,109,109,-53,-51,]),'Till_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[110,110,-39,-40,-41,-42,-43,-44,-49,-36,-48,-47,-56,-59,110,-35,-57,-58,-45,-46,110,110,-11,-50,110,-52,-49,-55,110,110,-53,-51,]),'ComeBack_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[111,111,-39,-40,-41,-42,-43,-44,-49,-36,-48,-47,-56,-59,111,-35,-57,-58,-45,-46,111,111,-11,-50,111,-52,-49,-55,111,111,-53,-51,]),'GiveBack_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[112,112,-39,-40,-41,-42,-43,-44,-49,-36,-48,-47,-56,-59,112,-35,-57,-58,-45,-46,112,112,-11,-50,112,-52,-49,-55,112,112,-53,-51,]),'Continue_KW':([67,71,100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,169,170,172,173,174,175,176,177,178,179,181,182,],[113,113,-39,-40,-41,-42,-43,-44,-49,-36,-48,-47,-56,-59,113,-35,-57,-58,-45,-46,113,113,-11,-50,113,-52,-49,-55,113,113,-53,-51,]),'Closing_Brace':([100,101,102,103,104,105,107,108,136,137,140,144,154,155,161,162,165,166,172,173,174,175,176,177,180,181,182,],[-39,-40,-41,-42,-43,-44,-49,-36,-48,-47,-56,-59,165,-35,-57,-58,-45,-46,-11,-50,-36,-52,-49,-55,182,-53,-51,]),'Other_KW':([100,101,102,103,104,105,107,136,140,144,161,162,165,173,175,176,177,181,182,],[-39,-40,-41,-42,-43,-44,-49,-48,-56,-59,-57,-58,-45,-50,179,-49,-55,-53,-51,]),'Static_KW':([108,137,155,172,174,],[-36,157,-35,-11,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'list':([0,],[2,]),'declaration':([0,2,],[3,14,]),'function':([0,2,],[4,4,]),'varDeclaration':([0,2,],[5,5,]),'type':([0,2,22,31,37,137,157,],[7,7,30,30,30,158,168,]),'numOrLetter':([6,18,34,40,63,76,97,112,143,],[15,23,43,70,98,126,133,142,126,]),'variableList':([7,156,],[19,167,]),'varInitialization':([7,25,156,],[20,33,20,]),'varForm':([7,25,156,],[21,21,21,]),'parameter':([22,31,],[27,41,]),'listOfParameters':([22,31,],[28,28,]),'paramTypeList':([22,31,37,],[29,29,68,]),'paramList':([30,],[38,]),'paramId':([30,69,],[39,114,]),'eachExpression':([35,44,46,67,71,78,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[45,75,79,75,75,127,75,75,75,148,149,75,159,160,75,75,75,75,75,75,75,]),'logicOp':([35,44,45,46,67,71,75,78,79,96,112,118,127,128,129,134,138,139,148,149,154,159,160,164,169,170,174,178,179,],[46,46,78,46,46,46,78,46,78,46,46,46,78,46,46,46,46,46,78,78,46,78,78,46,46,46,46,46,46,]),'relExpression':([35,44,46,67,71,78,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'mathEXP':([35,44,46,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[53,53,53,53,53,53,130,131,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unaryExpression':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[54,54,54,95,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unaryop':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'factor':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'inalterable':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'alterable':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[61,74,61,61,74,74,61,61,61,74,74,146,61,61,74,61,61,74,74,74,74,74,74,74,]),'constant':([35,44,46,55,67,71,78,80,81,96,112,118,128,129,134,138,139,154,164,169,170,174,178,179,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'allExpression':([44,67,71,96,112,118,134,154,164,169,170,174,178,179,],[73,106,106,132,141,147,153,106,171,106,106,106,106,106,]),'compareType':([53,],[80,]),'op':([53,130,131,],[81,81,81,]),'equal':([53,],[82,]),'nonEqual':([53,],[83,]),'statement':([67,71,154,169,170,174,178,179,],[99,116,166,175,177,175,175,181,]),'phrase':([67,71,154,169,170,174,178,179,],[100,100,100,100,100,100,100,100,]),'compoundPhrase':([67,71,154,169,170,174,178,179,],[101,101,101,101,101,101,101,101,]),'selectPhrase':([67,71,154,169,170,174,178,179,],[102,102,102,102,102,102,102,102,]),'iterationPhrase':([67,71,154,169,170,174,178,179,],[103,103,103,103,103,103,103,103,]),'returnPhrase':([67,71,154,169,170,174,178,179,],[104,104,104,104,104,104,104,104,]),'continue':([67,71,154,169,170,174,178,179,],[105,105,105,105,105,105,105,105,]),'mathOp':([74,146,],[118,118,]),'localDeclarations':([108,174,],[137,137,]),'args':([134,],[151,]),'arguments':([134,],[152,]),'statementList':([137,],[154,]),'ScopedVariableDec':([137,],[155,]),'scopedSpecifier':([137,],[156,]),'ifBody':([169,174,178,],[173,178,180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> list','program',1,'p_program','Yacc.py',9),
  ('numOrLetter -> Num','numOrLetter',1,'p_numOrLetter','Yacc.py',12),
  ('numOrLetter -> Letter','numOrLetter',1,'p_numOrLetter','Yacc.py',13),
  ('numOrLetter -> numOrLetter','numOrLetter',1,'p_numOrLetter','Yacc.py',14),
  ('numOrLetter -> <empty>','numOrLetter',0,'p_numOrLetter','Yacc.py',15),
  ('list -> list declaration','list',2,'p_list','Yacc.py',18),
  ('list -> declaration','list',1,'p_list','Yacc.py',19),
  ('declaration -> function','declaration',1,'p_declaration','Yacc.py',22),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','Yacc.py',23),
  ('varDeclaration -> type variableList Semicolon','varDeclaration',3,'p_varDeclaration','Yacc.py',26),
  ('ScopedVariableDec -> scopedSpecifier variableList Semicolon','ScopedVariableDec',3,'p_ScopedVariableDec','Yacc.py',29),
  ('variableList -> variableList Comma varInitialization','variableList',3,'p_variableList','Yacc.py',32),
  ('variableList -> varInitialization','variableList',1,'p_variableList','Yacc.py',33),
  ('varInitialization -> varForm','varInitialization',1,'p_varInitialization','Yacc.py',36),
  ('varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses','varInitialization',5,'p_varInitialization','Yacc.py',37),
  ('varForm -> Letter numOrLetter Opening_Bracket Num Closing_Bracket','varForm',5,'p_varForm','Yacc.py',40),
  ('varForm -> Letter numOrLetter','varForm',2,'p_varForm','Yacc.py',41),
  ('scopedSpecifier -> Static_KW type','scopedSpecifier',2,'p_scopedSpecifier','Yacc.py',44),
  ('scopedSpecifier -> type','scopedSpecifier',1,'p_scopedSpecifier','Yacc.py',45),
  ('type -> Boolean_KW','type',1,'p_type','Yacc.py',48),
  ('type -> Character_KW','type',1,'p_type','Yacc.py',49),
  ('type -> Integer_KW','type',1,'p_type','Yacc.py',50),
  ('type -> char_KW','type',1,'p_type','Yacc.py',51),
  ('type -> bool_KW','type',1,'p_type','Yacc.py',52),
  ('type -> int_KW','type',1,'p_type','Yacc.py',53),
  ('function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket','function',8,'p_function','Yacc.py',56),
  ('function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement','function',7,'p_function','Yacc.py',57),
  ('parameter -> listOfParameters','parameter',1,'p_parameter','Yacc.py',60),
  ('parameter -> <empty>','parameter',0,'p_parameter','Yacc.py',61),
  ('listOfParameters -> listOfParameters Semicolon paramTypeList','listOfParameters',3,'p_listOfParameters','Yacc.py',64),
  ('listOfParameters -> paramTypeList','listOfParameters',1,'p_listOfParameters','Yacc.py',65),
  ('paramTypeList -> type paramList','paramTypeList',2,'p_paramTypeList','Yacc.py',68),
  ('paramList -> paramList Comma paramId','paramList',3,'p_paramList','Yacc.py',71),
  ('paramList -> paramId','paramList',1,'p_paramList','Yacc.py',72),
  ('localDeclarations -> localDeclarations ScopedVariableDec','localDeclarations',2,'p_localDeclarations','Yacc.py',75),
  ('localDeclarations -> <empty>','localDeclarations',0,'p_localDeclarations','Yacc.py',76),
  ('paramId -> Letter numOrLetter','paramId',2,'p_paramId','Yacc.py',79),
  ('paramId -> Letter numOrLetter Opening_Bracket Closing_Bracket','paramId',4,'p_paramId','Yacc.py',80),
  ('statement -> phrase','statement',1,'p_statement','Yacc.py',83),
  ('statement -> compoundPhrase','statement',1,'p_statement','Yacc.py',84),
  ('statement -> selectPhrase','statement',1,'p_statement','Yacc.py',85),
  ('statement -> iterationPhrase','statement',1,'p_statement','Yacc.py',86),
  ('statement -> returnPhrase','statement',1,'p_statement','Yacc.py',87),
  ('statement -> continue','statement',1,'p_statement','Yacc.py',88),
  ('compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace','compoundPhrase',4,'p_compoundPhrase','Yacc.py',91),
  ('statementList -> statementList statement','statementList',2,'p_statementList','Yacc.py',94),
  ('statementList -> <empty>','statementList',0,'p_statementList','Yacc.py',95),
  ('phrase -> allExpression Semicolon','phrase',2,'p_phrase','Yacc.py',98),
  ('phrase -> Semicolon','phrase',1,'p_phrase','Yacc.py',99),
  ('selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody','selectPhrase',5,'p_selectPhrase','Yacc.py',102),
  ('selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace','selectPhrase',8,'p_selectPhrase','Yacc.py',103),
  ('ifBody -> statement','ifBody',1,'p_ifBody','Yacc.py',106),
  ('ifBody -> statement Other_KW statement','ifBody',3,'p_ifBody','Yacc.py',107),
  ('ifBody -> Semicolon','ifBody',1,'p_ifBody','Yacc.py',108),
  ('iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement','iterationPhrase',5,'p_iterationPhrase','Yacc.py',111),
  ('returnPhrase -> ComeBack_KW Semicolon','returnPhrase',2,'p_returnPhrase','Yacc.py',114),
  ('returnPhrase -> GiveBack_KW allExpression Semicolon','returnPhrase',3,'p_returnPhrase','Yacc.py',115),
  ('returnPhrase -> GiveBack_KW numOrLetter Semicolon','returnPhrase',3,'p_returnPhrase','Yacc.py',116),
  ('continue -> Continue_KW Semicolon','continue',2,'p_continue','Yacc.py',119),
  ('allExpression -> alterable mathOp allExpression','allExpression',3,'p_allExpression','Yacc.py',122),
  ('allExpression -> alterable PP','allExpression',2,'p_allExpression','Yacc.py',123),
  ('allExpression -> alterable MM','allExpression',2,'p_allExpression','Yacc.py',124),
  ('allExpression -> eachExpression','allExpression',1,'p_allExpression','Yacc.py',125),
  ('allExpression -> alterable mathOp alterable','allExpression',3,'p_allExpression','Yacc.py',126),
  ('mathOp -> Equal','mathOp',1,'p_mathOp','Yacc.py',129),
  ('mathOp -> PlusEqual','mathOp',1,'p_mathOp','Yacc.py',130),
  ('mathOp -> MinusEqual','mathOp',1,'p_mathOp','Yacc.py',131),
  ('mathOp -> TimesEqual','mathOp',1,'p_mathOp','Yacc.py',132),
  ('mathOp -> DivideEqual','mathOp',1,'p_mathOp','Yacc.py',133),
  ('eachExpression -> eachExpression logicOp eachExpression','eachExpression',3,'p_eachExpression','Yacc.py',136),
  ('eachExpression -> eachExpression logicOp Then_KW eachExpression','eachExpression',4,'p_eachExpression','Yacc.py',137),
  ('eachExpression -> logicOp eachExpression','eachExpression',2,'p_eachExpression','Yacc.py',138),
  ('eachExpression -> relExpression','eachExpression',1,'p_eachExpression','Yacc.py',139),
  ('eachExpression -> eachExpression logicOp Else_KW eachExpression','eachExpression',4,'p_eachExpression','Yacc.py',140),
  ('relExpression -> mathEXP compareType mathEXP','relExpression',3,'p_relExpression','Yacc.py',143),
  ('relExpression -> mathEXP','relExpression',1,'p_relExpression','Yacc.py',144),
  ('compareType -> equal','compareType',1,'p_compareType','Yacc.py',147),
  ('compareType -> nonEqual','compareType',1,'p_compareType','Yacc.py',148),
  ('equal -> LEqual','equal',1,'p_equal','Yacc.py',151),
  ('equal -> GEqual','equal',1,'p_equal','Yacc.py',152),
  ('equal -> EEqual','equal',1,'p_equal','Yacc.py',153),
  ('nonEqual -> GreaterOP','nonEqual',1,'p_nonEqual','Yacc.py',156),
  ('nonEqual -> LessOP','nonEqual',1,'p_nonEqual','Yacc.py',157),
  ('nonEqual -> NonEqualOP','nonEqual',1,'p_nonEqual','Yacc.py',158),
  ('mathEXP -> mathEXP op mathEXP','mathEXP',3,'p_mathEXP','Yacc.py',161),
  ('mathEXP -> unaryExpression','mathEXP',1,'p_mathEXP','Yacc.py',162),
  ('op -> Plus','op',1,'p_op','Yacc.py',165),
  ('op -> Minus','op',1,'p_op','Yacc.py',166),
  ('op -> Times','op',1,'p_op','Yacc.py',167),
  ('op -> Divide','op',1,'p_op','Yacc.py',168),
  ('op -> ModeOP','op',1,'p_op','Yacc.py',169),
  ('unaryExpression -> unaryop unaryExpression','unaryExpression',2,'p_unaryExpression','Yacc.py',172),
  ('unaryExpression -> factor','unaryExpression',1,'p_unaryExpression','Yacc.py',173),
  ('unaryop -> Minus','unaryop',1,'p_unaryop','Yacc.py',176),
  ('unaryop -> Times','unaryop',1,'p_unaryop','Yacc.py',177),
  ('unaryop -> QMark','unaryop',1,'p_unaryop','Yacc.py',178),
  ('factor -> inalterable','factor',1,'p_factor','Yacc.py',181),
  ('factor -> alterable','factor',1,'p_factor','Yacc.py',182),
  ('alterable -> Letter numOrLetter','alterable',2,'p_alterable','Yacc.py',185),
  ('alterable -> alterable Opening_Bracket allExpression Closing_Bracket','alterable',4,'p_alterable','Yacc.py',186),
  ('alterable -> alterable Letter numOrLetter','alterable',3,'p_alterable','Yacc.py',187),
  ('inalterable -> Opening_Parentheses allExpression Closing_Parentheses','inalterable',3,'p_inalterable','Yacc.py',190),
  ('inalterable -> constant','inalterable',1,'p_inalterable','Yacc.py',191),
  ('inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses','inalterable',5,'p_inalterable','Yacc.py',192),
  ('args -> arguments','args',1,'p_args','Yacc.py',195),
  ('args -> <empty>','args',0,'p_args','Yacc.py',196),
  ('arguments -> arguments Comma allExpression','arguments',3,'p_arguments','Yacc.py',199),
  ('arguments -> allExpression','arguments',1,'p_arguments','Yacc.py',200),
  ('constant -> Const_KW','constant',1,'p_constant','Yacc.py',203),
  ('constant -> True_KW','constant',1,'p_constant','Yacc.py',204),
  ('constant -> False_KW','constant',1,'p_constant','Yacc.py',205),
  ('logicOp -> DoubleAnd','logicOp',1,'p_logicOp','Yacc.py',208),
  ('logicOp -> DoubleOr','logicOp',1,'p_logicOp','Yacc.py',209),
  ('logicOp -> Tilda','logicOp',1,'p_logicOp','Yacc.py',210),
  ('logicOp -> And','logicOp',1,'p_logicOp','Yacc.py',211),
  ('logicOp -> Or','logicOp',1,'p_logicOp','Yacc.py',212),
]
