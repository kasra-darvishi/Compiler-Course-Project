Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    Comment
    reserved

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     numOrLetter -> Num
Rule 3     numOrLetter -> Letter
Rule 4     numOrLetter -> numOrLetter
Rule 5     numOrLetter -> <empty>
Rule 6     list -> list declaration
Rule 7     list -> declaration
Rule 8     declaration -> function
Rule 9     declaration -> varDeclaration
Rule 10    varDeclaration -> type variableList Semicolon
Rule 11    ScopedVariableDec -> scopedSpecifier variableList Semicolon
Rule 12    variableList -> variableList Comma varInitialization
Rule 13    variableList -> varInitialization
Rule 14    varInitialization -> varForm
Rule 15    varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
Rule 16    varForm -> Letter numOrLetter Opening_Bracket Num Closing_Bracket
Rule 17    varForm -> Letter numOrLetter
Rule 18    scopedSpecifier -> Static_KW type
Rule 19    scopedSpecifier -> type
Rule 20    type -> Boolean_KW
Rule 21    type -> Character_KW
Rule 22    type -> Integer_KW
Rule 23    type -> char_KW
Rule 24    type -> bool_KW
Rule 25    type -> int_KW
Rule 26    function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket
Rule 27    function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement
Rule 28    parameter -> listOfParameters
Rule 29    parameter -> <empty>
Rule 30    listOfParameters -> listOfParameters Semicolon paramTypeList
Rule 31    listOfParameters -> paramTypeList
Rule 32    paramTypeList -> type paramList
Rule 33    paramList -> paramList Comma paramId
Rule 34    paramList -> paramId
Rule 35    localDeclarations -> localDeclarations ScopedVariableDec
Rule 36    localDeclarations -> <empty>
Rule 37    paramId -> Letter numOrLetter
Rule 38    paramId -> Letter numOrLetter Opening_Bracket Closing_Bracket
Rule 39    statement -> phrase
Rule 40    statement -> compoundPhrase
Rule 41    statement -> selectPhrase
Rule 42    statement -> iterationPhrase
Rule 43    statement -> returnPhrase
Rule 44    statement -> continue
Rule 45    compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace
Rule 46    statementList -> statementList statement
Rule 47    statementList -> <empty>
Rule 48    phrase -> allExpression Semicolon
Rule 49    phrase -> Semicolon
Rule 50    selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
Rule 51    selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
Rule 52    ifBody -> statement
Rule 53    ifBody -> statement Other_KW statement
Rule 54    ifBody -> Semicolon
Rule 55    iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
Rule 56    returnPhrase -> ComeBack_KW Semicolon
Rule 57    returnPhrase -> GiveBack_KW allExpression Semicolon
Rule 58    returnPhrase -> GiveBack_KW numOrLetter Semicolon
Rule 59    continue -> Continue_KW Semicolon
Rule 60    allExpression -> alterable mathOp allExpression
Rule 61    allExpression -> alterable PP
Rule 62    allExpression -> alterable MM
Rule 63    allExpression -> eachExpression
Rule 64    allExpression -> alterable mathOp alterable
Rule 65    mathOp -> Equal
Rule 66    mathOp -> PlusEqual
Rule 67    mathOp -> MinusEqual
Rule 68    mathOp -> TimesEqual
Rule 69    mathOp -> DivideEqual
Rule 70    eachExpression -> eachExpression logicOp eachExpression
Rule 71    eachExpression -> eachExpression logicOp Then_KW eachExpression
Rule 72    eachExpression -> logicOp eachExpression
Rule 73    eachExpression -> relExpression
Rule 74    eachExpression -> eachExpression logicOp Else_KW eachExpression
Rule 75    relExpression -> mathEXP compareType mathEXP
Rule 76    relExpression -> mathEXP
Rule 77    compareType -> equal
Rule 78    compareType -> nonEqual
Rule 79    equal -> LEqual
Rule 80    equal -> GEqual
Rule 81    equal -> EEqual
Rule 82    nonEqual -> GreaterOP
Rule 83    nonEqual -> LessOP
Rule 84    nonEqual -> NonEqualOP
Rule 85    mathEXP -> mathEXP op mathEXP
Rule 86    mathEXP -> unaryExpression
Rule 87    op -> Plus
Rule 88    op -> Minus
Rule 89    op -> Times
Rule 90    op -> Divide
Rule 91    op -> ModeOP
Rule 92    unaryExpression -> unaryop unaryExpression
Rule 93    unaryExpression -> factor
Rule 94    unaryop -> Minus
Rule 95    unaryop -> Times
Rule 96    unaryop -> QMark
Rule 97    factor -> inalterable
Rule 98    factor -> alterable
Rule 99    alterable -> Letter numOrLetter
Rule 100   alterable -> alterable Opening_Bracket allExpression Closing_Bracket
Rule 101   alterable -> alterable Letter numOrLetter
Rule 102   inalterable -> Opening_Parentheses allExpression Closing_Parentheses
Rule 103   inalterable -> constant
Rule 104   inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses
Rule 105   args -> arguments
Rule 106   args -> <empty>
Rule 107   arguments -> arguments Comma allExpression
Rule 108   arguments -> allExpression
Rule 109   constant -> Const_KW
Rule 110   constant -> True_KW
Rule 111   constant -> False_KW
Rule 112   logicOp -> DoubleAnd
Rule 113   logicOp -> DoubleOr
Rule 114   logicOp -> Tilda
Rule 115   logicOp -> And
Rule 116   logicOp -> Or

Terminals, with rules where they appear

And                  : 115
Boolean_KW           : 20
Character_KW         : 21
Closing_Brace        : 45 51
Closing_Bracket      : 16 26 38 100
Closing_Parentheses  : 15 26 27 50 51 55 102 104
Colon                : 15
ComeBack_KW          : 56
Comma                : 12 33 107
Comment              : 
Const_KW             : 109
Continue_KW          : 59
Divide               : 90
DivideEqual          : 69
DoubleAnd            : 112
DoubleOr             : 113
EEqual               : 81
Else_KW              : 74
Equal                : 65
False_KW             : 111
GEqual               : 80
GiveBack_KW          : 57 58
GreaterOP            : 82
If_KW                : 50 51
Integer_KW           : 22
LEqual               : 79
LessOP               : 83
Letter               : 3 16 17 27 37 38 99 101 104
MM                   : 62
Minus                : 88 94
MinusEqual           : 67
ModeOP               : 91
NonEqualOP           : 84
Num                  : 2 16
Opening_Brace        : 45 51
Opening_Bracket      : 16 26 38 100
Opening_Parentheses  : 15 26 27 50 51 55 102 104
Or                   : 116
Other_KW             : 53
PP                   : 61
Plus                 : 87
PlusEqual            : 66
QMark                : 96
Semicolon            : 10 11 30 48 49 54 56 57 58 59
Static_KW            : 18
Then_KW              : 71
Tilda                : 114
Till_KW              : 55
Times                : 89 95
TimesEqual           : 68
True_KW              : 110
bool_KW              : 24
char_KW              : 23
error                : 
int_KW               : 25
reserved             : 
void_KW              : 26

Nonterminals, with rules where they appear

ScopedVariableDec    : 35
allExpression        : 48 57 60 100 102 107 108
alterable            : 60 61 62 64 64 98 100 101
args                 : 104
arguments            : 105 107
compareType          : 75
compoundPhrase       : 40
constant             : 103
continue             : 44
declaration          : 6 7
eachExpression       : 15 50 51 55 63 70 70 71 71 72 74 74
equal                : 77
factor               : 93
function             : 8
ifBody               : 50 51 51
inalterable          : 97
iterationPhrase      : 42
list                 : 1 6
listOfParameters     : 28 30
localDeclarations    : 35 45
logicOp              : 70 71 72 74
mathEXP              : 75 75 76 85 85
mathOp               : 60 64
nonEqual             : 78
numOrLetter          : 4 16 17 26 27 37 38 58 99 101 104
op                   : 85
paramId              : 33 34
paramList            : 32 33
paramTypeList        : 30 31
parameter            : 26 27
phrase               : 39
program              : 0
relExpression        : 73
returnPhrase         : 43
scopedSpecifier      : 11
selectPhrase         : 41
statement            : 26 27 46 52 53 53 55
statementList        : 45 46
type                 : 10 18 19 27 32
unaryExpression      : 86 92
unaryop              : 92
varDeclaration       : 9
varForm              : 14 15
varInitialization    : 12 13
variableList         : 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (6) list -> . list declaration
    (7) list -> . declaration
    (8) declaration -> . function
    (9) declaration -> . varDeclaration
    (26) function -> . void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket
    (27) function -> . type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement
    (10) varDeclaration -> . type variableList Semicolon
    (20) type -> . Boolean_KW
    (21) type -> . Character_KW
    (22) type -> . Integer_KW
    (23) type -> . char_KW
    (24) type -> . bool_KW
    (25) type -> . int_KW

    void_KW         shift and go to state 6
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    program                        shift and go to state 1
    list                           shift and go to state 2
    declaration                    shift and go to state 3
    function                       shift and go to state 4
    varDeclaration                 shift and go to state 5
    type                           shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> list .
    (6) list -> list . declaration
    (8) declaration -> . function
    (9) declaration -> . varDeclaration
    (26) function -> . void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket
    (27) function -> . type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement
    (10) varDeclaration -> . type variableList Semicolon
    (20) type -> . Boolean_KW
    (21) type -> . Character_KW
    (22) type -> . Integer_KW
    (23) type -> . char_KW
    (24) type -> . bool_KW
    (25) type -> . int_KW

    $end            reduce using rule 1 (program -> list .)
    void_KW         shift and go to state 6
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    declaration                    shift and go to state 14
    function                       shift and go to state 4
    varDeclaration                 shift and go to state 5
    type                           shift and go to state 7

state 3

    (7) list -> declaration .

    void_KW         reduce using rule 7 (list -> declaration .)
    Boolean_KW      reduce using rule 7 (list -> declaration .)
    Character_KW    reduce using rule 7 (list -> declaration .)
    Integer_KW      reduce using rule 7 (list -> declaration .)
    char_KW         reduce using rule 7 (list -> declaration .)
    bool_KW         reduce using rule 7 (list -> declaration .)
    int_KW          reduce using rule 7 (list -> declaration .)
    $end            reduce using rule 7 (list -> declaration .)


state 4

    (8) declaration -> function .

    void_KW         reduce using rule 8 (declaration -> function .)
    Boolean_KW      reduce using rule 8 (declaration -> function .)
    Character_KW    reduce using rule 8 (declaration -> function .)
    Integer_KW      reduce using rule 8 (declaration -> function .)
    char_KW         reduce using rule 8 (declaration -> function .)
    bool_KW         reduce using rule 8 (declaration -> function .)
    int_KW          reduce using rule 8 (declaration -> function .)
    $end            reduce using rule 8 (declaration -> function .)


state 5

    (9) declaration -> varDeclaration .

    void_KW         reduce using rule 9 (declaration -> varDeclaration .)
    Boolean_KW      reduce using rule 9 (declaration -> varDeclaration .)
    Character_KW    reduce using rule 9 (declaration -> varDeclaration .)
    Integer_KW      reduce using rule 9 (declaration -> varDeclaration .)
    char_KW         reduce using rule 9 (declaration -> varDeclaration .)
    bool_KW         reduce using rule 9 (declaration -> varDeclaration .)
    int_KW          reduce using rule 9 (declaration -> varDeclaration .)
    $end            reduce using rule 9 (declaration -> varDeclaration .)


state 6

    (26) function -> void_KW . numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . Letter
    (4) numOrLetter -> . numOrLetter
    (5) numOrLetter -> .

    Num             shift and go to state 16
    Letter          shift and go to state 17
    Opening_Parentheses reduce using rule 5 (numOrLetter -> .)

    numOrLetter                    shift and go to state 15

state 7

    (27) function -> type . Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement
    (10) varDeclaration -> type . variableList Semicolon
    (12) variableList -> . variableList Comma varInitialization
    (13) variableList -> . varInitialization
    (14) varInitialization -> . varForm
    (15) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (16) varForm -> . Letter numOrLetter Opening_Bracket Num Closing_Bracket
    (17) varForm -> . Letter numOrLetter

    Letter          shift and go to state 18

    variableList                   shift and go to state 19
    varInitialization              shift and go to state 20
    varForm                        shift and go to state 21

state 8

    (20) type -> Boolean_KW .

    Letter          reduce using rule 20 (type -> Boolean_KW .)


state 9

    (21) type -> Character_KW .

    Letter          reduce using rule 21 (type -> Character_KW .)


state 10

    (22) type -> Integer_KW .

    Letter          reduce using rule 22 (type -> Integer_KW .)


state 11

    (23) type -> char_KW .

    Letter          reduce using rule 23 (type -> char_KW .)


state 12

    (24) type -> bool_KW .

    Letter          reduce using rule 24 (type -> bool_KW .)


state 13

    (25) type -> int_KW .

    Letter          reduce using rule 25 (type -> int_KW .)


state 14

    (6) list -> list declaration .

    void_KW         reduce using rule 6 (list -> list declaration .)
    Boolean_KW      reduce using rule 6 (list -> list declaration .)
    Character_KW    reduce using rule 6 (list -> list declaration .)
    Integer_KW      reduce using rule 6 (list -> list declaration .)
    char_KW         reduce using rule 6 (list -> list declaration .)
    bool_KW         reduce using rule 6 (list -> list declaration .)
    int_KW          reduce using rule 6 (list -> list declaration .)
    $end            reduce using rule 6 (list -> list declaration .)


state 15

    (26) function -> void_KW numOrLetter . Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket
    (4) numOrLetter -> numOrLetter .

  ! shift/reduce conflict for Opening_Parentheses resolved as shift
    Opening_Parentheses shift and go to state 22

  ! Opening_Parentheses [ reduce using rule 4 (numOrLetter -> numOrLetter .) ]


state 16

    (2) numOrLetter -> Num .

    Opening_Parentheses reduce using rule 2 (numOrLetter -> Num .)
    Opening_Bracket reduce using rule 2 (numOrLetter -> Num .)
    Colon           reduce using rule 2 (numOrLetter -> Num .)
    Semicolon       reduce using rule 2 (numOrLetter -> Num .)
    Comma           reduce using rule 2 (numOrLetter -> Num .)
    Closing_Parentheses reduce using rule 2 (numOrLetter -> Num .)
    Letter          reduce using rule 2 (numOrLetter -> Num .)
    Plus            reduce using rule 2 (numOrLetter -> Num .)
    Minus           reduce using rule 2 (numOrLetter -> Num .)
    Times           reduce using rule 2 (numOrLetter -> Num .)
    Divide          reduce using rule 2 (numOrLetter -> Num .)
    ModeOP          reduce using rule 2 (numOrLetter -> Num .)
    LEqual          reduce using rule 2 (numOrLetter -> Num .)
    GEqual          reduce using rule 2 (numOrLetter -> Num .)
    EEqual          reduce using rule 2 (numOrLetter -> Num .)
    GreaterOP       reduce using rule 2 (numOrLetter -> Num .)
    LessOP          reduce using rule 2 (numOrLetter -> Num .)
    NonEqualOP      reduce using rule 2 (numOrLetter -> Num .)
    DoubleAnd       reduce using rule 2 (numOrLetter -> Num .)
    DoubleOr        reduce using rule 2 (numOrLetter -> Num .)
    Tilda           reduce using rule 2 (numOrLetter -> Num .)
    And             reduce using rule 2 (numOrLetter -> Num .)
    Or              reduce using rule 2 (numOrLetter -> Num .)
    Closing_Bracket reduce using rule 2 (numOrLetter -> Num .)
    PP              reduce using rule 2 (numOrLetter -> Num .)
    MM              reduce using rule 2 (numOrLetter -> Num .)
    Equal           reduce using rule 2 (numOrLetter -> Num .)
    PlusEqual       reduce using rule 2 (numOrLetter -> Num .)
    MinusEqual      reduce using rule 2 (numOrLetter -> Num .)
    TimesEqual      reduce using rule 2 (numOrLetter -> Num .)
    DivideEqual     reduce using rule 2 (numOrLetter -> Num .)


state 17

    (3) numOrLetter -> Letter .

    Opening_Parentheses reduce using rule 3 (numOrLetter -> Letter .)
    Opening_Bracket reduce using rule 3 (numOrLetter -> Letter .)
    Colon           reduce using rule 3 (numOrLetter -> Letter .)
    Semicolon       reduce using rule 3 (numOrLetter -> Letter .)
    Comma           reduce using rule 3 (numOrLetter -> Letter .)
    Closing_Parentheses reduce using rule 3 (numOrLetter -> Letter .)
    Letter          reduce using rule 3 (numOrLetter -> Letter .)
    Plus            reduce using rule 3 (numOrLetter -> Letter .)
    Minus           reduce using rule 3 (numOrLetter -> Letter .)
    Times           reduce using rule 3 (numOrLetter -> Letter .)
    Divide          reduce using rule 3 (numOrLetter -> Letter .)
    ModeOP          reduce using rule 3 (numOrLetter -> Letter .)
    LEqual          reduce using rule 3 (numOrLetter -> Letter .)
    GEqual          reduce using rule 3 (numOrLetter -> Letter .)
    EEqual          reduce using rule 3 (numOrLetter -> Letter .)
    GreaterOP       reduce using rule 3 (numOrLetter -> Letter .)
    LessOP          reduce using rule 3 (numOrLetter -> Letter .)
    NonEqualOP      reduce using rule 3 (numOrLetter -> Letter .)
    DoubleAnd       reduce using rule 3 (numOrLetter -> Letter .)
    DoubleOr        reduce using rule 3 (numOrLetter -> Letter .)
    Tilda           reduce using rule 3 (numOrLetter -> Letter .)
    And             reduce using rule 3 (numOrLetter -> Letter .)
    Or              reduce using rule 3 (numOrLetter -> Letter .)
    Closing_Bracket reduce using rule 3 (numOrLetter -> Letter .)
    PP              reduce using rule 3 (numOrLetter -> Letter .)
    MM              reduce using rule 3 (numOrLetter -> Letter .)
    Equal           reduce using rule 3 (numOrLetter -> Letter .)
    PlusEqual       reduce using rule 3 (numOrLetter -> Letter .)
    MinusEqual      reduce using rule 3 (numOrLetter -> Letter .)
    TimesEqual      reduce using rule 3 (numOrLetter -> Letter .)
    DivideEqual     reduce using rule 3 (numOrLetter -> Letter .)


state 18

    (27) function -> type Letter . numOrLetter Opening_Parentheses parameter Closing_Parentheses statement
    (16) varForm -> Letter . numOrLetter Opening_Bracket Num Closing_Bracket
    (17) varForm -> Letter . numOrLetter
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . Letter
    (4) numOrLetter -> . numOrLetter
    (5) numOrLetter -> .

    Num             shift and go to state 16
    Letter          shift and go to state 17
    Opening_Parentheses reduce using rule 5 (numOrLetter -> .)
    Opening_Bracket reduce using rule 5 (numOrLetter -> .)
    Colon           reduce using rule 5 (numOrLetter -> .)
    Semicolon       reduce using rule 5 (numOrLetter -> .)
    Comma           reduce using rule 5 (numOrLetter -> .)

    numOrLetter                    shift and go to state 23

state 19

    (10) varDeclaration -> type variableList . Semicolon
    (12) variableList -> variableList . Comma varInitialization

    Semicolon       shift and go to state 24
    Comma           shift and go to state 25


state 20

    (13) variableList -> varInitialization .

    Semicolon       reduce using rule 13 (variableList -> varInitialization .)
    Comma           reduce using rule 13 (variableList -> varInitialization .)


state 21

    (14) varInitialization -> varForm .
    (15) varInitialization -> varForm . Colon Opening_Parentheses eachExpression Closing_Parentheses

    Semicolon       reduce using rule 14 (varInitialization -> varForm .)
    Comma           reduce using rule 14 (varInitialization -> varForm .)
    Colon           shift and go to state 26


state 22

    (26) function -> void_KW numOrLetter Opening_Parentheses . parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket
    (28) parameter -> . listOfParameters
    (29) parameter -> .
    (30) listOfParameters -> . listOfParameters Semicolon paramTypeList
    (31) listOfParameters -> . paramTypeList
    (32) paramTypeList -> . type paramList
    (20) type -> . Boolean_KW
    (21) type -> . Character_KW
    (22) type -> . Integer_KW
    (23) type -> . char_KW
    (24) type -> . bool_KW
    (25) type -> . int_KW

    Closing_Parentheses reduce using rule 29 (parameter -> .)
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    parameter                      shift and go to state 27
    listOfParameters               shift and go to state 28
    paramTypeList                  shift and go to state 29
    type                           shift and go to state 30

state 23

    (27) function -> type Letter numOrLetter . Opening_Parentheses parameter Closing_Parentheses statement
    (16) varForm -> Letter numOrLetter . Opening_Bracket Num Closing_Bracket
    (17) varForm -> Letter numOrLetter .
    (4) numOrLetter -> numOrLetter .

  ! shift/reduce conflict for Opening_Parentheses resolved as shift
  ! shift/reduce conflict for Opening_Bracket resolved as shift
  ! reduce/reduce conflict for Colon resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Semicolon resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Comma resolved using rule 4 (numOrLetter -> numOrLetter .)
    Opening_Parentheses shift and go to state 31
    Opening_Bracket shift and go to state 32
    Colon           reduce using rule 4 (numOrLetter -> numOrLetter .)
    Semicolon       reduce using rule 4 (numOrLetter -> numOrLetter .)
    Comma           reduce using rule 4 (numOrLetter -> numOrLetter .)

  ! Colon           [ reduce using rule 17 (varForm -> Letter numOrLetter .) ]
  ! Semicolon       [ reduce using rule 17 (varForm -> Letter numOrLetter .) ]
  ! Comma           [ reduce using rule 17 (varForm -> Letter numOrLetter .) ]
  ! Opening_Parentheses [ reduce using rule 4 (numOrLetter -> numOrLetter .) ]
  ! Opening_Bracket [ reduce using rule 4 (numOrLetter -> numOrLetter .) ]


state 24

    (10) varDeclaration -> type variableList Semicolon .

    void_KW         reduce using rule 10 (varDeclaration -> type variableList Semicolon .)
    Boolean_KW      reduce using rule 10 (varDeclaration -> type variableList Semicolon .)
    Character_KW    reduce using rule 10 (varDeclaration -> type variableList Semicolon .)
    Integer_KW      reduce using rule 10 (varDeclaration -> type variableList Semicolon .)
    char_KW         reduce using rule 10 (varDeclaration -> type variableList Semicolon .)
    bool_KW         reduce using rule 10 (varDeclaration -> type variableList Semicolon .)
    int_KW          reduce using rule 10 (varDeclaration -> type variableList Semicolon .)
    $end            reduce using rule 10 (varDeclaration -> type variableList Semicolon .)


state 25

    (12) variableList -> variableList Comma . varInitialization
    (14) varInitialization -> . varForm
    (15) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (16) varForm -> . Letter numOrLetter Opening_Bracket Num Closing_Bracket
    (17) varForm -> . Letter numOrLetter

    Letter          shift and go to state 34

    varInitialization              shift and go to state 33
    varForm                        shift and go to state 21

state 26

    (15) varInitialization -> varForm Colon . Opening_Parentheses eachExpression Closing_Parentheses

    Opening_Parentheses shift and go to state 35


state 27

    (26) function -> void_KW numOrLetter Opening_Parentheses parameter . Closing_Parentheses Opening_Bracket statement Closing_Bracket

    Closing_Parentheses shift and go to state 36


state 28

    (28) parameter -> listOfParameters .
    (30) listOfParameters -> listOfParameters . Semicolon paramTypeList

    Closing_Parentheses reduce using rule 28 (parameter -> listOfParameters .)
    Semicolon       shift and go to state 37


state 29

    (31) listOfParameters -> paramTypeList .

    Semicolon       reduce using rule 31 (listOfParameters -> paramTypeList .)
    Closing_Parentheses reduce using rule 31 (listOfParameters -> paramTypeList .)


state 30

    (32) paramTypeList -> type . paramList
    (33) paramList -> . paramList Comma paramId
    (34) paramList -> . paramId
    (37) paramId -> . Letter numOrLetter
    (38) paramId -> . Letter numOrLetter Opening_Bracket Closing_Bracket

    Letter          shift and go to state 40

    paramList                      shift and go to state 38
    paramId                        shift and go to state 39

state 31

    (27) function -> type Letter numOrLetter Opening_Parentheses . parameter Closing_Parentheses statement
    (28) parameter -> . listOfParameters
    (29) parameter -> .
    (30) listOfParameters -> . listOfParameters Semicolon paramTypeList
    (31) listOfParameters -> . paramTypeList
    (32) paramTypeList -> . type paramList
    (20) type -> . Boolean_KW
    (21) type -> . Character_KW
    (22) type -> . Integer_KW
    (23) type -> . char_KW
    (24) type -> . bool_KW
    (25) type -> . int_KW

    Closing_Parentheses reduce using rule 29 (parameter -> .)
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    type                           shift and go to state 30
    parameter                      shift and go to state 41
    listOfParameters               shift and go to state 28
    paramTypeList                  shift and go to state 29

state 32

    (16) varForm -> Letter numOrLetter Opening_Bracket . Num Closing_Bracket

    Num             shift and go to state 42


state 33

    (12) variableList -> variableList Comma varInitialization .

    Semicolon       reduce using rule 12 (variableList -> variableList Comma varInitialization .)
    Comma           reduce using rule 12 (variableList -> variableList Comma varInitialization .)


state 34

    (16) varForm -> Letter . numOrLetter Opening_Bracket Num Closing_Bracket
    (17) varForm -> Letter . numOrLetter
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . Letter
    (4) numOrLetter -> . numOrLetter
    (5) numOrLetter -> .

    Num             shift and go to state 16
    Letter          shift and go to state 17
    Opening_Bracket reduce using rule 5 (numOrLetter -> .)
    Colon           reduce using rule 5 (numOrLetter -> .)
    Semicolon       reduce using rule 5 (numOrLetter -> .)
    Comma           reduce using rule 5 (numOrLetter -> .)

    numOrLetter                    shift and go to state 43

state 35

    (15) varInitialization -> varForm Colon Opening_Parentheses . eachExpression Closing_Parentheses
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    eachExpression                 shift and go to state 45
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 36

    (26) function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses . Opening_Bracket statement Closing_Bracket

    Opening_Bracket shift and go to state 67


state 37

    (30) listOfParameters -> listOfParameters Semicolon . paramTypeList
    (32) paramTypeList -> . type paramList
    (20) type -> . Boolean_KW
    (21) type -> . Character_KW
    (22) type -> . Integer_KW
    (23) type -> . char_KW
    (24) type -> . bool_KW
    (25) type -> . int_KW

    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    paramTypeList                  shift and go to state 68
    type                           shift and go to state 30

state 38

    (32) paramTypeList -> type paramList .
    (33) paramList -> paramList . Comma paramId

    Semicolon       reduce using rule 32 (paramTypeList -> type paramList .)
    Closing_Parentheses reduce using rule 32 (paramTypeList -> type paramList .)
    Comma           shift and go to state 69


state 39

    (34) paramList -> paramId .

    Comma           reduce using rule 34 (paramList -> paramId .)
    Semicolon       reduce using rule 34 (paramList -> paramId .)
    Closing_Parentheses reduce using rule 34 (paramList -> paramId .)


state 40

    (37) paramId -> Letter . numOrLetter
    (38) paramId -> Letter . numOrLetter Opening_Bracket Closing_Bracket
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . Letter
    (4) numOrLetter -> . numOrLetter
    (5) numOrLetter -> .

    Num             shift and go to state 16
    Letter          shift and go to state 17
    Opening_Bracket reduce using rule 5 (numOrLetter -> .)
    Comma           reduce using rule 5 (numOrLetter -> .)
    Semicolon       reduce using rule 5 (numOrLetter -> .)
    Closing_Parentheses reduce using rule 5 (numOrLetter -> .)

    numOrLetter                    shift and go to state 70

state 41

    (27) function -> type Letter numOrLetter Opening_Parentheses parameter . Closing_Parentheses statement

    Closing_Parentheses shift and go to state 71


state 42

    (16) varForm -> Letter numOrLetter Opening_Bracket Num . Closing_Bracket

    Closing_Bracket shift and go to state 72


state 43

    (16) varForm -> Letter numOrLetter . Opening_Bracket Num Closing_Bracket
    (17) varForm -> Letter numOrLetter .
    (4) numOrLetter -> numOrLetter .

  ! shift/reduce conflict for Opening_Bracket resolved as shift
  ! reduce/reduce conflict for Colon resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Semicolon resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Comma resolved using rule 4 (numOrLetter -> numOrLetter .)
    Opening_Bracket shift and go to state 32
    Colon           reduce using rule 4 (numOrLetter -> numOrLetter .)
    Semicolon       reduce using rule 4 (numOrLetter -> numOrLetter .)
    Comma           reduce using rule 4 (numOrLetter -> numOrLetter .)

  ! Colon           [ reduce using rule 17 (varForm -> Letter numOrLetter .) ]
  ! Semicolon       [ reduce using rule 17 (varForm -> Letter numOrLetter .) ]
  ! Comma           [ reduce using rule 17 (varForm -> Letter numOrLetter .) ]
  ! Opening_Bracket [ reduce using rule 4 (numOrLetter -> numOrLetter .) ]


state 44

    (102) inalterable -> Opening_Parentheses . allExpression Closing_Parentheses
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    allExpression                  shift and go to state 73
    alterable                      shift and go to state 74
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 45

    (15) varInitialization -> varForm Colon Opening_Parentheses eachExpression . Closing_Parentheses
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (74) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or

    Closing_Parentheses shift and go to state 77
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52

    logicOp                        shift and go to state 78

state 46

    (72) eachExpression -> logicOp . eachExpression
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    logicOp                        shift and go to state 46
    eachExpression                 shift and go to state 79
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 47

    (73) eachExpression -> relExpression .

    Closing_Parentheses reduce using rule 73 (eachExpression -> relExpression .)
    DoubleAnd       reduce using rule 73 (eachExpression -> relExpression .)
    DoubleOr        reduce using rule 73 (eachExpression -> relExpression .)
    Tilda           reduce using rule 73 (eachExpression -> relExpression .)
    And             reduce using rule 73 (eachExpression -> relExpression .)
    Or              reduce using rule 73 (eachExpression -> relExpression .)
    Semicolon       reduce using rule 73 (eachExpression -> relExpression .)
    Closing_Bracket reduce using rule 73 (eachExpression -> relExpression .)
    Comma           reduce using rule 73 (eachExpression -> relExpression .)


state 48

    (112) logicOp -> DoubleAnd .

    DoubleAnd       reduce using rule 112 (logicOp -> DoubleAnd .)
    DoubleOr        reduce using rule 112 (logicOp -> DoubleAnd .)
    Tilda           reduce using rule 112 (logicOp -> DoubleAnd .)
    And             reduce using rule 112 (logicOp -> DoubleAnd .)
    Or              reduce using rule 112 (logicOp -> DoubleAnd .)
    Minus           reduce using rule 112 (logicOp -> DoubleAnd .)
    Times           reduce using rule 112 (logicOp -> DoubleAnd .)
    QMark           reduce using rule 112 (logicOp -> DoubleAnd .)
    Opening_Parentheses reduce using rule 112 (logicOp -> DoubleAnd .)
    Letter          reduce using rule 112 (logicOp -> DoubleAnd .)
    Const_KW        reduce using rule 112 (logicOp -> DoubleAnd .)
    True_KW         reduce using rule 112 (logicOp -> DoubleAnd .)
    False_KW        reduce using rule 112 (logicOp -> DoubleAnd .)
    Then_KW         reduce using rule 112 (logicOp -> DoubleAnd .)
    Else_KW         reduce using rule 112 (logicOp -> DoubleAnd .)


state 49

    (113) logicOp -> DoubleOr .

    DoubleAnd       reduce using rule 113 (logicOp -> DoubleOr .)
    DoubleOr        reduce using rule 113 (logicOp -> DoubleOr .)
    Tilda           reduce using rule 113 (logicOp -> DoubleOr .)
    And             reduce using rule 113 (logicOp -> DoubleOr .)
    Or              reduce using rule 113 (logicOp -> DoubleOr .)
    Minus           reduce using rule 113 (logicOp -> DoubleOr .)
    Times           reduce using rule 113 (logicOp -> DoubleOr .)
    QMark           reduce using rule 113 (logicOp -> DoubleOr .)
    Opening_Parentheses reduce using rule 113 (logicOp -> DoubleOr .)
    Letter          reduce using rule 113 (logicOp -> DoubleOr .)
    Const_KW        reduce using rule 113 (logicOp -> DoubleOr .)
    True_KW         reduce using rule 113 (logicOp -> DoubleOr .)
    False_KW        reduce using rule 113 (logicOp -> DoubleOr .)
    Then_KW         reduce using rule 113 (logicOp -> DoubleOr .)
    Else_KW         reduce using rule 113 (logicOp -> DoubleOr .)


state 50

    (114) logicOp -> Tilda .

    DoubleAnd       reduce using rule 114 (logicOp -> Tilda .)
    DoubleOr        reduce using rule 114 (logicOp -> Tilda .)
    Tilda           reduce using rule 114 (logicOp -> Tilda .)
    And             reduce using rule 114 (logicOp -> Tilda .)
    Or              reduce using rule 114 (logicOp -> Tilda .)
    Minus           reduce using rule 114 (logicOp -> Tilda .)
    Times           reduce using rule 114 (logicOp -> Tilda .)
    QMark           reduce using rule 114 (logicOp -> Tilda .)
    Opening_Parentheses reduce using rule 114 (logicOp -> Tilda .)
    Letter          reduce using rule 114 (logicOp -> Tilda .)
    Const_KW        reduce using rule 114 (logicOp -> Tilda .)
    True_KW         reduce using rule 114 (logicOp -> Tilda .)
    False_KW        reduce using rule 114 (logicOp -> Tilda .)
    Then_KW         reduce using rule 114 (logicOp -> Tilda .)
    Else_KW         reduce using rule 114 (logicOp -> Tilda .)


state 51

    (115) logicOp -> And .

    DoubleAnd       reduce using rule 115 (logicOp -> And .)
    DoubleOr        reduce using rule 115 (logicOp -> And .)
    Tilda           reduce using rule 115 (logicOp -> And .)
    And             reduce using rule 115 (logicOp -> And .)
    Or              reduce using rule 115 (logicOp -> And .)
    Minus           reduce using rule 115 (logicOp -> And .)
    Times           reduce using rule 115 (logicOp -> And .)
    QMark           reduce using rule 115 (logicOp -> And .)
    Opening_Parentheses reduce using rule 115 (logicOp -> And .)
    Letter          reduce using rule 115 (logicOp -> And .)
    Const_KW        reduce using rule 115 (logicOp -> And .)
    True_KW         reduce using rule 115 (logicOp -> And .)
    False_KW        reduce using rule 115 (logicOp -> And .)
    Then_KW         reduce using rule 115 (logicOp -> And .)
    Else_KW         reduce using rule 115 (logicOp -> And .)


state 52

    (116) logicOp -> Or .

    DoubleAnd       reduce using rule 116 (logicOp -> Or .)
    DoubleOr        reduce using rule 116 (logicOp -> Or .)
    Tilda           reduce using rule 116 (logicOp -> Or .)
    And             reduce using rule 116 (logicOp -> Or .)
    Or              reduce using rule 116 (logicOp -> Or .)
    Minus           reduce using rule 116 (logicOp -> Or .)
    Times           reduce using rule 116 (logicOp -> Or .)
    QMark           reduce using rule 116 (logicOp -> Or .)
    Opening_Parentheses reduce using rule 116 (logicOp -> Or .)
    Letter          reduce using rule 116 (logicOp -> Or .)
    Const_KW        reduce using rule 116 (logicOp -> Or .)
    True_KW         reduce using rule 116 (logicOp -> Or .)
    False_KW        reduce using rule 116 (logicOp -> Or .)
    Then_KW         reduce using rule 116 (logicOp -> Or .)
    Else_KW         reduce using rule 116 (logicOp -> Or .)


state 53

    (75) relExpression -> mathEXP . compareType mathEXP
    (76) relExpression -> mathEXP .
    (85) mathEXP -> mathEXP . op mathEXP
    (77) compareType -> . equal
    (78) compareType -> . nonEqual
    (87) op -> . Plus
    (88) op -> . Minus
    (89) op -> . Times
    (90) op -> . Divide
    (91) op -> . ModeOP
    (79) equal -> . LEqual
    (80) equal -> . GEqual
    (81) equal -> . EEqual
    (82) nonEqual -> . GreaterOP
    (83) nonEqual -> . LessOP
    (84) nonEqual -> . NonEqualOP

    Closing_Parentheses reduce using rule 76 (relExpression -> mathEXP .)
    DoubleAnd       reduce using rule 76 (relExpression -> mathEXP .)
    DoubleOr        reduce using rule 76 (relExpression -> mathEXP .)
    Tilda           reduce using rule 76 (relExpression -> mathEXP .)
    And             reduce using rule 76 (relExpression -> mathEXP .)
    Or              reduce using rule 76 (relExpression -> mathEXP .)
    Semicolon       reduce using rule 76 (relExpression -> mathEXP .)
    Closing_Bracket reduce using rule 76 (relExpression -> mathEXP .)
    Comma           reduce using rule 76 (relExpression -> mathEXP .)
    Plus            shift and go to state 84
    Minus           shift and go to state 85
    Times           shift and go to state 86
    Divide          shift and go to state 87
    ModeOP          shift and go to state 88
    LEqual          shift and go to state 89
    GEqual          shift and go to state 90
    EEqual          shift and go to state 91
    GreaterOP       shift and go to state 92
    LessOP          shift and go to state 93
    NonEqualOP      shift and go to state 94

    compareType                    shift and go to state 80
    op                             shift and go to state 81
    equal                          shift and go to state 82
    nonEqual                       shift and go to state 83

state 54

    (86) mathEXP -> unaryExpression .

    Plus            reduce using rule 86 (mathEXP -> unaryExpression .)
    Minus           reduce using rule 86 (mathEXP -> unaryExpression .)
    Times           reduce using rule 86 (mathEXP -> unaryExpression .)
    Divide          reduce using rule 86 (mathEXP -> unaryExpression .)
    ModeOP          reduce using rule 86 (mathEXP -> unaryExpression .)
    LEqual          reduce using rule 86 (mathEXP -> unaryExpression .)
    GEqual          reduce using rule 86 (mathEXP -> unaryExpression .)
    EEqual          reduce using rule 86 (mathEXP -> unaryExpression .)
    GreaterOP       reduce using rule 86 (mathEXP -> unaryExpression .)
    LessOP          reduce using rule 86 (mathEXP -> unaryExpression .)
    NonEqualOP      reduce using rule 86 (mathEXP -> unaryExpression .)
    Closing_Parentheses reduce using rule 86 (mathEXP -> unaryExpression .)
    DoubleAnd       reduce using rule 86 (mathEXP -> unaryExpression .)
    DoubleOr        reduce using rule 86 (mathEXP -> unaryExpression .)
    Tilda           reduce using rule 86 (mathEXP -> unaryExpression .)
    And             reduce using rule 86 (mathEXP -> unaryExpression .)
    Or              reduce using rule 86 (mathEXP -> unaryExpression .)
    Semicolon       reduce using rule 86 (mathEXP -> unaryExpression .)
    Closing_Bracket reduce using rule 86 (mathEXP -> unaryExpression .)
    Comma           reduce using rule 86 (mathEXP -> unaryExpression .)


state 55

    (92) unaryExpression -> unaryop . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    unaryop                        shift and go to state 55
    unaryExpression                shift and go to state 95
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 56

    (93) unaryExpression -> factor .

    Plus            reduce using rule 93 (unaryExpression -> factor .)
    Minus           reduce using rule 93 (unaryExpression -> factor .)
    Times           reduce using rule 93 (unaryExpression -> factor .)
    Divide          reduce using rule 93 (unaryExpression -> factor .)
    ModeOP          reduce using rule 93 (unaryExpression -> factor .)
    LEqual          reduce using rule 93 (unaryExpression -> factor .)
    GEqual          reduce using rule 93 (unaryExpression -> factor .)
    EEqual          reduce using rule 93 (unaryExpression -> factor .)
    GreaterOP       reduce using rule 93 (unaryExpression -> factor .)
    LessOP          reduce using rule 93 (unaryExpression -> factor .)
    NonEqualOP      reduce using rule 93 (unaryExpression -> factor .)
    Closing_Parentheses reduce using rule 93 (unaryExpression -> factor .)
    DoubleAnd       reduce using rule 93 (unaryExpression -> factor .)
    DoubleOr        reduce using rule 93 (unaryExpression -> factor .)
    Tilda           reduce using rule 93 (unaryExpression -> factor .)
    And             reduce using rule 93 (unaryExpression -> factor .)
    Or              reduce using rule 93 (unaryExpression -> factor .)
    Semicolon       reduce using rule 93 (unaryExpression -> factor .)
    Closing_Bracket reduce using rule 93 (unaryExpression -> factor .)
    Comma           reduce using rule 93 (unaryExpression -> factor .)


state 57

    (94) unaryop -> Minus .

    Minus           reduce using rule 94 (unaryop -> Minus .)
    Times           reduce using rule 94 (unaryop -> Minus .)
    QMark           reduce using rule 94 (unaryop -> Minus .)
    Opening_Parentheses reduce using rule 94 (unaryop -> Minus .)
    Letter          reduce using rule 94 (unaryop -> Minus .)
    Const_KW        reduce using rule 94 (unaryop -> Minus .)
    True_KW         reduce using rule 94 (unaryop -> Minus .)
    False_KW        reduce using rule 94 (unaryop -> Minus .)


state 58

    (95) unaryop -> Times .

    Minus           reduce using rule 95 (unaryop -> Times .)
    Times           reduce using rule 95 (unaryop -> Times .)
    QMark           reduce using rule 95 (unaryop -> Times .)
    Opening_Parentheses reduce using rule 95 (unaryop -> Times .)
    Letter          reduce using rule 95 (unaryop -> Times .)
    Const_KW        reduce using rule 95 (unaryop -> Times .)
    True_KW         reduce using rule 95 (unaryop -> Times .)
    False_KW        reduce using rule 95 (unaryop -> Times .)


state 59

    (96) unaryop -> QMark .

    Minus           reduce using rule 96 (unaryop -> QMark .)
    Times           reduce using rule 96 (unaryop -> QMark .)
    QMark           reduce using rule 96 (unaryop -> QMark .)
    Opening_Parentheses reduce using rule 96 (unaryop -> QMark .)
    Letter          reduce using rule 96 (unaryop -> QMark .)
    Const_KW        reduce using rule 96 (unaryop -> QMark .)
    True_KW         reduce using rule 96 (unaryop -> QMark .)
    False_KW        reduce using rule 96 (unaryop -> QMark .)


state 60

    (97) factor -> inalterable .

    Plus            reduce using rule 97 (factor -> inalterable .)
    Minus           reduce using rule 97 (factor -> inalterable .)
    Times           reduce using rule 97 (factor -> inalterable .)
    Divide          reduce using rule 97 (factor -> inalterable .)
    ModeOP          reduce using rule 97 (factor -> inalterable .)
    LEqual          reduce using rule 97 (factor -> inalterable .)
    GEqual          reduce using rule 97 (factor -> inalterable .)
    EEqual          reduce using rule 97 (factor -> inalterable .)
    GreaterOP       reduce using rule 97 (factor -> inalterable .)
    LessOP          reduce using rule 97 (factor -> inalterable .)
    NonEqualOP      reduce using rule 97 (factor -> inalterable .)
    Closing_Parentheses reduce using rule 97 (factor -> inalterable .)
    DoubleAnd       reduce using rule 97 (factor -> inalterable .)
    DoubleOr        reduce using rule 97 (factor -> inalterable .)
    Tilda           reduce using rule 97 (factor -> inalterable .)
    And             reduce using rule 97 (factor -> inalterable .)
    Or              reduce using rule 97 (factor -> inalterable .)
    Semicolon       reduce using rule 97 (factor -> inalterable .)
    Closing_Bracket reduce using rule 97 (factor -> inalterable .)
    Comma           reduce using rule 97 (factor -> inalterable .)


state 61

    (98) factor -> alterable .
    (100) alterable -> alterable . Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> alterable . Letter numOrLetter

    Plus            reduce using rule 98 (factor -> alterable .)
    Minus           reduce using rule 98 (factor -> alterable .)
    Times           reduce using rule 98 (factor -> alterable .)
    Divide          reduce using rule 98 (factor -> alterable .)
    ModeOP          reduce using rule 98 (factor -> alterable .)
    LEqual          reduce using rule 98 (factor -> alterable .)
    GEqual          reduce using rule 98 (factor -> alterable .)
    EEqual          reduce using rule 98 (factor -> alterable .)
    GreaterOP       reduce using rule 98 (factor -> alterable .)
    LessOP          reduce using rule 98 (factor -> alterable .)
    NonEqualOP      reduce using rule 98 (factor -> alterable .)
    Closing_Parentheses reduce using rule 98 (factor -> alterable .)
    DoubleAnd       reduce using rule 98 (factor -> alterable .)
    DoubleOr        reduce using rule 98 (factor -> alterable .)
    Tilda           reduce using rule 98 (factor -> alterable .)
    And             reduce using rule 98 (factor -> alterable .)
    Or              reduce using rule 98 (factor -> alterable .)
    Semicolon       reduce using rule 98 (factor -> alterable .)
    Closing_Bracket reduce using rule 98 (factor -> alterable .)
    Comma           reduce using rule 98 (factor -> alterable .)
    Opening_Bracket shift and go to state 96
    Letter          shift and go to state 97


state 62

    (103) inalterable -> constant .

    Plus            reduce using rule 103 (inalterable -> constant .)
    Minus           reduce using rule 103 (inalterable -> constant .)
    Times           reduce using rule 103 (inalterable -> constant .)
    Divide          reduce using rule 103 (inalterable -> constant .)
    ModeOP          reduce using rule 103 (inalterable -> constant .)
    LEqual          reduce using rule 103 (inalterable -> constant .)
    GEqual          reduce using rule 103 (inalterable -> constant .)
    EEqual          reduce using rule 103 (inalterable -> constant .)
    GreaterOP       reduce using rule 103 (inalterable -> constant .)
    LessOP          reduce using rule 103 (inalterable -> constant .)
    NonEqualOP      reduce using rule 103 (inalterable -> constant .)
    Closing_Parentheses reduce using rule 103 (inalterable -> constant .)
    DoubleAnd       reduce using rule 103 (inalterable -> constant .)
    DoubleOr        reduce using rule 103 (inalterable -> constant .)
    Tilda           reduce using rule 103 (inalterable -> constant .)
    And             reduce using rule 103 (inalterable -> constant .)
    Or              reduce using rule 103 (inalterable -> constant .)
    Semicolon       reduce using rule 103 (inalterable -> constant .)
    Closing_Bracket reduce using rule 103 (inalterable -> constant .)
    Comma           reduce using rule 103 (inalterable -> constant .)


state 63

    (104) inalterable -> Letter . numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> Letter . numOrLetter
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . Letter
    (4) numOrLetter -> . numOrLetter
    (5) numOrLetter -> .

  ! shift/reduce conflict for Letter resolved as shift
    Num             shift and go to state 16
    Letter          shift and go to state 17
    Opening_Parentheses reduce using rule 5 (numOrLetter -> .)
    Opening_Bracket reduce using rule 5 (numOrLetter -> .)
    Plus            reduce using rule 5 (numOrLetter -> .)
    Minus           reduce using rule 5 (numOrLetter -> .)
    Times           reduce using rule 5 (numOrLetter -> .)
    Divide          reduce using rule 5 (numOrLetter -> .)
    ModeOP          reduce using rule 5 (numOrLetter -> .)
    LEqual          reduce using rule 5 (numOrLetter -> .)
    GEqual          reduce using rule 5 (numOrLetter -> .)
    EEqual          reduce using rule 5 (numOrLetter -> .)
    GreaterOP       reduce using rule 5 (numOrLetter -> .)
    LessOP          reduce using rule 5 (numOrLetter -> .)
    NonEqualOP      reduce using rule 5 (numOrLetter -> .)
    Closing_Parentheses reduce using rule 5 (numOrLetter -> .)
    DoubleAnd       reduce using rule 5 (numOrLetter -> .)
    DoubleOr        reduce using rule 5 (numOrLetter -> .)
    Tilda           reduce using rule 5 (numOrLetter -> .)
    And             reduce using rule 5 (numOrLetter -> .)
    Or              reduce using rule 5 (numOrLetter -> .)
    Semicolon       reduce using rule 5 (numOrLetter -> .)
    Closing_Bracket reduce using rule 5 (numOrLetter -> .)
    Comma           reduce using rule 5 (numOrLetter -> .)

  ! Letter          [ reduce using rule 5 (numOrLetter -> .) ]

    numOrLetter                    shift and go to state 98

state 64

    (109) constant -> Const_KW .

    Plus            reduce using rule 109 (constant -> Const_KW .)
    Minus           reduce using rule 109 (constant -> Const_KW .)
    Times           reduce using rule 109 (constant -> Const_KW .)
    Divide          reduce using rule 109 (constant -> Const_KW .)
    ModeOP          reduce using rule 109 (constant -> Const_KW .)
    LEqual          reduce using rule 109 (constant -> Const_KW .)
    GEqual          reduce using rule 109 (constant -> Const_KW .)
    EEqual          reduce using rule 109 (constant -> Const_KW .)
    GreaterOP       reduce using rule 109 (constant -> Const_KW .)
    LessOP          reduce using rule 109 (constant -> Const_KW .)
    NonEqualOP      reduce using rule 109 (constant -> Const_KW .)
    Closing_Parentheses reduce using rule 109 (constant -> Const_KW .)
    DoubleAnd       reduce using rule 109 (constant -> Const_KW .)
    DoubleOr        reduce using rule 109 (constant -> Const_KW .)
    Tilda           reduce using rule 109 (constant -> Const_KW .)
    And             reduce using rule 109 (constant -> Const_KW .)
    Or              reduce using rule 109 (constant -> Const_KW .)
    Semicolon       reduce using rule 109 (constant -> Const_KW .)
    Closing_Bracket reduce using rule 109 (constant -> Const_KW .)
    Comma           reduce using rule 109 (constant -> Const_KW .)


state 65

    (110) constant -> True_KW .

    Plus            reduce using rule 110 (constant -> True_KW .)
    Minus           reduce using rule 110 (constant -> True_KW .)
    Times           reduce using rule 110 (constant -> True_KW .)
    Divide          reduce using rule 110 (constant -> True_KW .)
    ModeOP          reduce using rule 110 (constant -> True_KW .)
    LEqual          reduce using rule 110 (constant -> True_KW .)
    GEqual          reduce using rule 110 (constant -> True_KW .)
    EEqual          reduce using rule 110 (constant -> True_KW .)
    GreaterOP       reduce using rule 110 (constant -> True_KW .)
    LessOP          reduce using rule 110 (constant -> True_KW .)
    NonEqualOP      reduce using rule 110 (constant -> True_KW .)
    Closing_Parentheses reduce using rule 110 (constant -> True_KW .)
    DoubleAnd       reduce using rule 110 (constant -> True_KW .)
    DoubleOr        reduce using rule 110 (constant -> True_KW .)
    Tilda           reduce using rule 110 (constant -> True_KW .)
    And             reduce using rule 110 (constant -> True_KW .)
    Or              reduce using rule 110 (constant -> True_KW .)
    Semicolon       reduce using rule 110 (constant -> True_KW .)
    Closing_Bracket reduce using rule 110 (constant -> True_KW .)
    Comma           reduce using rule 110 (constant -> True_KW .)


state 66

    (111) constant -> False_KW .

    Plus            reduce using rule 111 (constant -> False_KW .)
    Minus           reduce using rule 111 (constant -> False_KW .)
    Times           reduce using rule 111 (constant -> False_KW .)
    Divide          reduce using rule 111 (constant -> False_KW .)
    ModeOP          reduce using rule 111 (constant -> False_KW .)
    LEqual          reduce using rule 111 (constant -> False_KW .)
    GEqual          reduce using rule 111 (constant -> False_KW .)
    EEqual          reduce using rule 111 (constant -> False_KW .)
    GreaterOP       reduce using rule 111 (constant -> False_KW .)
    LessOP          reduce using rule 111 (constant -> False_KW .)
    NonEqualOP      reduce using rule 111 (constant -> False_KW .)
    Closing_Parentheses reduce using rule 111 (constant -> False_KW .)
    DoubleAnd       reduce using rule 111 (constant -> False_KW .)
    DoubleOr        reduce using rule 111 (constant -> False_KW .)
    Tilda           reduce using rule 111 (constant -> False_KW .)
    And             reduce using rule 111 (constant -> False_KW .)
    Or              reduce using rule 111 (constant -> False_KW .)
    Semicolon       reduce using rule 111 (constant -> False_KW .)
    Closing_Bracket reduce using rule 111 (constant -> False_KW .)
    Comma           reduce using rule 111 (constant -> False_KW .)


state 67

    (26) function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket . statement Closing_Bracket
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression Semicolon
    (49) phrase -> . Semicolon
    (45) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (50) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (55) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (56) returnPhrase -> . ComeBack_KW Semicolon
    (57) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (58) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (59) continue -> . Continue_KW Semicolon
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Semicolon       shift and go to state 107
    Opening_Brace   shift and go to state 108
    If_KW           shift and go to state 109
    Till_KW         shift and go to state 110
    ComeBack_KW     shift and go to state 111
    GiveBack_KW     shift and go to state 112
    Continue_KW     shift and go to state 113
    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    statement                      shift and go to state 99
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    eachExpression                 shift and go to state 75
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 68

    (30) listOfParameters -> listOfParameters Semicolon paramTypeList .

    Semicolon       reduce using rule 30 (listOfParameters -> listOfParameters Semicolon paramTypeList .)
    Closing_Parentheses reduce using rule 30 (listOfParameters -> listOfParameters Semicolon paramTypeList .)


state 69

    (33) paramList -> paramList Comma . paramId
    (37) paramId -> . Letter numOrLetter
    (38) paramId -> . Letter numOrLetter Opening_Bracket Closing_Bracket

    Letter          shift and go to state 40

    paramId                        shift and go to state 114

state 70

    (37) paramId -> Letter numOrLetter .
    (38) paramId -> Letter numOrLetter . Opening_Bracket Closing_Bracket
    (4) numOrLetter -> numOrLetter .

  ! shift/reduce conflict for Opening_Bracket resolved as shift
  ! reduce/reduce conflict for Comma resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Semicolon resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Closing_Parentheses resolved using rule 4 (numOrLetter -> numOrLetter .)
    Opening_Bracket shift and go to state 115
    Comma           reduce using rule 4 (numOrLetter -> numOrLetter .)
    Semicolon       reduce using rule 4 (numOrLetter -> numOrLetter .)
    Closing_Parentheses reduce using rule 4 (numOrLetter -> numOrLetter .)

  ! Comma           [ reduce using rule 37 (paramId -> Letter numOrLetter .) ]
  ! Semicolon       [ reduce using rule 37 (paramId -> Letter numOrLetter .) ]
  ! Closing_Parentheses [ reduce using rule 37 (paramId -> Letter numOrLetter .) ]
  ! Opening_Bracket [ reduce using rule 4 (numOrLetter -> numOrLetter .) ]


state 71

    (27) function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression Semicolon
    (49) phrase -> . Semicolon
    (45) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (50) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (55) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (56) returnPhrase -> . ComeBack_KW Semicolon
    (57) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (58) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (59) continue -> . Continue_KW Semicolon
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Semicolon       shift and go to state 107
    Opening_Brace   shift and go to state 108
    If_KW           shift and go to state 109
    Till_KW         shift and go to state 110
    ComeBack_KW     shift and go to state 111
    GiveBack_KW     shift and go to state 112
    Continue_KW     shift and go to state 113
    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    statement                      shift and go to state 116
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    eachExpression                 shift and go to state 75
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 72

    (16) varForm -> Letter numOrLetter Opening_Bracket Num Closing_Bracket .

    Colon           reduce using rule 16 (varForm -> Letter numOrLetter Opening_Bracket Num Closing_Bracket .)
    Semicolon       reduce using rule 16 (varForm -> Letter numOrLetter Opening_Bracket Num Closing_Bracket .)
    Comma           reduce using rule 16 (varForm -> Letter numOrLetter Opening_Bracket Num Closing_Bracket .)


state 73

    (102) inalterable -> Opening_Parentheses allExpression . Closing_Parentheses

    Closing_Parentheses shift and go to state 117


state 74

    (60) allExpression -> alterable . mathOp allExpression
    (61) allExpression -> alterable . PP
    (62) allExpression -> alterable . MM
    (64) allExpression -> alterable . mathOp alterable
    (100) alterable -> alterable . Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> alterable . Letter numOrLetter
    (98) factor -> alterable .
    (65) mathOp -> . Equal
    (66) mathOp -> . PlusEqual
    (67) mathOp -> . MinusEqual
    (68) mathOp -> . TimesEqual
    (69) mathOp -> . DivideEqual

    PP              shift and go to state 119
    MM              shift and go to state 120
    Opening_Bracket shift and go to state 96
    Letter          shift and go to state 97
    Plus            reduce using rule 98 (factor -> alterable .)
    Minus           reduce using rule 98 (factor -> alterable .)
    Times           reduce using rule 98 (factor -> alterable .)
    Divide          reduce using rule 98 (factor -> alterable .)
    ModeOP          reduce using rule 98 (factor -> alterable .)
    LEqual          reduce using rule 98 (factor -> alterable .)
    GEqual          reduce using rule 98 (factor -> alterable .)
    EEqual          reduce using rule 98 (factor -> alterable .)
    GreaterOP       reduce using rule 98 (factor -> alterable .)
    LessOP          reduce using rule 98 (factor -> alterable .)
    NonEqualOP      reduce using rule 98 (factor -> alterable .)
    DoubleAnd       reduce using rule 98 (factor -> alterable .)
    DoubleOr        reduce using rule 98 (factor -> alterable .)
    Tilda           reduce using rule 98 (factor -> alterable .)
    And             reduce using rule 98 (factor -> alterable .)
    Or              reduce using rule 98 (factor -> alterable .)
    Closing_Parentheses reduce using rule 98 (factor -> alterable .)
    Semicolon       reduce using rule 98 (factor -> alterable .)
    Closing_Bracket reduce using rule 98 (factor -> alterable .)
    Comma           reduce using rule 98 (factor -> alterable .)
    Equal           shift and go to state 121
    PlusEqual       shift and go to state 122
    MinusEqual      shift and go to state 123
    TimesEqual      shift and go to state 124
    DivideEqual     shift and go to state 125

    mathOp                         shift and go to state 118

state 75

    (63) allExpression -> eachExpression .
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (74) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or

    Closing_Parentheses reduce using rule 63 (allExpression -> eachExpression .)
    Semicolon       reduce using rule 63 (allExpression -> eachExpression .)
    Closing_Bracket reduce using rule 63 (allExpression -> eachExpression .)
    Comma           reduce using rule 63 (allExpression -> eachExpression .)
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52

    logicOp                        shift and go to state 78

state 76

    (99) alterable -> Letter . numOrLetter
    (104) inalterable -> Letter . numOrLetter Opening_Parentheses args Closing_Parentheses
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . Letter
    (4) numOrLetter -> . numOrLetter
    (5) numOrLetter -> .

  ! shift/reduce conflict for Letter resolved as shift
    Num             shift and go to state 16
    Letter          shift and go to state 17
    Opening_Parentheses reduce using rule 5 (numOrLetter -> .)
    PP              reduce using rule 5 (numOrLetter -> .)
    MM              reduce using rule 5 (numOrLetter -> .)
    Opening_Bracket reduce using rule 5 (numOrLetter -> .)
    Equal           reduce using rule 5 (numOrLetter -> .)
    PlusEqual       reduce using rule 5 (numOrLetter -> .)
    MinusEqual      reduce using rule 5 (numOrLetter -> .)
    TimesEqual      reduce using rule 5 (numOrLetter -> .)
    DivideEqual     reduce using rule 5 (numOrLetter -> .)
    Plus            reduce using rule 5 (numOrLetter -> .)
    Minus           reduce using rule 5 (numOrLetter -> .)
    Times           reduce using rule 5 (numOrLetter -> .)
    Divide          reduce using rule 5 (numOrLetter -> .)
    ModeOP          reduce using rule 5 (numOrLetter -> .)
    LEqual          reduce using rule 5 (numOrLetter -> .)
    GEqual          reduce using rule 5 (numOrLetter -> .)
    EEqual          reduce using rule 5 (numOrLetter -> .)
    GreaterOP       reduce using rule 5 (numOrLetter -> .)
    LessOP          reduce using rule 5 (numOrLetter -> .)
    NonEqualOP      reduce using rule 5 (numOrLetter -> .)
    DoubleAnd       reduce using rule 5 (numOrLetter -> .)
    DoubleOr        reduce using rule 5 (numOrLetter -> .)
    Tilda           reduce using rule 5 (numOrLetter -> .)
    And             reduce using rule 5 (numOrLetter -> .)
    Or              reduce using rule 5 (numOrLetter -> .)
    Closing_Parentheses reduce using rule 5 (numOrLetter -> .)
    Semicolon       reduce using rule 5 (numOrLetter -> .)
    Closing_Bracket reduce using rule 5 (numOrLetter -> .)
    Comma           reduce using rule 5 (numOrLetter -> .)

  ! Letter          [ reduce using rule 5 (numOrLetter -> .) ]

    numOrLetter                    shift and go to state 126

state 77

    (15) varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses .

    Semicolon       reduce using rule 15 (varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses .)
    Comma           reduce using rule 15 (varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses .)


state 78

    (70) eachExpression -> eachExpression logicOp . eachExpression
    (71) eachExpression -> eachExpression logicOp . Then_KW eachExpression
    (74) eachExpression -> eachExpression logicOp . Else_KW eachExpression
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Then_KW         shift and go to state 128
    Else_KW         shift and go to state 129
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    eachExpression                 shift and go to state 127
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 79

    (72) eachExpression -> logicOp eachExpression .
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (74) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or

  ! shift/reduce conflict for DoubleAnd resolved as shift
  ! shift/reduce conflict for DoubleOr resolved as shift
  ! shift/reduce conflict for Tilda resolved as shift
  ! shift/reduce conflict for And resolved as shift
  ! shift/reduce conflict for Or resolved as shift
    Closing_Parentheses reduce using rule 72 (eachExpression -> logicOp eachExpression .)
    Semicolon       reduce using rule 72 (eachExpression -> logicOp eachExpression .)
    Closing_Bracket reduce using rule 72 (eachExpression -> logicOp eachExpression .)
    Comma           reduce using rule 72 (eachExpression -> logicOp eachExpression .)
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52

  ! DoubleAnd       [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]
  ! DoubleOr        [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]
  ! Tilda           [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]
  ! And             [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]
  ! Or              [ reduce using rule 72 (eachExpression -> logicOp eachExpression .) ]

    logicOp                        shift and go to state 78

state 80

    (75) relExpression -> mathEXP compareType . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    mathEXP                        shift and go to state 130
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 81

    (85) mathEXP -> mathEXP op . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    mathEXP                        shift and go to state 131
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 82

    (77) compareType -> equal .

    Minus           reduce using rule 77 (compareType -> equal .)
    Times           reduce using rule 77 (compareType -> equal .)
    QMark           reduce using rule 77 (compareType -> equal .)
    Opening_Parentheses reduce using rule 77 (compareType -> equal .)
    Letter          reduce using rule 77 (compareType -> equal .)
    Const_KW        reduce using rule 77 (compareType -> equal .)
    True_KW         reduce using rule 77 (compareType -> equal .)
    False_KW        reduce using rule 77 (compareType -> equal .)


state 83

    (78) compareType -> nonEqual .

    Minus           reduce using rule 78 (compareType -> nonEqual .)
    Times           reduce using rule 78 (compareType -> nonEqual .)
    QMark           reduce using rule 78 (compareType -> nonEqual .)
    Opening_Parentheses reduce using rule 78 (compareType -> nonEqual .)
    Letter          reduce using rule 78 (compareType -> nonEqual .)
    Const_KW        reduce using rule 78 (compareType -> nonEqual .)
    True_KW         reduce using rule 78 (compareType -> nonEqual .)
    False_KW        reduce using rule 78 (compareType -> nonEqual .)


state 84

    (87) op -> Plus .

    Minus           reduce using rule 87 (op -> Plus .)
    Times           reduce using rule 87 (op -> Plus .)
    QMark           reduce using rule 87 (op -> Plus .)
    Opening_Parentheses reduce using rule 87 (op -> Plus .)
    Letter          reduce using rule 87 (op -> Plus .)
    Const_KW        reduce using rule 87 (op -> Plus .)
    True_KW         reduce using rule 87 (op -> Plus .)
    False_KW        reduce using rule 87 (op -> Plus .)


state 85

    (88) op -> Minus .

    Minus           reduce using rule 88 (op -> Minus .)
    Times           reduce using rule 88 (op -> Minus .)
    QMark           reduce using rule 88 (op -> Minus .)
    Opening_Parentheses reduce using rule 88 (op -> Minus .)
    Letter          reduce using rule 88 (op -> Minus .)
    Const_KW        reduce using rule 88 (op -> Minus .)
    True_KW         reduce using rule 88 (op -> Minus .)
    False_KW        reduce using rule 88 (op -> Minus .)


state 86

    (89) op -> Times .

    Minus           reduce using rule 89 (op -> Times .)
    Times           reduce using rule 89 (op -> Times .)
    QMark           reduce using rule 89 (op -> Times .)
    Opening_Parentheses reduce using rule 89 (op -> Times .)
    Letter          reduce using rule 89 (op -> Times .)
    Const_KW        reduce using rule 89 (op -> Times .)
    True_KW         reduce using rule 89 (op -> Times .)
    False_KW        reduce using rule 89 (op -> Times .)


state 87

    (90) op -> Divide .

    Minus           reduce using rule 90 (op -> Divide .)
    Times           reduce using rule 90 (op -> Divide .)
    QMark           reduce using rule 90 (op -> Divide .)
    Opening_Parentheses reduce using rule 90 (op -> Divide .)
    Letter          reduce using rule 90 (op -> Divide .)
    Const_KW        reduce using rule 90 (op -> Divide .)
    True_KW         reduce using rule 90 (op -> Divide .)
    False_KW        reduce using rule 90 (op -> Divide .)


state 88

    (91) op -> ModeOP .

    Minus           reduce using rule 91 (op -> ModeOP .)
    Times           reduce using rule 91 (op -> ModeOP .)
    QMark           reduce using rule 91 (op -> ModeOP .)
    Opening_Parentheses reduce using rule 91 (op -> ModeOP .)
    Letter          reduce using rule 91 (op -> ModeOP .)
    Const_KW        reduce using rule 91 (op -> ModeOP .)
    True_KW         reduce using rule 91 (op -> ModeOP .)
    False_KW        reduce using rule 91 (op -> ModeOP .)


state 89

    (79) equal -> LEqual .

    Minus           reduce using rule 79 (equal -> LEqual .)
    Times           reduce using rule 79 (equal -> LEqual .)
    QMark           reduce using rule 79 (equal -> LEqual .)
    Opening_Parentheses reduce using rule 79 (equal -> LEqual .)
    Letter          reduce using rule 79 (equal -> LEqual .)
    Const_KW        reduce using rule 79 (equal -> LEqual .)
    True_KW         reduce using rule 79 (equal -> LEqual .)
    False_KW        reduce using rule 79 (equal -> LEqual .)


state 90

    (80) equal -> GEqual .

    Minus           reduce using rule 80 (equal -> GEqual .)
    Times           reduce using rule 80 (equal -> GEqual .)
    QMark           reduce using rule 80 (equal -> GEqual .)
    Opening_Parentheses reduce using rule 80 (equal -> GEqual .)
    Letter          reduce using rule 80 (equal -> GEqual .)
    Const_KW        reduce using rule 80 (equal -> GEqual .)
    True_KW         reduce using rule 80 (equal -> GEqual .)
    False_KW        reduce using rule 80 (equal -> GEqual .)


state 91

    (81) equal -> EEqual .

    Minus           reduce using rule 81 (equal -> EEqual .)
    Times           reduce using rule 81 (equal -> EEqual .)
    QMark           reduce using rule 81 (equal -> EEqual .)
    Opening_Parentheses reduce using rule 81 (equal -> EEqual .)
    Letter          reduce using rule 81 (equal -> EEqual .)
    Const_KW        reduce using rule 81 (equal -> EEqual .)
    True_KW         reduce using rule 81 (equal -> EEqual .)
    False_KW        reduce using rule 81 (equal -> EEqual .)


state 92

    (82) nonEqual -> GreaterOP .

    Minus           reduce using rule 82 (nonEqual -> GreaterOP .)
    Times           reduce using rule 82 (nonEqual -> GreaterOP .)
    QMark           reduce using rule 82 (nonEqual -> GreaterOP .)
    Opening_Parentheses reduce using rule 82 (nonEqual -> GreaterOP .)
    Letter          reduce using rule 82 (nonEqual -> GreaterOP .)
    Const_KW        reduce using rule 82 (nonEqual -> GreaterOP .)
    True_KW         reduce using rule 82 (nonEqual -> GreaterOP .)
    False_KW        reduce using rule 82 (nonEqual -> GreaterOP .)


state 93

    (83) nonEqual -> LessOP .

    Minus           reduce using rule 83 (nonEqual -> LessOP .)
    Times           reduce using rule 83 (nonEqual -> LessOP .)
    QMark           reduce using rule 83 (nonEqual -> LessOP .)
    Opening_Parentheses reduce using rule 83 (nonEqual -> LessOP .)
    Letter          reduce using rule 83 (nonEqual -> LessOP .)
    Const_KW        reduce using rule 83 (nonEqual -> LessOP .)
    True_KW         reduce using rule 83 (nonEqual -> LessOP .)
    False_KW        reduce using rule 83 (nonEqual -> LessOP .)


state 94

    (84) nonEqual -> NonEqualOP .

    Minus           reduce using rule 84 (nonEqual -> NonEqualOP .)
    Times           reduce using rule 84 (nonEqual -> NonEqualOP .)
    QMark           reduce using rule 84 (nonEqual -> NonEqualOP .)
    Opening_Parentheses reduce using rule 84 (nonEqual -> NonEqualOP .)
    Letter          reduce using rule 84 (nonEqual -> NonEqualOP .)
    Const_KW        reduce using rule 84 (nonEqual -> NonEqualOP .)
    True_KW         reduce using rule 84 (nonEqual -> NonEqualOP .)
    False_KW        reduce using rule 84 (nonEqual -> NonEqualOP .)


state 95

    (92) unaryExpression -> unaryop unaryExpression .

    Plus            reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    Minus           reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    Times           reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    Divide          reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    ModeOP          reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    LEqual          reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    GEqual          reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    EEqual          reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    GreaterOP       reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    LessOP          reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    NonEqualOP      reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    Closing_Parentheses reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    DoubleAnd       reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    DoubleOr        reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    Tilda           reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    And             reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    Or              reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    Semicolon       reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    Closing_Bracket reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)
    Comma           reduce using rule 92 (unaryExpression -> unaryop unaryExpression .)


state 96

    (100) alterable -> alterable Opening_Bracket . allExpression Closing_Bracket
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    alterable                      shift and go to state 74
    allExpression                  shift and go to state 132
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 97

    (101) alterable -> alterable Letter . numOrLetter
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . Letter
    (4) numOrLetter -> . numOrLetter
    (5) numOrLetter -> .

  ! shift/reduce conflict for Letter resolved as shift
    Num             shift and go to state 16
    Letter          shift and go to state 17
    Opening_Bracket reduce using rule 5 (numOrLetter -> .)
    Plus            reduce using rule 5 (numOrLetter -> .)
    Minus           reduce using rule 5 (numOrLetter -> .)
    Times           reduce using rule 5 (numOrLetter -> .)
    Divide          reduce using rule 5 (numOrLetter -> .)
    ModeOP          reduce using rule 5 (numOrLetter -> .)
    LEqual          reduce using rule 5 (numOrLetter -> .)
    GEqual          reduce using rule 5 (numOrLetter -> .)
    EEqual          reduce using rule 5 (numOrLetter -> .)
    GreaterOP       reduce using rule 5 (numOrLetter -> .)
    LessOP          reduce using rule 5 (numOrLetter -> .)
    NonEqualOP      reduce using rule 5 (numOrLetter -> .)
    Closing_Parentheses reduce using rule 5 (numOrLetter -> .)
    DoubleAnd       reduce using rule 5 (numOrLetter -> .)
    DoubleOr        reduce using rule 5 (numOrLetter -> .)
    Tilda           reduce using rule 5 (numOrLetter -> .)
    And             reduce using rule 5 (numOrLetter -> .)
    Or              reduce using rule 5 (numOrLetter -> .)
    PP              reduce using rule 5 (numOrLetter -> .)
    MM              reduce using rule 5 (numOrLetter -> .)
    Equal           reduce using rule 5 (numOrLetter -> .)
    PlusEqual       reduce using rule 5 (numOrLetter -> .)
    MinusEqual      reduce using rule 5 (numOrLetter -> .)
    TimesEqual      reduce using rule 5 (numOrLetter -> .)
    DivideEqual     reduce using rule 5 (numOrLetter -> .)
    Semicolon       reduce using rule 5 (numOrLetter -> .)
    Closing_Bracket reduce using rule 5 (numOrLetter -> .)
    Comma           reduce using rule 5 (numOrLetter -> .)

  ! Letter          [ reduce using rule 5 (numOrLetter -> .) ]

    numOrLetter                    shift and go to state 133

state 98

    (104) inalterable -> Letter numOrLetter . Opening_Parentheses args Closing_Parentheses
    (99) alterable -> Letter numOrLetter .
    (4) numOrLetter -> numOrLetter .

  ! shift/reduce conflict for Opening_Parentheses resolved as shift
  ! reduce/reduce conflict for Opening_Bracket resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Letter resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Plus resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Minus resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Times resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Divide resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for ModeOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for LEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for GEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for EEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for GreaterOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for LessOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for NonEqualOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Closing_Parentheses resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for DoubleAnd resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for DoubleOr resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Tilda resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for And resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Or resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Semicolon resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Closing_Bracket resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Comma resolved using rule 4 (numOrLetter -> numOrLetter .)
    Opening_Parentheses shift and go to state 134
    Opening_Bracket reduce using rule 4 (numOrLetter -> numOrLetter .)
    Letter          reduce using rule 4 (numOrLetter -> numOrLetter .)
    Plus            reduce using rule 4 (numOrLetter -> numOrLetter .)
    Minus           reduce using rule 4 (numOrLetter -> numOrLetter .)
    Times           reduce using rule 4 (numOrLetter -> numOrLetter .)
    Divide          reduce using rule 4 (numOrLetter -> numOrLetter .)
    ModeOP          reduce using rule 4 (numOrLetter -> numOrLetter .)
    LEqual          reduce using rule 4 (numOrLetter -> numOrLetter .)
    GEqual          reduce using rule 4 (numOrLetter -> numOrLetter .)
    EEqual          reduce using rule 4 (numOrLetter -> numOrLetter .)
    GreaterOP       reduce using rule 4 (numOrLetter -> numOrLetter .)
    LessOP          reduce using rule 4 (numOrLetter -> numOrLetter .)
    NonEqualOP      reduce using rule 4 (numOrLetter -> numOrLetter .)
    Closing_Parentheses reduce using rule 4 (numOrLetter -> numOrLetter .)
    DoubleAnd       reduce using rule 4 (numOrLetter -> numOrLetter .)
    DoubleOr        reduce using rule 4 (numOrLetter -> numOrLetter .)
    Tilda           reduce using rule 4 (numOrLetter -> numOrLetter .)
    And             reduce using rule 4 (numOrLetter -> numOrLetter .)
    Or              reduce using rule 4 (numOrLetter -> numOrLetter .)
    Semicolon       reduce using rule 4 (numOrLetter -> numOrLetter .)
    Closing_Bracket reduce using rule 4 (numOrLetter -> numOrLetter .)
    Comma           reduce using rule 4 (numOrLetter -> numOrLetter .)

  ! Opening_Bracket [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Letter          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Plus            [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Minus           [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Times           [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Divide          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! ModeOP          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! LEqual          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! GEqual          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! EEqual          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! GreaterOP       [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! LessOP          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! NonEqualOP      [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Closing_Parentheses [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! DoubleAnd       [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! DoubleOr        [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Tilda           [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! And             [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Or              [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Semicolon       [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Closing_Bracket [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Comma           [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Opening_Parentheses [ reduce using rule 4 (numOrLetter -> numOrLetter .) ]


state 99

    (26) function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement . Closing_Bracket

    Closing_Bracket shift and go to state 135


state 100

    (39) statement -> phrase .

    Closing_Bracket reduce using rule 39 (statement -> phrase .)
    void_KW         reduce using rule 39 (statement -> phrase .)
    Boolean_KW      reduce using rule 39 (statement -> phrase .)
    Character_KW    reduce using rule 39 (statement -> phrase .)
    Integer_KW      reduce using rule 39 (statement -> phrase .)
    char_KW         reduce using rule 39 (statement -> phrase .)
    bool_KW         reduce using rule 39 (statement -> phrase .)
    int_KW          reduce using rule 39 (statement -> phrase .)
    $end            reduce using rule 39 (statement -> phrase .)
    Closing_Brace   reduce using rule 39 (statement -> phrase .)
    Semicolon       reduce using rule 39 (statement -> phrase .)
    Opening_Brace   reduce using rule 39 (statement -> phrase .)
    If_KW           reduce using rule 39 (statement -> phrase .)
    Till_KW         reduce using rule 39 (statement -> phrase .)
    ComeBack_KW     reduce using rule 39 (statement -> phrase .)
    GiveBack_KW     reduce using rule 39 (statement -> phrase .)
    Continue_KW     reduce using rule 39 (statement -> phrase .)
    Letter          reduce using rule 39 (statement -> phrase .)
    DoubleAnd       reduce using rule 39 (statement -> phrase .)
    DoubleOr        reduce using rule 39 (statement -> phrase .)
    Tilda           reduce using rule 39 (statement -> phrase .)
    And             reduce using rule 39 (statement -> phrase .)
    Or              reduce using rule 39 (statement -> phrase .)
    Minus           reduce using rule 39 (statement -> phrase .)
    Times           reduce using rule 39 (statement -> phrase .)
    QMark           reduce using rule 39 (statement -> phrase .)
    Opening_Parentheses reduce using rule 39 (statement -> phrase .)
    Const_KW        reduce using rule 39 (statement -> phrase .)
    True_KW         reduce using rule 39 (statement -> phrase .)
    False_KW        reduce using rule 39 (statement -> phrase .)
    Other_KW        reduce using rule 39 (statement -> phrase .)


state 101

    (40) statement -> compoundPhrase .

    Closing_Bracket reduce using rule 40 (statement -> compoundPhrase .)
    void_KW         reduce using rule 40 (statement -> compoundPhrase .)
    Boolean_KW      reduce using rule 40 (statement -> compoundPhrase .)
    Character_KW    reduce using rule 40 (statement -> compoundPhrase .)
    Integer_KW      reduce using rule 40 (statement -> compoundPhrase .)
    char_KW         reduce using rule 40 (statement -> compoundPhrase .)
    bool_KW         reduce using rule 40 (statement -> compoundPhrase .)
    int_KW          reduce using rule 40 (statement -> compoundPhrase .)
    $end            reduce using rule 40 (statement -> compoundPhrase .)
    Closing_Brace   reduce using rule 40 (statement -> compoundPhrase .)
    Semicolon       reduce using rule 40 (statement -> compoundPhrase .)
    Opening_Brace   reduce using rule 40 (statement -> compoundPhrase .)
    If_KW           reduce using rule 40 (statement -> compoundPhrase .)
    Till_KW         reduce using rule 40 (statement -> compoundPhrase .)
    ComeBack_KW     reduce using rule 40 (statement -> compoundPhrase .)
    GiveBack_KW     reduce using rule 40 (statement -> compoundPhrase .)
    Continue_KW     reduce using rule 40 (statement -> compoundPhrase .)
    Letter          reduce using rule 40 (statement -> compoundPhrase .)
    DoubleAnd       reduce using rule 40 (statement -> compoundPhrase .)
    DoubleOr        reduce using rule 40 (statement -> compoundPhrase .)
    Tilda           reduce using rule 40 (statement -> compoundPhrase .)
    And             reduce using rule 40 (statement -> compoundPhrase .)
    Or              reduce using rule 40 (statement -> compoundPhrase .)
    Minus           reduce using rule 40 (statement -> compoundPhrase .)
    Times           reduce using rule 40 (statement -> compoundPhrase .)
    QMark           reduce using rule 40 (statement -> compoundPhrase .)
    Opening_Parentheses reduce using rule 40 (statement -> compoundPhrase .)
    Const_KW        reduce using rule 40 (statement -> compoundPhrase .)
    True_KW         reduce using rule 40 (statement -> compoundPhrase .)
    False_KW        reduce using rule 40 (statement -> compoundPhrase .)
    Other_KW        reduce using rule 40 (statement -> compoundPhrase .)


state 102

    (41) statement -> selectPhrase .

    Closing_Bracket reduce using rule 41 (statement -> selectPhrase .)
    void_KW         reduce using rule 41 (statement -> selectPhrase .)
    Boolean_KW      reduce using rule 41 (statement -> selectPhrase .)
    Character_KW    reduce using rule 41 (statement -> selectPhrase .)
    Integer_KW      reduce using rule 41 (statement -> selectPhrase .)
    char_KW         reduce using rule 41 (statement -> selectPhrase .)
    bool_KW         reduce using rule 41 (statement -> selectPhrase .)
    int_KW          reduce using rule 41 (statement -> selectPhrase .)
    $end            reduce using rule 41 (statement -> selectPhrase .)
    Closing_Brace   reduce using rule 41 (statement -> selectPhrase .)
    Semicolon       reduce using rule 41 (statement -> selectPhrase .)
    Opening_Brace   reduce using rule 41 (statement -> selectPhrase .)
    If_KW           reduce using rule 41 (statement -> selectPhrase .)
    Till_KW         reduce using rule 41 (statement -> selectPhrase .)
    ComeBack_KW     reduce using rule 41 (statement -> selectPhrase .)
    GiveBack_KW     reduce using rule 41 (statement -> selectPhrase .)
    Continue_KW     reduce using rule 41 (statement -> selectPhrase .)
    Letter          reduce using rule 41 (statement -> selectPhrase .)
    DoubleAnd       reduce using rule 41 (statement -> selectPhrase .)
    DoubleOr        reduce using rule 41 (statement -> selectPhrase .)
    Tilda           reduce using rule 41 (statement -> selectPhrase .)
    And             reduce using rule 41 (statement -> selectPhrase .)
    Or              reduce using rule 41 (statement -> selectPhrase .)
    Minus           reduce using rule 41 (statement -> selectPhrase .)
    Times           reduce using rule 41 (statement -> selectPhrase .)
    QMark           reduce using rule 41 (statement -> selectPhrase .)
    Opening_Parentheses reduce using rule 41 (statement -> selectPhrase .)
    Const_KW        reduce using rule 41 (statement -> selectPhrase .)
    True_KW         reduce using rule 41 (statement -> selectPhrase .)
    False_KW        reduce using rule 41 (statement -> selectPhrase .)
    Other_KW        reduce using rule 41 (statement -> selectPhrase .)


state 103

    (42) statement -> iterationPhrase .

    Closing_Bracket reduce using rule 42 (statement -> iterationPhrase .)
    void_KW         reduce using rule 42 (statement -> iterationPhrase .)
    Boolean_KW      reduce using rule 42 (statement -> iterationPhrase .)
    Character_KW    reduce using rule 42 (statement -> iterationPhrase .)
    Integer_KW      reduce using rule 42 (statement -> iterationPhrase .)
    char_KW         reduce using rule 42 (statement -> iterationPhrase .)
    bool_KW         reduce using rule 42 (statement -> iterationPhrase .)
    int_KW          reduce using rule 42 (statement -> iterationPhrase .)
    $end            reduce using rule 42 (statement -> iterationPhrase .)
    Closing_Brace   reduce using rule 42 (statement -> iterationPhrase .)
    Semicolon       reduce using rule 42 (statement -> iterationPhrase .)
    Opening_Brace   reduce using rule 42 (statement -> iterationPhrase .)
    If_KW           reduce using rule 42 (statement -> iterationPhrase .)
    Till_KW         reduce using rule 42 (statement -> iterationPhrase .)
    ComeBack_KW     reduce using rule 42 (statement -> iterationPhrase .)
    GiveBack_KW     reduce using rule 42 (statement -> iterationPhrase .)
    Continue_KW     reduce using rule 42 (statement -> iterationPhrase .)
    Letter          reduce using rule 42 (statement -> iterationPhrase .)
    DoubleAnd       reduce using rule 42 (statement -> iterationPhrase .)
    DoubleOr        reduce using rule 42 (statement -> iterationPhrase .)
    Tilda           reduce using rule 42 (statement -> iterationPhrase .)
    And             reduce using rule 42 (statement -> iterationPhrase .)
    Or              reduce using rule 42 (statement -> iterationPhrase .)
    Minus           reduce using rule 42 (statement -> iterationPhrase .)
    Times           reduce using rule 42 (statement -> iterationPhrase .)
    QMark           reduce using rule 42 (statement -> iterationPhrase .)
    Opening_Parentheses reduce using rule 42 (statement -> iterationPhrase .)
    Const_KW        reduce using rule 42 (statement -> iterationPhrase .)
    True_KW         reduce using rule 42 (statement -> iterationPhrase .)
    False_KW        reduce using rule 42 (statement -> iterationPhrase .)
    Other_KW        reduce using rule 42 (statement -> iterationPhrase .)


state 104

    (43) statement -> returnPhrase .

    Closing_Bracket reduce using rule 43 (statement -> returnPhrase .)
    void_KW         reduce using rule 43 (statement -> returnPhrase .)
    Boolean_KW      reduce using rule 43 (statement -> returnPhrase .)
    Character_KW    reduce using rule 43 (statement -> returnPhrase .)
    Integer_KW      reduce using rule 43 (statement -> returnPhrase .)
    char_KW         reduce using rule 43 (statement -> returnPhrase .)
    bool_KW         reduce using rule 43 (statement -> returnPhrase .)
    int_KW          reduce using rule 43 (statement -> returnPhrase .)
    $end            reduce using rule 43 (statement -> returnPhrase .)
    Closing_Brace   reduce using rule 43 (statement -> returnPhrase .)
    Semicolon       reduce using rule 43 (statement -> returnPhrase .)
    Opening_Brace   reduce using rule 43 (statement -> returnPhrase .)
    If_KW           reduce using rule 43 (statement -> returnPhrase .)
    Till_KW         reduce using rule 43 (statement -> returnPhrase .)
    ComeBack_KW     reduce using rule 43 (statement -> returnPhrase .)
    GiveBack_KW     reduce using rule 43 (statement -> returnPhrase .)
    Continue_KW     reduce using rule 43 (statement -> returnPhrase .)
    Letter          reduce using rule 43 (statement -> returnPhrase .)
    DoubleAnd       reduce using rule 43 (statement -> returnPhrase .)
    DoubleOr        reduce using rule 43 (statement -> returnPhrase .)
    Tilda           reduce using rule 43 (statement -> returnPhrase .)
    And             reduce using rule 43 (statement -> returnPhrase .)
    Or              reduce using rule 43 (statement -> returnPhrase .)
    Minus           reduce using rule 43 (statement -> returnPhrase .)
    Times           reduce using rule 43 (statement -> returnPhrase .)
    QMark           reduce using rule 43 (statement -> returnPhrase .)
    Opening_Parentheses reduce using rule 43 (statement -> returnPhrase .)
    Const_KW        reduce using rule 43 (statement -> returnPhrase .)
    True_KW         reduce using rule 43 (statement -> returnPhrase .)
    False_KW        reduce using rule 43 (statement -> returnPhrase .)
    Other_KW        reduce using rule 43 (statement -> returnPhrase .)


state 105

    (44) statement -> continue .

    Closing_Bracket reduce using rule 44 (statement -> continue .)
    void_KW         reduce using rule 44 (statement -> continue .)
    Boolean_KW      reduce using rule 44 (statement -> continue .)
    Character_KW    reduce using rule 44 (statement -> continue .)
    Integer_KW      reduce using rule 44 (statement -> continue .)
    char_KW         reduce using rule 44 (statement -> continue .)
    bool_KW         reduce using rule 44 (statement -> continue .)
    int_KW          reduce using rule 44 (statement -> continue .)
    $end            reduce using rule 44 (statement -> continue .)
    Closing_Brace   reduce using rule 44 (statement -> continue .)
    Semicolon       reduce using rule 44 (statement -> continue .)
    Opening_Brace   reduce using rule 44 (statement -> continue .)
    If_KW           reduce using rule 44 (statement -> continue .)
    Till_KW         reduce using rule 44 (statement -> continue .)
    ComeBack_KW     reduce using rule 44 (statement -> continue .)
    GiveBack_KW     reduce using rule 44 (statement -> continue .)
    Continue_KW     reduce using rule 44 (statement -> continue .)
    Letter          reduce using rule 44 (statement -> continue .)
    DoubleAnd       reduce using rule 44 (statement -> continue .)
    DoubleOr        reduce using rule 44 (statement -> continue .)
    Tilda           reduce using rule 44 (statement -> continue .)
    And             reduce using rule 44 (statement -> continue .)
    Or              reduce using rule 44 (statement -> continue .)
    Minus           reduce using rule 44 (statement -> continue .)
    Times           reduce using rule 44 (statement -> continue .)
    QMark           reduce using rule 44 (statement -> continue .)
    Opening_Parentheses reduce using rule 44 (statement -> continue .)
    Const_KW        reduce using rule 44 (statement -> continue .)
    True_KW         reduce using rule 44 (statement -> continue .)
    False_KW        reduce using rule 44 (statement -> continue .)
    Other_KW        reduce using rule 44 (statement -> continue .)


state 106

    (48) phrase -> allExpression . Semicolon

    Semicolon       shift and go to state 136


state 107

    (49) phrase -> Semicolon .

    Closing_Bracket reduce using rule 49 (phrase -> Semicolon .)
    void_KW         reduce using rule 49 (phrase -> Semicolon .)
    Boolean_KW      reduce using rule 49 (phrase -> Semicolon .)
    Character_KW    reduce using rule 49 (phrase -> Semicolon .)
    Integer_KW      reduce using rule 49 (phrase -> Semicolon .)
    char_KW         reduce using rule 49 (phrase -> Semicolon .)
    bool_KW         reduce using rule 49 (phrase -> Semicolon .)
    int_KW          reduce using rule 49 (phrase -> Semicolon .)
    $end            reduce using rule 49 (phrase -> Semicolon .)
    Closing_Brace   reduce using rule 49 (phrase -> Semicolon .)
    Semicolon       reduce using rule 49 (phrase -> Semicolon .)
    Opening_Brace   reduce using rule 49 (phrase -> Semicolon .)
    If_KW           reduce using rule 49 (phrase -> Semicolon .)
    Till_KW         reduce using rule 49 (phrase -> Semicolon .)
    ComeBack_KW     reduce using rule 49 (phrase -> Semicolon .)
    GiveBack_KW     reduce using rule 49 (phrase -> Semicolon .)
    Continue_KW     reduce using rule 49 (phrase -> Semicolon .)
    Letter          reduce using rule 49 (phrase -> Semicolon .)
    DoubleAnd       reduce using rule 49 (phrase -> Semicolon .)
    DoubleOr        reduce using rule 49 (phrase -> Semicolon .)
    Tilda           reduce using rule 49 (phrase -> Semicolon .)
    And             reduce using rule 49 (phrase -> Semicolon .)
    Or              reduce using rule 49 (phrase -> Semicolon .)
    Minus           reduce using rule 49 (phrase -> Semicolon .)
    Times           reduce using rule 49 (phrase -> Semicolon .)
    QMark           reduce using rule 49 (phrase -> Semicolon .)
    Opening_Parentheses reduce using rule 49 (phrase -> Semicolon .)
    Const_KW        reduce using rule 49 (phrase -> Semicolon .)
    True_KW         reduce using rule 49 (phrase -> Semicolon .)
    False_KW        reduce using rule 49 (phrase -> Semicolon .)
    Other_KW        reduce using rule 49 (phrase -> Semicolon .)


state 108

    (45) compoundPhrase -> Opening_Brace . localDeclarations statementList Closing_Brace
    (35) localDeclarations -> . localDeclarations ScopedVariableDec
    (36) localDeclarations -> .

    Static_KW       reduce using rule 36 (localDeclarations -> .)
    Boolean_KW      reduce using rule 36 (localDeclarations -> .)
    Character_KW    reduce using rule 36 (localDeclarations -> .)
    Integer_KW      reduce using rule 36 (localDeclarations -> .)
    char_KW         reduce using rule 36 (localDeclarations -> .)
    bool_KW         reduce using rule 36 (localDeclarations -> .)
    int_KW          reduce using rule 36 (localDeclarations -> .)
    Closing_Brace   reduce using rule 36 (localDeclarations -> .)
    Semicolon       reduce using rule 36 (localDeclarations -> .)
    Opening_Brace   reduce using rule 36 (localDeclarations -> .)
    If_KW           reduce using rule 36 (localDeclarations -> .)
    Till_KW         reduce using rule 36 (localDeclarations -> .)
    ComeBack_KW     reduce using rule 36 (localDeclarations -> .)
    GiveBack_KW     reduce using rule 36 (localDeclarations -> .)
    Continue_KW     reduce using rule 36 (localDeclarations -> .)
    Letter          reduce using rule 36 (localDeclarations -> .)
    DoubleAnd       reduce using rule 36 (localDeclarations -> .)
    DoubleOr        reduce using rule 36 (localDeclarations -> .)
    Tilda           reduce using rule 36 (localDeclarations -> .)
    And             reduce using rule 36 (localDeclarations -> .)
    Or              reduce using rule 36 (localDeclarations -> .)
    Minus           reduce using rule 36 (localDeclarations -> .)
    Times           reduce using rule 36 (localDeclarations -> .)
    QMark           reduce using rule 36 (localDeclarations -> .)
    Opening_Parentheses reduce using rule 36 (localDeclarations -> .)
    Const_KW        reduce using rule 36 (localDeclarations -> .)
    True_KW         reduce using rule 36 (localDeclarations -> .)
    False_KW        reduce using rule 36 (localDeclarations -> .)

    localDeclarations              shift and go to state 137

state 109

    (50) selectPhrase -> If_KW . Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> If_KW . Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace

    Opening_Parentheses shift and go to state 138


state 110

    (55) iterationPhrase -> Till_KW . Opening_Parentheses eachExpression Closing_Parentheses statement

    Opening_Parentheses shift and go to state 139


state 111

    (56) returnPhrase -> ComeBack_KW . Semicolon

    Semicolon       shift and go to state 140


state 112

    (57) returnPhrase -> GiveBack_KW . allExpression Semicolon
    (58) returnPhrase -> GiveBack_KW . numOrLetter Semicolon
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . Letter
    (4) numOrLetter -> . numOrLetter
    (5) numOrLetter -> .
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Num             shift and go to state 16
    Letter          shift and go to state 143
    Semicolon       reduce using rule 5 (numOrLetter -> .)
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    allExpression                  shift and go to state 141
    numOrLetter                    shift and go to state 142
    alterable                      shift and go to state 74
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 113

    (59) continue -> Continue_KW . Semicolon

    Semicolon       shift and go to state 144


state 114

    (33) paramList -> paramList Comma paramId .

    Comma           reduce using rule 33 (paramList -> paramList Comma paramId .)
    Semicolon       reduce using rule 33 (paramList -> paramList Comma paramId .)
    Closing_Parentheses reduce using rule 33 (paramList -> paramList Comma paramId .)


state 115

    (38) paramId -> Letter numOrLetter Opening_Bracket . Closing_Bracket

    Closing_Bracket shift and go to state 145


state 116

    (27) function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement .

    void_KW         reduce using rule 27 (function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    Boolean_KW      reduce using rule 27 (function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    Character_KW    reduce using rule 27 (function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    Integer_KW      reduce using rule 27 (function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    char_KW         reduce using rule 27 (function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    bool_KW         reduce using rule 27 (function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    int_KW          reduce using rule 27 (function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement .)
    $end            reduce using rule 27 (function -> type Letter numOrLetter Opening_Parentheses parameter Closing_Parentheses statement .)


state 117

    (102) inalterable -> Opening_Parentheses allExpression Closing_Parentheses .

    Plus            reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Minus           reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Times           reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Divide          reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    ModeOP          reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    LEqual          reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    GEqual          reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    EEqual          reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    GreaterOP       reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    LessOP          reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    NonEqualOP      reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Closing_Parentheses reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    DoubleAnd       reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    DoubleOr        reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Tilda           reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    And             reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Or              reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Semicolon       reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Closing_Bracket reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Comma           reduce using rule 102 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)


state 118

    (60) allExpression -> alterable mathOp . allExpression
    (64) allExpression -> alterable mathOp . alterable
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    alterable                      shift and go to state 146
    allExpression                  shift and go to state 147
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 119

    (61) allExpression -> alterable PP .

    Closing_Parentheses reduce using rule 61 (allExpression -> alterable PP .)
    Semicolon       reduce using rule 61 (allExpression -> alterable PP .)
    Closing_Bracket reduce using rule 61 (allExpression -> alterable PP .)
    Comma           reduce using rule 61 (allExpression -> alterable PP .)


state 120

    (62) allExpression -> alterable MM .

    Closing_Parentheses reduce using rule 62 (allExpression -> alterable MM .)
    Semicolon       reduce using rule 62 (allExpression -> alterable MM .)
    Closing_Bracket reduce using rule 62 (allExpression -> alterable MM .)
    Comma           reduce using rule 62 (allExpression -> alterable MM .)


state 121

    (65) mathOp -> Equal .

    Letter          reduce using rule 65 (mathOp -> Equal .)
    DoubleAnd       reduce using rule 65 (mathOp -> Equal .)
    DoubleOr        reduce using rule 65 (mathOp -> Equal .)
    Tilda           reduce using rule 65 (mathOp -> Equal .)
    And             reduce using rule 65 (mathOp -> Equal .)
    Or              reduce using rule 65 (mathOp -> Equal .)
    Minus           reduce using rule 65 (mathOp -> Equal .)
    Times           reduce using rule 65 (mathOp -> Equal .)
    QMark           reduce using rule 65 (mathOp -> Equal .)
    Opening_Parentheses reduce using rule 65 (mathOp -> Equal .)
    Const_KW        reduce using rule 65 (mathOp -> Equal .)
    True_KW         reduce using rule 65 (mathOp -> Equal .)
    False_KW        reduce using rule 65 (mathOp -> Equal .)


state 122

    (66) mathOp -> PlusEqual .

    Letter          reduce using rule 66 (mathOp -> PlusEqual .)
    DoubleAnd       reduce using rule 66 (mathOp -> PlusEqual .)
    DoubleOr        reduce using rule 66 (mathOp -> PlusEqual .)
    Tilda           reduce using rule 66 (mathOp -> PlusEqual .)
    And             reduce using rule 66 (mathOp -> PlusEqual .)
    Or              reduce using rule 66 (mathOp -> PlusEqual .)
    Minus           reduce using rule 66 (mathOp -> PlusEqual .)
    Times           reduce using rule 66 (mathOp -> PlusEqual .)
    QMark           reduce using rule 66 (mathOp -> PlusEqual .)
    Opening_Parentheses reduce using rule 66 (mathOp -> PlusEqual .)
    Const_KW        reduce using rule 66 (mathOp -> PlusEqual .)
    True_KW         reduce using rule 66 (mathOp -> PlusEqual .)
    False_KW        reduce using rule 66 (mathOp -> PlusEqual .)


state 123

    (67) mathOp -> MinusEqual .

    Letter          reduce using rule 67 (mathOp -> MinusEqual .)
    DoubleAnd       reduce using rule 67 (mathOp -> MinusEqual .)
    DoubleOr        reduce using rule 67 (mathOp -> MinusEqual .)
    Tilda           reduce using rule 67 (mathOp -> MinusEqual .)
    And             reduce using rule 67 (mathOp -> MinusEqual .)
    Or              reduce using rule 67 (mathOp -> MinusEqual .)
    Minus           reduce using rule 67 (mathOp -> MinusEqual .)
    Times           reduce using rule 67 (mathOp -> MinusEqual .)
    QMark           reduce using rule 67 (mathOp -> MinusEqual .)
    Opening_Parentheses reduce using rule 67 (mathOp -> MinusEqual .)
    Const_KW        reduce using rule 67 (mathOp -> MinusEqual .)
    True_KW         reduce using rule 67 (mathOp -> MinusEqual .)
    False_KW        reduce using rule 67 (mathOp -> MinusEqual .)


state 124

    (68) mathOp -> TimesEqual .

    Letter          reduce using rule 68 (mathOp -> TimesEqual .)
    DoubleAnd       reduce using rule 68 (mathOp -> TimesEqual .)
    DoubleOr        reduce using rule 68 (mathOp -> TimesEqual .)
    Tilda           reduce using rule 68 (mathOp -> TimesEqual .)
    And             reduce using rule 68 (mathOp -> TimesEqual .)
    Or              reduce using rule 68 (mathOp -> TimesEqual .)
    Minus           reduce using rule 68 (mathOp -> TimesEqual .)
    Times           reduce using rule 68 (mathOp -> TimesEqual .)
    QMark           reduce using rule 68 (mathOp -> TimesEqual .)
    Opening_Parentheses reduce using rule 68 (mathOp -> TimesEqual .)
    Const_KW        reduce using rule 68 (mathOp -> TimesEqual .)
    True_KW         reduce using rule 68 (mathOp -> TimesEqual .)
    False_KW        reduce using rule 68 (mathOp -> TimesEqual .)


state 125

    (69) mathOp -> DivideEqual .

    Letter          reduce using rule 69 (mathOp -> DivideEqual .)
    DoubleAnd       reduce using rule 69 (mathOp -> DivideEqual .)
    DoubleOr        reduce using rule 69 (mathOp -> DivideEqual .)
    Tilda           reduce using rule 69 (mathOp -> DivideEqual .)
    And             reduce using rule 69 (mathOp -> DivideEqual .)
    Or              reduce using rule 69 (mathOp -> DivideEqual .)
    Minus           reduce using rule 69 (mathOp -> DivideEqual .)
    Times           reduce using rule 69 (mathOp -> DivideEqual .)
    QMark           reduce using rule 69 (mathOp -> DivideEqual .)
    Opening_Parentheses reduce using rule 69 (mathOp -> DivideEqual .)
    Const_KW        reduce using rule 69 (mathOp -> DivideEqual .)
    True_KW         reduce using rule 69 (mathOp -> DivideEqual .)
    False_KW        reduce using rule 69 (mathOp -> DivideEqual .)


state 126

    (99) alterable -> Letter numOrLetter .
    (104) inalterable -> Letter numOrLetter . Opening_Parentheses args Closing_Parentheses
    (4) numOrLetter -> numOrLetter .

  ! shift/reduce conflict for Opening_Parentheses resolved as shift
  ! reduce/reduce conflict for PP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for MM resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Opening_Bracket resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Letter resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Equal resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for PlusEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for MinusEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for TimesEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for DivideEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Plus resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Minus resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Times resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Divide resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for ModeOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for LEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for GEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for EEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for GreaterOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for LessOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for NonEqualOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for DoubleAnd resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for DoubleOr resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Tilda resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for And resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Or resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Closing_Parentheses resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Semicolon resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Closing_Bracket resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Comma resolved using rule 4 (numOrLetter -> numOrLetter .)
    Opening_Parentheses shift and go to state 134
    PP              reduce using rule 4 (numOrLetter -> numOrLetter .)
    MM              reduce using rule 4 (numOrLetter -> numOrLetter .)
    Opening_Bracket reduce using rule 4 (numOrLetter -> numOrLetter .)
    Letter          reduce using rule 4 (numOrLetter -> numOrLetter .)
    Equal           reduce using rule 4 (numOrLetter -> numOrLetter .)
    PlusEqual       reduce using rule 4 (numOrLetter -> numOrLetter .)
    MinusEqual      reduce using rule 4 (numOrLetter -> numOrLetter .)
    TimesEqual      reduce using rule 4 (numOrLetter -> numOrLetter .)
    DivideEqual     reduce using rule 4 (numOrLetter -> numOrLetter .)
    Plus            reduce using rule 4 (numOrLetter -> numOrLetter .)
    Minus           reduce using rule 4 (numOrLetter -> numOrLetter .)
    Times           reduce using rule 4 (numOrLetter -> numOrLetter .)
    Divide          reduce using rule 4 (numOrLetter -> numOrLetter .)
    ModeOP          reduce using rule 4 (numOrLetter -> numOrLetter .)
    LEqual          reduce using rule 4 (numOrLetter -> numOrLetter .)
    GEqual          reduce using rule 4 (numOrLetter -> numOrLetter .)
    EEqual          reduce using rule 4 (numOrLetter -> numOrLetter .)
    GreaterOP       reduce using rule 4 (numOrLetter -> numOrLetter .)
    LessOP          reduce using rule 4 (numOrLetter -> numOrLetter .)
    NonEqualOP      reduce using rule 4 (numOrLetter -> numOrLetter .)
    DoubleAnd       reduce using rule 4 (numOrLetter -> numOrLetter .)
    DoubleOr        reduce using rule 4 (numOrLetter -> numOrLetter .)
    Tilda           reduce using rule 4 (numOrLetter -> numOrLetter .)
    And             reduce using rule 4 (numOrLetter -> numOrLetter .)
    Or              reduce using rule 4 (numOrLetter -> numOrLetter .)
    Closing_Parentheses reduce using rule 4 (numOrLetter -> numOrLetter .)
    Semicolon       reduce using rule 4 (numOrLetter -> numOrLetter .)
    Closing_Bracket reduce using rule 4 (numOrLetter -> numOrLetter .)
    Comma           reduce using rule 4 (numOrLetter -> numOrLetter .)

  ! PP              [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! MM              [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Opening_Bracket [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Letter          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Equal           [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! PlusEqual       [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! MinusEqual      [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! TimesEqual      [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! DivideEqual     [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Plus            [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Minus           [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Times           [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Divide          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! ModeOP          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! LEqual          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! GEqual          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! EEqual          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! GreaterOP       [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! LessOP          [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! NonEqualOP      [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! DoubleAnd       [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! DoubleOr        [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Tilda           [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! And             [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Or              [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Closing_Parentheses [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Semicolon       [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Closing_Bracket [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Comma           [ reduce using rule 99 (alterable -> Letter numOrLetter .) ]
  ! Opening_Parentheses [ reduce using rule 4 (numOrLetter -> numOrLetter .) ]


state 127

    (70) eachExpression -> eachExpression logicOp eachExpression .
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (74) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or

  ! shift/reduce conflict for DoubleAnd resolved as shift
  ! shift/reduce conflict for DoubleOr resolved as shift
  ! shift/reduce conflict for Tilda resolved as shift
  ! shift/reduce conflict for And resolved as shift
  ! shift/reduce conflict for Or resolved as shift
    Closing_Parentheses reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .)
    Semicolon       reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .)
    Closing_Bracket reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .)
    Comma           reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .)
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52

  ! DoubleAnd       [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! DoubleOr        [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! Tilda           [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! And             [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]
  ! Or              [ reduce using rule 70 (eachExpression -> eachExpression logicOp eachExpression .) ]

    logicOp                        shift and go to state 78

state 128

    (71) eachExpression -> eachExpression logicOp Then_KW . eachExpression
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    eachExpression                 shift and go to state 148
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 129

    (74) eachExpression -> eachExpression logicOp Else_KW . eachExpression
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    eachExpression                 shift and go to state 149
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 130

    (75) relExpression -> mathEXP compareType mathEXP .
    (85) mathEXP -> mathEXP . op mathEXP
    (87) op -> . Plus
    (88) op -> . Minus
    (89) op -> . Times
    (90) op -> . Divide
    (91) op -> . ModeOP

    Closing_Parentheses reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    DoubleAnd       reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    DoubleOr        reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    Tilda           reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    And             reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    Or              reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    Semicolon       reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    Closing_Bracket reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    Comma           reduce using rule 75 (relExpression -> mathEXP compareType mathEXP .)
    Plus            shift and go to state 84
    Minus           shift and go to state 85
    Times           shift and go to state 86
    Divide          shift and go to state 87
    ModeOP          shift and go to state 88

    op                             shift and go to state 81

state 131

    (85) mathEXP -> mathEXP op mathEXP .
    (85) mathEXP -> mathEXP . op mathEXP
    (87) op -> . Plus
    (88) op -> . Minus
    (89) op -> . Times
    (90) op -> . Divide
    (91) op -> . ModeOP

  ! shift/reduce conflict for Plus resolved as shift
  ! shift/reduce conflict for Minus resolved as shift
  ! shift/reduce conflict for Times resolved as shift
  ! shift/reduce conflict for Divide resolved as shift
  ! shift/reduce conflict for ModeOP resolved as shift
    LEqual          reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    GEqual          reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    EEqual          reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    GreaterOP       reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    LessOP          reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    NonEqualOP      reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    Closing_Parentheses reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    DoubleAnd       reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    DoubleOr        reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    Tilda           reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    And             reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    Or              reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    Semicolon       reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    Closing_Bracket reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    Comma           reduce using rule 85 (mathEXP -> mathEXP op mathEXP .)
    Plus            shift and go to state 84
    Minus           shift and go to state 85
    Times           shift and go to state 86
    Divide          shift and go to state 87
    ModeOP          shift and go to state 88

  ! Plus            [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]
  ! Minus           [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]
  ! Times           [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]
  ! Divide          [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]
  ! ModeOP          [ reduce using rule 85 (mathEXP -> mathEXP op mathEXP .) ]

    op                             shift and go to state 81

state 132

    (100) alterable -> alterable Opening_Bracket allExpression . Closing_Bracket

    Closing_Bracket shift and go to state 150


state 133

    (101) alterable -> alterable Letter numOrLetter .
    (4) numOrLetter -> numOrLetter .

  ! reduce/reduce conflict for Opening_Bracket resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Letter resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Plus resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Minus resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Times resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Divide resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for ModeOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for LEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for GEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for EEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for GreaterOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for LessOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for NonEqualOP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Closing_Parentheses resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for DoubleAnd resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for DoubleOr resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Tilda resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for And resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Or resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for PP resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for MM resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Equal resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for PlusEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for MinusEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for TimesEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for DivideEqual resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Semicolon resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Closing_Bracket resolved using rule 4 (numOrLetter -> numOrLetter .)
  ! reduce/reduce conflict for Comma resolved using rule 4 (numOrLetter -> numOrLetter .)
    Opening_Bracket reduce using rule 4 (numOrLetter -> numOrLetter .)
    Letter          reduce using rule 4 (numOrLetter -> numOrLetter .)
    Plus            reduce using rule 4 (numOrLetter -> numOrLetter .)
    Minus           reduce using rule 4 (numOrLetter -> numOrLetter .)
    Times           reduce using rule 4 (numOrLetter -> numOrLetter .)
    Divide          reduce using rule 4 (numOrLetter -> numOrLetter .)
    ModeOP          reduce using rule 4 (numOrLetter -> numOrLetter .)
    LEqual          reduce using rule 4 (numOrLetter -> numOrLetter .)
    GEqual          reduce using rule 4 (numOrLetter -> numOrLetter .)
    EEqual          reduce using rule 4 (numOrLetter -> numOrLetter .)
    GreaterOP       reduce using rule 4 (numOrLetter -> numOrLetter .)
    LessOP          reduce using rule 4 (numOrLetter -> numOrLetter .)
    NonEqualOP      reduce using rule 4 (numOrLetter -> numOrLetter .)
    Closing_Parentheses reduce using rule 4 (numOrLetter -> numOrLetter .)
    DoubleAnd       reduce using rule 4 (numOrLetter -> numOrLetter .)
    DoubleOr        reduce using rule 4 (numOrLetter -> numOrLetter .)
    Tilda           reduce using rule 4 (numOrLetter -> numOrLetter .)
    And             reduce using rule 4 (numOrLetter -> numOrLetter .)
    Or              reduce using rule 4 (numOrLetter -> numOrLetter .)
    PP              reduce using rule 4 (numOrLetter -> numOrLetter .)
    MM              reduce using rule 4 (numOrLetter -> numOrLetter .)
    Equal           reduce using rule 4 (numOrLetter -> numOrLetter .)
    PlusEqual       reduce using rule 4 (numOrLetter -> numOrLetter .)
    MinusEqual      reduce using rule 4 (numOrLetter -> numOrLetter .)
    TimesEqual      reduce using rule 4 (numOrLetter -> numOrLetter .)
    DivideEqual     reduce using rule 4 (numOrLetter -> numOrLetter .)
    Semicolon       reduce using rule 4 (numOrLetter -> numOrLetter .)
    Closing_Bracket reduce using rule 4 (numOrLetter -> numOrLetter .)
    Comma           reduce using rule 4 (numOrLetter -> numOrLetter .)

  ! Opening_Bracket [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Letter          [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Plus            [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Minus           [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Times           [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Divide          [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! ModeOP          [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! LEqual          [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! GEqual          [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! EEqual          [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! GreaterOP       [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! LessOP          [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! NonEqualOP      [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Closing_Parentheses [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! DoubleAnd       [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! DoubleOr        [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Tilda           [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! And             [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Or              [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! PP              [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! MM              [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Equal           [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! PlusEqual       [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! MinusEqual      [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! TimesEqual      [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! DivideEqual     [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Semicolon       [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Closing_Bracket [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]
  ! Comma           [ reduce using rule 101 (alterable -> alterable Letter numOrLetter .) ]


state 134

    (104) inalterable -> Letter numOrLetter Opening_Parentheses . args Closing_Parentheses
    (105) args -> . arguments
    (106) args -> .
    (107) arguments -> . arguments Comma allExpression
    (108) arguments -> . allExpression
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Closing_Parentheses reduce using rule 106 (args -> .)
    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    args                           shift and go to state 151
    arguments                      shift and go to state 152
    allExpression                  shift and go to state 153
    alterable                      shift and go to state 74
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 135

    (26) function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket .

    void_KW         reduce using rule 26 (function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket .)
    Boolean_KW      reduce using rule 26 (function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket .)
    Character_KW    reduce using rule 26 (function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket .)
    Integer_KW      reduce using rule 26 (function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket .)
    char_KW         reduce using rule 26 (function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket .)
    bool_KW         reduce using rule 26 (function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket .)
    int_KW          reduce using rule 26 (function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket .)
    $end            reduce using rule 26 (function -> void_KW numOrLetter Opening_Parentheses parameter Closing_Parentheses Opening_Bracket statement Closing_Bracket .)


state 136

    (48) phrase -> allExpression Semicolon .

    Closing_Bracket reduce using rule 48 (phrase -> allExpression Semicolon .)
    void_KW         reduce using rule 48 (phrase -> allExpression Semicolon .)
    Boolean_KW      reduce using rule 48 (phrase -> allExpression Semicolon .)
    Character_KW    reduce using rule 48 (phrase -> allExpression Semicolon .)
    Integer_KW      reduce using rule 48 (phrase -> allExpression Semicolon .)
    char_KW         reduce using rule 48 (phrase -> allExpression Semicolon .)
    bool_KW         reduce using rule 48 (phrase -> allExpression Semicolon .)
    int_KW          reduce using rule 48 (phrase -> allExpression Semicolon .)
    $end            reduce using rule 48 (phrase -> allExpression Semicolon .)
    Closing_Brace   reduce using rule 48 (phrase -> allExpression Semicolon .)
    Semicolon       reduce using rule 48 (phrase -> allExpression Semicolon .)
    Opening_Brace   reduce using rule 48 (phrase -> allExpression Semicolon .)
    If_KW           reduce using rule 48 (phrase -> allExpression Semicolon .)
    Till_KW         reduce using rule 48 (phrase -> allExpression Semicolon .)
    ComeBack_KW     reduce using rule 48 (phrase -> allExpression Semicolon .)
    GiveBack_KW     reduce using rule 48 (phrase -> allExpression Semicolon .)
    Continue_KW     reduce using rule 48 (phrase -> allExpression Semicolon .)
    Letter          reduce using rule 48 (phrase -> allExpression Semicolon .)
    DoubleAnd       reduce using rule 48 (phrase -> allExpression Semicolon .)
    DoubleOr        reduce using rule 48 (phrase -> allExpression Semicolon .)
    Tilda           reduce using rule 48 (phrase -> allExpression Semicolon .)
    And             reduce using rule 48 (phrase -> allExpression Semicolon .)
    Or              reduce using rule 48 (phrase -> allExpression Semicolon .)
    Minus           reduce using rule 48 (phrase -> allExpression Semicolon .)
    Times           reduce using rule 48 (phrase -> allExpression Semicolon .)
    QMark           reduce using rule 48 (phrase -> allExpression Semicolon .)
    Opening_Parentheses reduce using rule 48 (phrase -> allExpression Semicolon .)
    Const_KW        reduce using rule 48 (phrase -> allExpression Semicolon .)
    True_KW         reduce using rule 48 (phrase -> allExpression Semicolon .)
    False_KW        reduce using rule 48 (phrase -> allExpression Semicolon .)
    Other_KW        reduce using rule 48 (phrase -> allExpression Semicolon .)


state 137

    (45) compoundPhrase -> Opening_Brace localDeclarations . statementList Closing_Brace
    (35) localDeclarations -> localDeclarations . ScopedVariableDec
    (46) statementList -> . statementList statement
    (47) statementList -> .
    (11) ScopedVariableDec -> . scopedSpecifier variableList Semicolon
    (18) scopedSpecifier -> . Static_KW type
    (19) scopedSpecifier -> . type
    (20) type -> . Boolean_KW
    (21) type -> . Character_KW
    (22) type -> . Integer_KW
    (23) type -> . char_KW
    (24) type -> . bool_KW
    (25) type -> . int_KW

    Closing_Brace   reduce using rule 47 (statementList -> .)
    Semicolon       reduce using rule 47 (statementList -> .)
    Opening_Brace   reduce using rule 47 (statementList -> .)
    If_KW           reduce using rule 47 (statementList -> .)
    Till_KW         reduce using rule 47 (statementList -> .)
    ComeBack_KW     reduce using rule 47 (statementList -> .)
    GiveBack_KW     reduce using rule 47 (statementList -> .)
    Continue_KW     reduce using rule 47 (statementList -> .)
    Letter          reduce using rule 47 (statementList -> .)
    DoubleAnd       reduce using rule 47 (statementList -> .)
    DoubleOr        reduce using rule 47 (statementList -> .)
    Tilda           reduce using rule 47 (statementList -> .)
    And             reduce using rule 47 (statementList -> .)
    Or              reduce using rule 47 (statementList -> .)
    Minus           reduce using rule 47 (statementList -> .)
    Times           reduce using rule 47 (statementList -> .)
    QMark           reduce using rule 47 (statementList -> .)
    Opening_Parentheses reduce using rule 47 (statementList -> .)
    Const_KW        reduce using rule 47 (statementList -> .)
    True_KW         reduce using rule 47 (statementList -> .)
    False_KW        reduce using rule 47 (statementList -> .)
    Static_KW       shift and go to state 157
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    statementList                  shift and go to state 154
    ScopedVariableDec              shift and go to state 155
    scopedSpecifier                shift and go to state 156
    type                           shift and go to state 158

state 138

    (50) selectPhrase -> If_KW Opening_Parentheses . eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> If_KW Opening_Parentheses . eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    eachExpression                 shift and go to state 159
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 139

    (55) iterationPhrase -> Till_KW Opening_Parentheses . eachExpression Closing_Parentheses statement
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Letter          shift and go to state 63
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    eachExpression                 shift and go to state 160
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    alterable                      shift and go to state 61
    constant                       shift and go to state 62

state 140

    (56) returnPhrase -> ComeBack_KW Semicolon .

    Closing_Bracket reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    void_KW         reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Boolean_KW      reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Character_KW    reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Integer_KW      reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    char_KW         reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    bool_KW         reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    int_KW          reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    $end            reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Closing_Brace   reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Semicolon       reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Opening_Brace   reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    If_KW           reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Till_KW         reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    ComeBack_KW     reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    GiveBack_KW     reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Continue_KW     reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Letter          reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    DoubleAnd       reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    DoubleOr        reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Tilda           reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    And             reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Or              reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Minus           reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Times           reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    QMark           reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Opening_Parentheses reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Const_KW        reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    True_KW         reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    False_KW        reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)
    Other_KW        reduce using rule 56 (returnPhrase -> ComeBack_KW Semicolon .)


state 141

    (57) returnPhrase -> GiveBack_KW allExpression . Semicolon

    Semicolon       shift and go to state 161


state 142

    (58) returnPhrase -> GiveBack_KW numOrLetter . Semicolon
    (4) numOrLetter -> numOrLetter .

  ! shift/reduce conflict for Semicolon resolved as shift
    Semicolon       shift and go to state 162

  ! Semicolon       [ reduce using rule 4 (numOrLetter -> numOrLetter .) ]


state 143

    (3) numOrLetter -> Letter .
    (99) alterable -> Letter . numOrLetter
    (104) inalterable -> Letter . numOrLetter Opening_Parentheses args Closing_Parentheses
    (2) numOrLetter -> . Num
    (3) numOrLetter -> . Letter
    (4) numOrLetter -> . numOrLetter
    (5) numOrLetter -> .

  ! shift/reduce conflict for Letter resolved as shift
  ! reduce/reduce conflict for Semicolon resolved using rule 3 (numOrLetter -> Letter .)
    Semicolon       reduce using rule 3 (numOrLetter -> Letter .)
    Num             shift and go to state 16
    Letter          shift and go to state 17
    Opening_Parentheses reduce using rule 5 (numOrLetter -> .)
    PP              reduce using rule 5 (numOrLetter -> .)
    MM              reduce using rule 5 (numOrLetter -> .)
    Opening_Bracket reduce using rule 5 (numOrLetter -> .)
    Equal           reduce using rule 5 (numOrLetter -> .)
    PlusEqual       reduce using rule 5 (numOrLetter -> .)
    MinusEqual      reduce using rule 5 (numOrLetter -> .)
    TimesEqual      reduce using rule 5 (numOrLetter -> .)
    DivideEqual     reduce using rule 5 (numOrLetter -> .)
    Plus            reduce using rule 5 (numOrLetter -> .)
    Minus           reduce using rule 5 (numOrLetter -> .)
    Times           reduce using rule 5 (numOrLetter -> .)
    Divide          reduce using rule 5 (numOrLetter -> .)
    ModeOP          reduce using rule 5 (numOrLetter -> .)
    LEqual          reduce using rule 5 (numOrLetter -> .)
    GEqual          reduce using rule 5 (numOrLetter -> .)
    EEqual          reduce using rule 5 (numOrLetter -> .)
    GreaterOP       reduce using rule 5 (numOrLetter -> .)
    LessOP          reduce using rule 5 (numOrLetter -> .)
    NonEqualOP      reduce using rule 5 (numOrLetter -> .)
    DoubleAnd       reduce using rule 5 (numOrLetter -> .)
    DoubleOr        reduce using rule 5 (numOrLetter -> .)
    Tilda           reduce using rule 5 (numOrLetter -> .)
    And             reduce using rule 5 (numOrLetter -> .)
    Or              reduce using rule 5 (numOrLetter -> .)

  ! Letter          [ reduce using rule 5 (numOrLetter -> .) ]
  ! Semicolon       [ reduce using rule 5 (numOrLetter -> .) ]

    numOrLetter                    shift and go to state 126

state 144

    (59) continue -> Continue_KW Semicolon .

    Closing_Bracket reduce using rule 59 (continue -> Continue_KW Semicolon .)
    void_KW         reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Boolean_KW      reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Character_KW    reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Integer_KW      reduce using rule 59 (continue -> Continue_KW Semicolon .)
    char_KW         reduce using rule 59 (continue -> Continue_KW Semicolon .)
    bool_KW         reduce using rule 59 (continue -> Continue_KW Semicolon .)
    int_KW          reduce using rule 59 (continue -> Continue_KW Semicolon .)
    $end            reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Closing_Brace   reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Semicolon       reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Opening_Brace   reduce using rule 59 (continue -> Continue_KW Semicolon .)
    If_KW           reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Till_KW         reduce using rule 59 (continue -> Continue_KW Semicolon .)
    ComeBack_KW     reduce using rule 59 (continue -> Continue_KW Semicolon .)
    GiveBack_KW     reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Continue_KW     reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Letter          reduce using rule 59 (continue -> Continue_KW Semicolon .)
    DoubleAnd       reduce using rule 59 (continue -> Continue_KW Semicolon .)
    DoubleOr        reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Tilda           reduce using rule 59 (continue -> Continue_KW Semicolon .)
    And             reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Or              reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Minus           reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Times           reduce using rule 59 (continue -> Continue_KW Semicolon .)
    QMark           reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Opening_Parentheses reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Const_KW        reduce using rule 59 (continue -> Continue_KW Semicolon .)
    True_KW         reduce using rule 59 (continue -> Continue_KW Semicolon .)
    False_KW        reduce using rule 59 (continue -> Continue_KW Semicolon .)
    Other_KW        reduce using rule 59 (continue -> Continue_KW Semicolon .)


state 145

    (38) paramId -> Letter numOrLetter Opening_Bracket Closing_Bracket .

    Comma           reduce using rule 38 (paramId -> Letter numOrLetter Opening_Bracket Closing_Bracket .)
    Semicolon       reduce using rule 38 (paramId -> Letter numOrLetter Opening_Bracket Closing_Bracket .)
    Closing_Parentheses reduce using rule 38 (paramId -> Letter numOrLetter Opening_Bracket Closing_Bracket .)


state 146

    (64) allExpression -> alterable mathOp alterable .
    (60) allExpression -> alterable . mathOp allExpression
    (61) allExpression -> alterable . PP
    (62) allExpression -> alterable . MM
    (64) allExpression -> alterable . mathOp alterable
    (100) alterable -> alterable . Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> alterable . Letter numOrLetter
    (98) factor -> alterable .
    (65) mathOp -> . Equal
    (66) mathOp -> . PlusEqual
    (67) mathOp -> . MinusEqual
    (68) mathOp -> . TimesEqual
    (69) mathOp -> . DivideEqual

  ! reduce/reduce conflict for Closing_Parentheses resolved using rule 64 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for Semicolon resolved using rule 64 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for Closing_Bracket resolved using rule 64 (allExpression -> alterable mathOp alterable .)
  ! reduce/reduce conflict for Comma resolved using rule 64 (allExpression -> alterable mathOp alterable .)
    Closing_Parentheses reduce using rule 64 (allExpression -> alterable mathOp alterable .)
    Semicolon       reduce using rule 64 (allExpression -> alterable mathOp alterable .)
    Closing_Bracket reduce using rule 64 (allExpression -> alterable mathOp alterable .)
    Comma           reduce using rule 64 (allExpression -> alterable mathOp alterable .)
    PP              shift and go to state 119
    MM              shift and go to state 120
    Opening_Bracket shift and go to state 96
    Letter          shift and go to state 97
    Plus            reduce using rule 98 (factor -> alterable .)
    Minus           reduce using rule 98 (factor -> alterable .)
    Times           reduce using rule 98 (factor -> alterable .)
    Divide          reduce using rule 98 (factor -> alterable .)
    ModeOP          reduce using rule 98 (factor -> alterable .)
    LEqual          reduce using rule 98 (factor -> alterable .)
    GEqual          reduce using rule 98 (factor -> alterable .)
    EEqual          reduce using rule 98 (factor -> alterable .)
    GreaterOP       reduce using rule 98 (factor -> alterable .)
    LessOP          reduce using rule 98 (factor -> alterable .)
    NonEqualOP      reduce using rule 98 (factor -> alterable .)
    DoubleAnd       reduce using rule 98 (factor -> alterable .)
    DoubleOr        reduce using rule 98 (factor -> alterable .)
    Tilda           reduce using rule 98 (factor -> alterable .)
    And             reduce using rule 98 (factor -> alterable .)
    Or              reduce using rule 98 (factor -> alterable .)
    Equal           shift and go to state 121
    PlusEqual       shift and go to state 122
    MinusEqual      shift and go to state 123
    TimesEqual      shift and go to state 124
    DivideEqual     shift and go to state 125

  ! Closing_Parentheses [ reduce using rule 98 (factor -> alterable .) ]
  ! Semicolon       [ reduce using rule 98 (factor -> alterable .) ]
  ! Closing_Bracket [ reduce using rule 98 (factor -> alterable .) ]
  ! Comma           [ reduce using rule 98 (factor -> alterable .) ]

    mathOp                         shift and go to state 118

state 147

    (60) allExpression -> alterable mathOp allExpression .

    Closing_Parentheses reduce using rule 60 (allExpression -> alterable mathOp allExpression .)
    Semicolon       reduce using rule 60 (allExpression -> alterable mathOp allExpression .)
    Closing_Bracket reduce using rule 60 (allExpression -> alterable mathOp allExpression .)
    Comma           reduce using rule 60 (allExpression -> alterable mathOp allExpression .)


state 148

    (71) eachExpression -> eachExpression logicOp Then_KW eachExpression .
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (74) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or

  ! shift/reduce conflict for DoubleAnd resolved as shift
  ! shift/reduce conflict for DoubleOr resolved as shift
  ! shift/reduce conflict for Tilda resolved as shift
  ! shift/reduce conflict for And resolved as shift
  ! shift/reduce conflict for Or resolved as shift
    Closing_Parentheses reduce using rule 71 (eachExpression -> eachExpression logicOp Then_KW eachExpression .)
    Semicolon       reduce using rule 71 (eachExpression -> eachExpression logicOp Then_KW eachExpression .)
    Closing_Bracket reduce using rule 71 (eachExpression -> eachExpression logicOp Then_KW eachExpression .)
    Comma           reduce using rule 71 (eachExpression -> eachExpression logicOp Then_KW eachExpression .)
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52

  ! DoubleAnd       [ reduce using rule 71 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]
  ! DoubleOr        [ reduce using rule 71 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]
  ! Tilda           [ reduce using rule 71 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]
  ! And             [ reduce using rule 71 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]
  ! Or              [ reduce using rule 71 (eachExpression -> eachExpression logicOp Then_KW eachExpression .) ]

    logicOp                        shift and go to state 78

state 149

    (74) eachExpression -> eachExpression logicOp Else_KW eachExpression .
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (74) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or

  ! shift/reduce conflict for DoubleAnd resolved as shift
  ! shift/reduce conflict for DoubleOr resolved as shift
  ! shift/reduce conflict for Tilda resolved as shift
  ! shift/reduce conflict for And resolved as shift
  ! shift/reduce conflict for Or resolved as shift
    Closing_Parentheses reduce using rule 74 (eachExpression -> eachExpression logicOp Else_KW eachExpression .)
    Semicolon       reduce using rule 74 (eachExpression -> eachExpression logicOp Else_KW eachExpression .)
    Closing_Bracket reduce using rule 74 (eachExpression -> eachExpression logicOp Else_KW eachExpression .)
    Comma           reduce using rule 74 (eachExpression -> eachExpression logicOp Else_KW eachExpression .)
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52

  ! DoubleAnd       [ reduce using rule 74 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]
  ! DoubleOr        [ reduce using rule 74 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]
  ! Tilda           [ reduce using rule 74 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]
  ! And             [ reduce using rule 74 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]
  ! Or              [ reduce using rule 74 (eachExpression -> eachExpression logicOp Else_KW eachExpression .) ]

    logicOp                        shift and go to state 78

state 150

    (100) alterable -> alterable Opening_Bracket allExpression Closing_Bracket .

    Opening_Bracket reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Letter          reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Plus            reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Minus           reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Times           reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Divide          reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    ModeOP          reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    LEqual          reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    GEqual          reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    EEqual          reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    GreaterOP       reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    LessOP          reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    NonEqualOP      reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Closing_Parentheses reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    DoubleAnd       reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    DoubleOr        reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Tilda           reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    And             reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Or              reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    PP              reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    MM              reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Equal           reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    PlusEqual       reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    MinusEqual      reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    TimesEqual      reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    DivideEqual     reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Semicolon       reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Closing_Bracket reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Comma           reduce using rule 100 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)


state 151

    (104) inalterable -> Letter numOrLetter Opening_Parentheses args . Closing_Parentheses

    Closing_Parentheses shift and go to state 163


state 152

    (105) args -> arguments .
    (107) arguments -> arguments . Comma allExpression

    Closing_Parentheses reduce using rule 105 (args -> arguments .)
    Comma           shift and go to state 164


state 153

    (108) arguments -> allExpression .

    Comma           reduce using rule 108 (arguments -> allExpression .)
    Closing_Parentheses reduce using rule 108 (arguments -> allExpression .)


state 154

    (45) compoundPhrase -> Opening_Brace localDeclarations statementList . Closing_Brace
    (46) statementList -> statementList . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression Semicolon
    (49) phrase -> . Semicolon
    (45) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (50) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (55) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (56) returnPhrase -> . ComeBack_KW Semicolon
    (57) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (58) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (59) continue -> . Continue_KW Semicolon
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Closing_Brace   shift and go to state 165
    Semicolon       shift and go to state 107
    Opening_Brace   shift and go to state 108
    If_KW           shift and go to state 109
    Till_KW         shift and go to state 110
    ComeBack_KW     shift and go to state 111
    GiveBack_KW     shift and go to state 112
    Continue_KW     shift and go to state 113
    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    statement                      shift and go to state 166
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    eachExpression                 shift and go to state 75
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 155

    (35) localDeclarations -> localDeclarations ScopedVariableDec .

    Static_KW       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Boolean_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Character_KW    reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Integer_KW      reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    char_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    bool_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    int_KW          reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Closing_Brace   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Semicolon       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Opening_Brace   reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    If_KW           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Till_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    ComeBack_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    GiveBack_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Continue_KW     reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Letter          reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    DoubleAnd       reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    DoubleOr        reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Tilda           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    And             reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Or              reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Minus           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Times           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    QMark           reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Opening_Parentheses reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Const_KW        reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    True_KW         reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)
    False_KW        reduce using rule 35 (localDeclarations -> localDeclarations ScopedVariableDec .)


state 156

    (11) ScopedVariableDec -> scopedSpecifier . variableList Semicolon
    (12) variableList -> . variableList Comma varInitialization
    (13) variableList -> . varInitialization
    (14) varInitialization -> . varForm
    (15) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (16) varForm -> . Letter numOrLetter Opening_Bracket Num Closing_Bracket
    (17) varForm -> . Letter numOrLetter

    Letter          shift and go to state 34

    variableList                   shift and go to state 167
    varInitialization              shift and go to state 20
    varForm                        shift and go to state 21

state 157

    (18) scopedSpecifier -> Static_KW . type
    (20) type -> . Boolean_KW
    (21) type -> . Character_KW
    (22) type -> . Integer_KW
    (23) type -> . char_KW
    (24) type -> . bool_KW
    (25) type -> . int_KW

    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    type                           shift and go to state 168

state 158

    (19) scopedSpecifier -> type .

    Letter          reduce using rule 19 (scopedSpecifier -> type .)


state 159

    (50) selectPhrase -> If_KW Opening_Parentheses eachExpression . Closing_Parentheses ifBody
    (51) selectPhrase -> If_KW Opening_Parentheses eachExpression . Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (74) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or

    Closing_Parentheses shift and go to state 169
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52

    logicOp                        shift and go to state 78

state 160

    (55) iterationPhrase -> Till_KW Opening_Parentheses eachExpression . Closing_Parentheses statement
    (70) eachExpression -> eachExpression . logicOp eachExpression
    (71) eachExpression -> eachExpression . logicOp Then_KW eachExpression
    (74) eachExpression -> eachExpression . logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or

    Closing_Parentheses shift and go to state 170
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52

    logicOp                        shift and go to state 78

state 161

    (57) returnPhrase -> GiveBack_KW allExpression Semicolon .

    Closing_Bracket reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    void_KW         reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Boolean_KW      reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Character_KW    reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Integer_KW      reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    char_KW         reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    bool_KW         reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    int_KW          reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    $end            reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Closing_Brace   reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Semicolon       reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Opening_Brace   reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    If_KW           reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Till_KW         reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    ComeBack_KW     reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    GiveBack_KW     reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Continue_KW     reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Letter          reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    DoubleAnd       reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    DoubleOr        reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Tilda           reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    And             reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Or              reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Minus           reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Times           reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    QMark           reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Opening_Parentheses reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Const_KW        reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    True_KW         reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    False_KW        reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Other_KW        reduce using rule 57 (returnPhrase -> GiveBack_KW allExpression Semicolon .)


state 162

    (58) returnPhrase -> GiveBack_KW numOrLetter Semicolon .

    Closing_Bracket reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    void_KW         reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Boolean_KW      reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Character_KW    reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Integer_KW      reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    char_KW         reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    bool_KW         reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    int_KW          reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    $end            reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Closing_Brace   reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Semicolon       reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Opening_Brace   reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    If_KW           reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Till_KW         reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    ComeBack_KW     reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    GiveBack_KW     reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Continue_KW     reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Letter          reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    DoubleAnd       reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    DoubleOr        reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Tilda           reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    And             reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Or              reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Minus           reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Times           reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    QMark           reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Opening_Parentheses reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Const_KW        reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    True_KW         reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    False_KW        reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)
    Other_KW        reduce using rule 58 (returnPhrase -> GiveBack_KW numOrLetter Semicolon .)


state 163

    (104) inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .

    Plus            reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    Minus           reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    Times           reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    Divide          reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    ModeOP          reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    LEqual          reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    GEqual          reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    EEqual          reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    GreaterOP       reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    LessOP          reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    NonEqualOP      reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    Closing_Parentheses reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    DoubleAnd       reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    DoubleOr        reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    Tilda           reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    And             reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    Or              reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    Semicolon       reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    Closing_Bracket reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)
    Comma           reduce using rule 104 (inalterable -> Letter numOrLetter Opening_Parentheses args Closing_Parentheses .)


state 164

    (107) arguments -> arguments Comma . allExpression
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    allExpression                  shift and go to state 171
    alterable                      shift and go to state 74
    eachExpression                 shift and go to state 75
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 165

    (45) compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .

    Closing_Bracket reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    void_KW         reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Boolean_KW      reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Character_KW    reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Integer_KW      reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    char_KW         reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    bool_KW         reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    int_KW          reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    $end            reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Closing_Brace   reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Semicolon       reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Opening_Brace   reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    If_KW           reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Till_KW         reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    ComeBack_KW     reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    GiveBack_KW     reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Continue_KW     reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Letter          reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    DoubleAnd       reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    DoubleOr        reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Tilda           reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    And             reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Or              reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Minus           reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Times           reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    QMark           reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Opening_Parentheses reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Const_KW        reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    True_KW         reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    False_KW        reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Other_KW        reduce using rule 45 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)


state 166

    (46) statementList -> statementList statement .

    Closing_Brace   reduce using rule 46 (statementList -> statementList statement .)
    Semicolon       reduce using rule 46 (statementList -> statementList statement .)
    Opening_Brace   reduce using rule 46 (statementList -> statementList statement .)
    If_KW           reduce using rule 46 (statementList -> statementList statement .)
    Till_KW         reduce using rule 46 (statementList -> statementList statement .)
    ComeBack_KW     reduce using rule 46 (statementList -> statementList statement .)
    GiveBack_KW     reduce using rule 46 (statementList -> statementList statement .)
    Continue_KW     reduce using rule 46 (statementList -> statementList statement .)
    Letter          reduce using rule 46 (statementList -> statementList statement .)
    DoubleAnd       reduce using rule 46 (statementList -> statementList statement .)
    DoubleOr        reduce using rule 46 (statementList -> statementList statement .)
    Tilda           reduce using rule 46 (statementList -> statementList statement .)
    And             reduce using rule 46 (statementList -> statementList statement .)
    Or              reduce using rule 46 (statementList -> statementList statement .)
    Minus           reduce using rule 46 (statementList -> statementList statement .)
    Times           reduce using rule 46 (statementList -> statementList statement .)
    QMark           reduce using rule 46 (statementList -> statementList statement .)
    Opening_Parentheses reduce using rule 46 (statementList -> statementList statement .)
    Const_KW        reduce using rule 46 (statementList -> statementList statement .)
    True_KW         reduce using rule 46 (statementList -> statementList statement .)
    False_KW        reduce using rule 46 (statementList -> statementList statement .)


state 167

    (11) ScopedVariableDec -> scopedSpecifier variableList . Semicolon
    (12) variableList -> variableList . Comma varInitialization

    Semicolon       shift and go to state 172
    Comma           shift and go to state 25


state 168

    (18) scopedSpecifier -> Static_KW type .

    Letter          reduce using rule 18 (scopedSpecifier -> Static_KW type .)


state 169

    (50) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses . ifBody
    (51) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses . Opening_Brace ifBody ifBody Closing_Brace
    (52) ifBody -> . statement
    (53) ifBody -> . statement Other_KW statement
    (54) ifBody -> . Semicolon
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression Semicolon
    (49) phrase -> . Semicolon
    (45) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (50) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (55) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (56) returnPhrase -> . ComeBack_KW Semicolon
    (57) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (58) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (59) continue -> . Continue_KW Semicolon
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Opening_Brace   shift and go to state 174
    Semicolon       shift and go to state 176
    If_KW           shift and go to state 109
    Till_KW         shift and go to state 110
    ComeBack_KW     shift and go to state 111
    GiveBack_KW     shift and go to state 112
    Continue_KW     shift and go to state 113
    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    eachExpression                 shift and go to state 75
    ifBody                         shift and go to state 173
    statement                      shift and go to state 175
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 170

    (55) iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression Semicolon
    (49) phrase -> . Semicolon
    (45) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (50) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (55) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (56) returnPhrase -> . ComeBack_KW Semicolon
    (57) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (58) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (59) continue -> . Continue_KW Semicolon
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Semicolon       shift and go to state 107
    Opening_Brace   shift and go to state 108
    If_KW           shift and go to state 109
    Till_KW         shift and go to state 110
    ComeBack_KW     shift and go to state 111
    GiveBack_KW     shift and go to state 112
    Continue_KW     shift and go to state 113
    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    eachExpression                 shift and go to state 75
    statement                      shift and go to state 177
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 171

    (107) arguments -> arguments Comma allExpression .

    Comma           reduce using rule 107 (arguments -> arguments Comma allExpression .)
    Closing_Parentheses reduce using rule 107 (arguments -> arguments Comma allExpression .)


state 172

    (11) ScopedVariableDec -> scopedSpecifier variableList Semicolon .

    Static_KW       reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Boolean_KW      reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Character_KW    reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Integer_KW      reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    char_KW         reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    bool_KW         reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    int_KW          reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Closing_Brace   reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Semicolon       reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Opening_Brace   reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    If_KW           reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Till_KW         reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    ComeBack_KW     reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    GiveBack_KW     reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Continue_KW     reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Letter          reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    DoubleAnd       reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    DoubleOr        reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Tilda           reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    And             reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Or              reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Minus           reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Times           reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    QMark           reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Opening_Parentheses reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Const_KW        reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    True_KW         reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    False_KW        reduce using rule 11 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)


state 173

    (50) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .

    Closing_Bracket reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    void_KW         reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Boolean_KW      reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Character_KW    reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Integer_KW      reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    char_KW         reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    bool_KW         reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    int_KW          reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    $end            reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Closing_Brace   reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Semicolon       reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Opening_Brace   reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    If_KW           reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Till_KW         reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    ComeBack_KW     reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    GiveBack_KW     reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Continue_KW     reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Letter          reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    DoubleAnd       reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    DoubleOr        reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Tilda           reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    And             reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Or              reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Minus           reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Times           reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    QMark           reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Opening_Parentheses reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Const_KW        reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    True_KW         reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    False_KW        reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Other_KW        reduce using rule 50 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)


state 174

    (51) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace . ifBody ifBody Closing_Brace
    (45) compoundPhrase -> Opening_Brace . localDeclarations statementList Closing_Brace
    (52) ifBody -> . statement
    (53) ifBody -> . statement Other_KW statement
    (54) ifBody -> . Semicolon
    (35) localDeclarations -> . localDeclarations ScopedVariableDec
    (36) localDeclarations -> .
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression Semicolon
    (49) phrase -> . Semicolon
    (45) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (50) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (55) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (56) returnPhrase -> . ComeBack_KW Semicolon
    (57) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (58) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (59) continue -> . Continue_KW Semicolon
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

  ! shift/reduce conflict for Semicolon resolved as shift
  ! shift/reduce conflict for Opening_Brace resolved as shift
  ! shift/reduce conflict for If_KW resolved as shift
  ! shift/reduce conflict for Till_KW resolved as shift
  ! shift/reduce conflict for ComeBack_KW resolved as shift
  ! shift/reduce conflict for GiveBack_KW resolved as shift
  ! shift/reduce conflict for Continue_KW resolved as shift
  ! shift/reduce conflict for Letter resolved as shift
  ! shift/reduce conflict for DoubleAnd resolved as shift
  ! shift/reduce conflict for DoubleOr resolved as shift
  ! shift/reduce conflict for Tilda resolved as shift
  ! shift/reduce conflict for And resolved as shift
  ! shift/reduce conflict for Or resolved as shift
  ! shift/reduce conflict for Minus resolved as shift
  ! shift/reduce conflict for Times resolved as shift
  ! shift/reduce conflict for QMark resolved as shift
  ! shift/reduce conflict for Opening_Parentheses resolved as shift
  ! shift/reduce conflict for Const_KW resolved as shift
  ! shift/reduce conflict for True_KW resolved as shift
  ! shift/reduce conflict for False_KW resolved as shift
    Semicolon       shift and go to state 176
    Static_KW       reduce using rule 36 (localDeclarations -> .)
    Boolean_KW      reduce using rule 36 (localDeclarations -> .)
    Character_KW    reduce using rule 36 (localDeclarations -> .)
    Integer_KW      reduce using rule 36 (localDeclarations -> .)
    char_KW         reduce using rule 36 (localDeclarations -> .)
    bool_KW         reduce using rule 36 (localDeclarations -> .)
    int_KW          reduce using rule 36 (localDeclarations -> .)
    Closing_Brace   reduce using rule 36 (localDeclarations -> .)
    Opening_Brace   shift and go to state 108
    If_KW           shift and go to state 109
    Till_KW         shift and go to state 110
    ComeBack_KW     shift and go to state 111
    GiveBack_KW     shift and go to state 112
    Continue_KW     shift and go to state 113
    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

  ! Semicolon       [ reduce using rule 36 (localDeclarations -> .) ]
  ! Opening_Brace   [ reduce using rule 36 (localDeclarations -> .) ]
  ! If_KW           [ reduce using rule 36 (localDeclarations -> .) ]
  ! Till_KW         [ reduce using rule 36 (localDeclarations -> .) ]
  ! ComeBack_KW     [ reduce using rule 36 (localDeclarations -> .) ]
  ! GiveBack_KW     [ reduce using rule 36 (localDeclarations -> .) ]
  ! Continue_KW     [ reduce using rule 36 (localDeclarations -> .) ]
  ! Letter          [ reduce using rule 36 (localDeclarations -> .) ]
  ! DoubleAnd       [ reduce using rule 36 (localDeclarations -> .) ]
  ! DoubleOr        [ reduce using rule 36 (localDeclarations -> .) ]
  ! Tilda           [ reduce using rule 36 (localDeclarations -> .) ]
  ! And             [ reduce using rule 36 (localDeclarations -> .) ]
  ! Or              [ reduce using rule 36 (localDeclarations -> .) ]
  ! Minus           [ reduce using rule 36 (localDeclarations -> .) ]
  ! Times           [ reduce using rule 36 (localDeclarations -> .) ]
  ! QMark           [ reduce using rule 36 (localDeclarations -> .) ]
  ! Opening_Parentheses [ reduce using rule 36 (localDeclarations -> .) ]
  ! Const_KW        [ reduce using rule 36 (localDeclarations -> .) ]
  ! True_KW         [ reduce using rule 36 (localDeclarations -> .) ]
  ! False_KW        [ reduce using rule 36 (localDeclarations -> .) ]

    eachExpression                 shift and go to state 75
    ifBody                         shift and go to state 178
    localDeclarations              shift and go to state 137
    statement                      shift and go to state 175
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 175

    (52) ifBody -> statement .
    (53) ifBody -> statement . Other_KW statement

  ! shift/reduce conflict for Other_KW resolved as shift
    Closing_Bracket reduce using rule 52 (ifBody -> statement .)
    void_KW         reduce using rule 52 (ifBody -> statement .)
    Boolean_KW      reduce using rule 52 (ifBody -> statement .)
    Character_KW    reduce using rule 52 (ifBody -> statement .)
    Integer_KW      reduce using rule 52 (ifBody -> statement .)
    char_KW         reduce using rule 52 (ifBody -> statement .)
    bool_KW         reduce using rule 52 (ifBody -> statement .)
    int_KW          reduce using rule 52 (ifBody -> statement .)
    $end            reduce using rule 52 (ifBody -> statement .)
    Closing_Brace   reduce using rule 52 (ifBody -> statement .)
    Semicolon       reduce using rule 52 (ifBody -> statement .)
    Opening_Brace   reduce using rule 52 (ifBody -> statement .)
    If_KW           reduce using rule 52 (ifBody -> statement .)
    Till_KW         reduce using rule 52 (ifBody -> statement .)
    ComeBack_KW     reduce using rule 52 (ifBody -> statement .)
    GiveBack_KW     reduce using rule 52 (ifBody -> statement .)
    Continue_KW     reduce using rule 52 (ifBody -> statement .)
    Letter          reduce using rule 52 (ifBody -> statement .)
    DoubleAnd       reduce using rule 52 (ifBody -> statement .)
    DoubleOr        reduce using rule 52 (ifBody -> statement .)
    Tilda           reduce using rule 52 (ifBody -> statement .)
    And             reduce using rule 52 (ifBody -> statement .)
    Or              reduce using rule 52 (ifBody -> statement .)
    Minus           reduce using rule 52 (ifBody -> statement .)
    Times           reduce using rule 52 (ifBody -> statement .)
    QMark           reduce using rule 52 (ifBody -> statement .)
    Opening_Parentheses reduce using rule 52 (ifBody -> statement .)
    Const_KW        reduce using rule 52 (ifBody -> statement .)
    True_KW         reduce using rule 52 (ifBody -> statement .)
    False_KW        reduce using rule 52 (ifBody -> statement .)
    Other_KW        shift and go to state 179

  ! Other_KW        [ reduce using rule 52 (ifBody -> statement .) ]


state 176

    (54) ifBody -> Semicolon .
    (49) phrase -> Semicolon .

  ! reduce/reduce conflict for Closing_Bracket resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for void_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Boolean_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Character_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Integer_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for char_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for bool_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for int_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for $end resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Closing_Brace resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Semicolon resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Opening_Brace resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for If_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Till_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for ComeBack_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for GiveBack_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Continue_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Letter resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for DoubleAnd resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for DoubleOr resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Tilda resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for And resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Or resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Minus resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Times resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for QMark resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Opening_Parentheses resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Const_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for True_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for False_KW resolved using rule 49 (phrase -> Semicolon .)
  ! reduce/reduce conflict for Other_KW resolved using rule 49 (phrase -> Semicolon .)
    Closing_Bracket reduce using rule 49 (phrase -> Semicolon .)
    void_KW         reduce using rule 49 (phrase -> Semicolon .)
    Boolean_KW      reduce using rule 49 (phrase -> Semicolon .)
    Character_KW    reduce using rule 49 (phrase -> Semicolon .)
    Integer_KW      reduce using rule 49 (phrase -> Semicolon .)
    char_KW         reduce using rule 49 (phrase -> Semicolon .)
    bool_KW         reduce using rule 49 (phrase -> Semicolon .)
    int_KW          reduce using rule 49 (phrase -> Semicolon .)
    $end            reduce using rule 49 (phrase -> Semicolon .)
    Closing_Brace   reduce using rule 49 (phrase -> Semicolon .)
    Semicolon       reduce using rule 49 (phrase -> Semicolon .)
    Opening_Brace   reduce using rule 49 (phrase -> Semicolon .)
    If_KW           reduce using rule 49 (phrase -> Semicolon .)
    Till_KW         reduce using rule 49 (phrase -> Semicolon .)
    ComeBack_KW     reduce using rule 49 (phrase -> Semicolon .)
    GiveBack_KW     reduce using rule 49 (phrase -> Semicolon .)
    Continue_KW     reduce using rule 49 (phrase -> Semicolon .)
    Letter          reduce using rule 49 (phrase -> Semicolon .)
    DoubleAnd       reduce using rule 49 (phrase -> Semicolon .)
    DoubleOr        reduce using rule 49 (phrase -> Semicolon .)
    Tilda           reduce using rule 49 (phrase -> Semicolon .)
    And             reduce using rule 49 (phrase -> Semicolon .)
    Or              reduce using rule 49 (phrase -> Semicolon .)
    Minus           reduce using rule 49 (phrase -> Semicolon .)
    Times           reduce using rule 49 (phrase -> Semicolon .)
    QMark           reduce using rule 49 (phrase -> Semicolon .)
    Opening_Parentheses reduce using rule 49 (phrase -> Semicolon .)
    Const_KW        reduce using rule 49 (phrase -> Semicolon .)
    True_KW         reduce using rule 49 (phrase -> Semicolon .)
    False_KW        reduce using rule 49 (phrase -> Semicolon .)
    Other_KW        reduce using rule 49 (phrase -> Semicolon .)

  ! Closing_Bracket [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! void_KW         [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Boolean_KW      [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Character_KW    [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Integer_KW      [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! char_KW         [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! bool_KW         [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! int_KW          [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! $end            [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Closing_Brace   [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Semicolon       [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Opening_Brace   [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! If_KW           [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Till_KW         [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! ComeBack_KW     [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! GiveBack_KW     [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Continue_KW     [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Letter          [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! DoubleAnd       [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! DoubleOr        [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Tilda           [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! And             [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Or              [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Minus           [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Times           [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! QMark           [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Opening_Parentheses [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Const_KW        [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! True_KW         [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! False_KW        [ reduce using rule 54 (ifBody -> Semicolon .) ]
  ! Other_KW        [ reduce using rule 54 (ifBody -> Semicolon .) ]


state 177

    (55) iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .

    Closing_Bracket reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    void_KW         reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Boolean_KW      reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Character_KW    reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Integer_KW      reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    char_KW         reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    bool_KW         reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    int_KW          reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    $end            reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Closing_Brace   reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Semicolon       reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Opening_Brace   reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    If_KW           reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Till_KW         reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    ComeBack_KW     reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    GiveBack_KW     reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Continue_KW     reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Letter          reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    DoubleAnd       reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    DoubleOr        reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Tilda           reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    And             reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Or              reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Minus           reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Times           reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    QMark           reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Opening_Parentheses reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Const_KW        reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    True_KW         reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    False_KW        reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Other_KW        reduce using rule 55 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)


state 178

    (51) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody . ifBody Closing_Brace
    (52) ifBody -> . statement
    (53) ifBody -> . statement Other_KW statement
    (54) ifBody -> . Semicolon
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression Semicolon
    (49) phrase -> . Semicolon
    (45) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (50) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (55) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (56) returnPhrase -> . ComeBack_KW Semicolon
    (57) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (58) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (59) continue -> . Continue_KW Semicolon
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Semicolon       shift and go to state 176
    Opening_Brace   shift and go to state 108
    If_KW           shift and go to state 109
    Till_KW         shift and go to state 110
    ComeBack_KW     shift and go to state 111
    GiveBack_KW     shift and go to state 112
    Continue_KW     shift and go to state 113
    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    eachExpression                 shift and go to state 75
    ifBody                         shift and go to state 180
    statement                      shift and go to state 175
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 179

    (53) ifBody -> statement Other_KW . statement
    (39) statement -> . phrase
    (40) statement -> . compoundPhrase
    (41) statement -> . selectPhrase
    (42) statement -> . iterationPhrase
    (43) statement -> . returnPhrase
    (44) statement -> . continue
    (48) phrase -> . allExpression Semicolon
    (49) phrase -> . Semicolon
    (45) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (50) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (51) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (55) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (56) returnPhrase -> . ComeBack_KW Semicolon
    (57) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (58) returnPhrase -> . GiveBack_KW numOrLetter Semicolon
    (59) continue -> . Continue_KW Semicolon
    (60) allExpression -> . alterable mathOp allExpression
    (61) allExpression -> . alterable PP
    (62) allExpression -> . alterable MM
    (63) allExpression -> . eachExpression
    (64) allExpression -> . alterable mathOp alterable
    (99) alterable -> . Letter numOrLetter
    (100) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (101) alterable -> . alterable Letter numOrLetter
    (70) eachExpression -> . eachExpression logicOp eachExpression
    (71) eachExpression -> . eachExpression logicOp Then_KW eachExpression
    (72) eachExpression -> . logicOp eachExpression
    (73) eachExpression -> . relExpression
    (74) eachExpression -> . eachExpression logicOp Else_KW eachExpression
    (112) logicOp -> . DoubleAnd
    (113) logicOp -> . DoubleOr
    (114) logicOp -> . Tilda
    (115) logicOp -> . And
    (116) logicOp -> . Or
    (75) relExpression -> . mathEXP compareType mathEXP
    (76) relExpression -> . mathEXP
    (85) mathEXP -> . mathEXP op mathEXP
    (86) mathEXP -> . unaryExpression
    (92) unaryExpression -> . unaryop unaryExpression
    (93) unaryExpression -> . factor
    (94) unaryop -> . Minus
    (95) unaryop -> . Times
    (96) unaryop -> . QMark
    (97) factor -> . inalterable
    (98) factor -> . alterable
    (102) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (103) inalterable -> . constant
    (104) inalterable -> . Letter numOrLetter Opening_Parentheses args Closing_Parentheses
    (109) constant -> . Const_KW
    (110) constant -> . True_KW
    (111) constant -> . False_KW

    Semicolon       shift and go to state 107
    Opening_Brace   shift and go to state 108
    If_KW           shift and go to state 109
    Till_KW         shift and go to state 110
    ComeBack_KW     shift and go to state 111
    GiveBack_KW     shift and go to state 112
    Continue_KW     shift and go to state 113
    Letter          shift and go to state 76
    DoubleAnd       shift and go to state 48
    DoubleOr        shift and go to state 49
    Tilda           shift and go to state 50
    And             shift and go to state 51
    Or              shift and go to state 52
    Minus           shift and go to state 57
    Times           shift and go to state 58
    QMark           shift and go to state 59
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 64
    True_KW         shift and go to state 65
    False_KW        shift and go to state 66

    statement                      shift and go to state 181
    phrase                         shift and go to state 100
    compoundPhrase                 shift and go to state 101
    selectPhrase                   shift and go to state 102
    iterationPhrase                shift and go to state 103
    returnPhrase                   shift and go to state 104
    continue                       shift and go to state 105
    allExpression                  shift and go to state 106
    eachExpression                 shift and go to state 75
    alterable                      shift and go to state 74
    logicOp                        shift and go to state 46
    relExpression                  shift and go to state 47
    mathEXP                        shift and go to state 53
    unaryExpression                shift and go to state 54
    unaryop                        shift and go to state 55
    factor                         shift and go to state 56
    inalterable                    shift and go to state 60
    constant                       shift and go to state 62

state 180

    (51) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody . Closing_Brace

    Closing_Brace   shift and go to state 182


state 181

    (53) ifBody -> statement Other_KW statement .

    Closing_Bracket reduce using rule 53 (ifBody -> statement Other_KW statement .)
    void_KW         reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Boolean_KW      reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Character_KW    reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Integer_KW      reduce using rule 53 (ifBody -> statement Other_KW statement .)
    char_KW         reduce using rule 53 (ifBody -> statement Other_KW statement .)
    bool_KW         reduce using rule 53 (ifBody -> statement Other_KW statement .)
    int_KW          reduce using rule 53 (ifBody -> statement Other_KW statement .)
    $end            reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Closing_Brace   reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Semicolon       reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Opening_Brace   reduce using rule 53 (ifBody -> statement Other_KW statement .)
    If_KW           reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Till_KW         reduce using rule 53 (ifBody -> statement Other_KW statement .)
    ComeBack_KW     reduce using rule 53 (ifBody -> statement Other_KW statement .)
    GiveBack_KW     reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Continue_KW     reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Letter          reduce using rule 53 (ifBody -> statement Other_KW statement .)
    DoubleAnd       reduce using rule 53 (ifBody -> statement Other_KW statement .)
    DoubleOr        reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Tilda           reduce using rule 53 (ifBody -> statement Other_KW statement .)
    And             reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Or              reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Minus           reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Times           reduce using rule 53 (ifBody -> statement Other_KW statement .)
    QMark           reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Opening_Parentheses reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Const_KW        reduce using rule 53 (ifBody -> statement Other_KW statement .)
    True_KW         reduce using rule 53 (ifBody -> statement Other_KW statement .)
    False_KW        reduce using rule 53 (ifBody -> statement Other_KW statement .)
    Other_KW        reduce using rule 53 (ifBody -> statement Other_KW statement .)


state 182

    (51) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .

    Closing_Bracket reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    void_KW         reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Boolean_KW      reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Character_KW    reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Integer_KW      reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    char_KW         reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    bool_KW         reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    int_KW          reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    $end            reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Closing_Brace   reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Semicolon       reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Opening_Brace   reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    If_KW           reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Till_KW         reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    ComeBack_KW     reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    GiveBack_KW     reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Continue_KW     reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Letter          reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    DoubleAnd       reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    DoubleOr        reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Tilda           reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    And             reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Or              reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Minus           reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Times           reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    QMark           reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Opening_Parentheses reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Const_KW        reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    True_KW         reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    False_KW        reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Other_KW        reduce using rule 51 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for Opening_Parentheses in state 15 resolved as shift
WARNING: shift/reduce conflict for Opening_Parentheses in state 23 resolved as shift
WARNING: shift/reduce conflict for Opening_Bracket in state 23 resolved as shift
WARNING: shift/reduce conflict for Opening_Bracket in state 43 resolved as shift
WARNING: shift/reduce conflict for Letter in state 63 resolved as shift
WARNING: shift/reduce conflict for Opening_Bracket in state 70 resolved as shift
WARNING: shift/reduce conflict for Letter in state 76 resolved as shift
WARNING: shift/reduce conflict for DoubleAnd in state 79 resolved as shift
WARNING: shift/reduce conflict for DoubleOr in state 79 resolved as shift
WARNING: shift/reduce conflict for Tilda in state 79 resolved as shift
WARNING: shift/reduce conflict for And in state 79 resolved as shift
WARNING: shift/reduce conflict for Or in state 79 resolved as shift
WARNING: shift/reduce conflict for Letter in state 97 resolved as shift
WARNING: shift/reduce conflict for Opening_Parentheses in state 98 resolved as shift
WARNING: shift/reduce conflict for Opening_Parentheses in state 126 resolved as shift
WARNING: shift/reduce conflict for DoubleAnd in state 127 resolved as shift
WARNING: shift/reduce conflict for DoubleOr in state 127 resolved as shift
WARNING: shift/reduce conflict for Tilda in state 127 resolved as shift
WARNING: shift/reduce conflict for And in state 127 resolved as shift
WARNING: shift/reduce conflict for Or in state 127 resolved as shift
WARNING: shift/reduce conflict for Plus in state 131 resolved as shift
WARNING: shift/reduce conflict for Minus in state 131 resolved as shift
WARNING: shift/reduce conflict for Times in state 131 resolved as shift
WARNING: shift/reduce conflict for Divide in state 131 resolved as shift
WARNING: shift/reduce conflict for ModeOP in state 131 resolved as shift
WARNING: shift/reduce conflict for Semicolon in state 142 resolved as shift
WARNING: shift/reduce conflict for Letter in state 143 resolved as shift
WARNING: shift/reduce conflict for DoubleAnd in state 148 resolved as shift
WARNING: shift/reduce conflict for DoubleOr in state 148 resolved as shift
WARNING: shift/reduce conflict for Tilda in state 148 resolved as shift
WARNING: shift/reduce conflict for And in state 148 resolved as shift
WARNING: shift/reduce conflict for Or in state 148 resolved as shift
WARNING: shift/reduce conflict for DoubleAnd in state 149 resolved as shift
WARNING: shift/reduce conflict for DoubleOr in state 149 resolved as shift
WARNING: shift/reduce conflict for Tilda in state 149 resolved as shift
WARNING: shift/reduce conflict for And in state 149 resolved as shift
WARNING: shift/reduce conflict for Or in state 149 resolved as shift
WARNING: shift/reduce conflict for Semicolon in state 174 resolved as shift
WARNING: shift/reduce conflict for Opening_Brace in state 174 resolved as shift
WARNING: shift/reduce conflict for If_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for Till_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for ComeBack_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for GiveBack_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for Continue_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for Letter in state 174 resolved as shift
WARNING: shift/reduce conflict for DoubleAnd in state 174 resolved as shift
WARNING: shift/reduce conflict for DoubleOr in state 174 resolved as shift
WARNING: shift/reduce conflict for Tilda in state 174 resolved as shift
WARNING: shift/reduce conflict for And in state 174 resolved as shift
WARNING: shift/reduce conflict for Or in state 174 resolved as shift
WARNING: shift/reduce conflict for Minus in state 174 resolved as shift
WARNING: shift/reduce conflict for Times in state 174 resolved as shift
WARNING: shift/reduce conflict for QMark in state 174 resolved as shift
WARNING: shift/reduce conflict for Opening_Parentheses in state 174 resolved as shift
WARNING: shift/reduce conflict for Const_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for True_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for False_KW in state 174 resolved as shift
WARNING: shift/reduce conflict for Other_KW in state 175 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (numOrLetter -> numOrLetter)
WARNING: rejected rule (varForm -> Letter numOrLetter) in state 23
WARNING: reduce/reduce conflict in state 43 resolved using rule (numOrLetter -> numOrLetter)
WARNING: rejected rule (varForm -> Letter numOrLetter) in state 43
WARNING: reduce/reduce conflict in state 70 resolved using rule (numOrLetter -> numOrLetter)
WARNING: rejected rule (paramId -> Letter numOrLetter) in state 70
WARNING: reduce/reduce conflict in state 98 resolved using rule (numOrLetter -> numOrLetter)
WARNING: rejected rule (alterable -> Letter numOrLetter) in state 98
WARNING: reduce/reduce conflict in state 126 resolved using rule (numOrLetter -> numOrLetter)
WARNING: rejected rule (alterable -> Letter numOrLetter) in state 126
WARNING: reduce/reduce conflict in state 133 resolved using rule (numOrLetter -> numOrLetter)
WARNING: rejected rule (alterable -> alterable Letter numOrLetter) in state 133
WARNING: reduce/reduce conflict in state 143 resolved using rule (numOrLetter -> Letter)
WARNING: rejected rule (numOrLetter -> <empty>) in state 143
WARNING: reduce/reduce conflict in state 146 resolved using rule (allExpression -> alterable mathOp alterable)
WARNING: rejected rule (factor -> alterable) in state 146
WARNING: reduce/reduce conflict in state 176 resolved using rule (phrase -> Semicolon)
WARNING: rejected rule (ifBody -> Semicolon) in state 176
WARNING: Rule (varForm -> Letter numOrLetter) is never reduced
WARNING: Rule (paramId -> Letter numOrLetter) is never reduced
WARNING: Rule (alterable -> Letter numOrLetter) is never reduced
WARNING: Rule (alterable -> alterable Letter numOrLetter) is never reduced
WARNING: Rule (ifBody -> Semicolon) is never reduced
