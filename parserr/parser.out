Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    Comment
    reserved

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     list -> list declaration
Rule 3     list -> declaration
Rule 4     declaration -> function
Rule 5     declaration -> varDeclaration
Rule 6     varDeclaration -> type variableList Semicolon
Rule 7     ScopedVariableDec -> scopedSpecifier variableList Semicolon
Rule 8     variableList -> variableList Comma varInitialization
Rule 9     variableList -> varInitialization
Rule 10    varInitialization -> varForm
Rule 11    varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
Rule 12    varForm -> VarName Opening_Bracket Num Closing_Bracket
Rule 13    varForm -> VarName
Rule 14    scopedSpecifier -> Static_KW type
Rule 15    scopedSpecifier -> type
Rule 16    type -> Boolean_KW
Rule 17    type -> Character_KW
Rule 18    type -> Integer_KW
Rule 19    type -> char_KW
Rule 20    type -> bool_KW
Rule 21    type -> int_KW
Rule 22    nameOfMethod -> MethName
Rule 23    nameOfMethod -> VarName
Rule 24    function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace
Rule 25    function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement
Rule 26    parameter -> listOfParameters
Rule 27    parameter -> <empty>
Rule 28    listOfParameters -> listOfParameters Semicolon paramTypeList
Rule 29    listOfParameters -> paramTypeList
Rule 30    paramTypeList -> type paramList
Rule 31    paramList -> paramList Comma paramId
Rule 32    paramList -> paramId
Rule 33    localDeclarations -> localDeclarations ScopedVariableDec
Rule 34    localDeclarations -> <empty>
Rule 35    paramId -> VarName
Rule 36    paramId -> VarName Opening_Bracket Closing_Bracket
Rule 37    statement -> phrase
Rule 38    statement -> compoundPhrase
Rule 39    statement -> selectPhrase
Rule 40    statement -> iterationPhrase
Rule 41    statement -> returnPhrase
Rule 42    statement -> continue
Rule 43    compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace
Rule 44    statementList -> statementList statement
Rule 45    statementList -> <empty>
Rule 46    phrase -> allExpression Semicolon
Rule 47    phrase -> Semicolon
Rule 48    selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
Rule 49    selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
Rule 50    ifBody -> statement
Rule 51    ifBody -> statement Other_KW statement
Rule 52    iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
Rule 53    returnPhrase -> ComeBack_KW Semicolon
Rule 54    returnPhrase -> GiveBack_KW allExpression Semicolon
Rule 55    continue -> Continue_KW Semicolon
Rule 56    allExpression -> alterable mathOp allExpression
Rule 57    allExpression -> alterable PP
Rule 58    allExpression -> alterable MM
Rule 59    allExpression -> eachExpression
Rule 60    mathOp -> Equal
Rule 61    mathOp -> PlusEqual
Rule 62    mathOp -> MinusEqual
Rule 63    mathOp -> TimesEqual
Rule 64    mathOp -> DivideEqual
Rule 65    eachExpression -> eachExpression DoubleAnd eachExpression
Rule 66    eachExpression -> eachExpression DoubleOr eachExpression
Rule 67    eachExpression -> eachExpression Tilda eachExpression
Rule 68    eachExpression -> eachExpression And eachExpression
Rule 69    eachExpression -> eachExpression Or eachExpression
Rule 70    eachExpression -> eachExpression DoubleAnd Then_KW eachExpression
Rule 71    eachExpression -> eachExpression DoubleOr Then_KW eachExpression
Rule 72    eachExpression -> eachExpression Tilda Then_KW eachExpression
Rule 73    eachExpression -> eachExpression And Then_KW eachExpression
Rule 74    eachExpression -> eachExpression Or Then_KW eachExpression
Rule 75    eachExpression -> DoubleAnd eachExpression
Rule 76    eachExpression -> DoubleOr eachExpression
Rule 77    eachExpression -> Tilda eachExpression
Rule 78    eachExpression -> And eachExpression
Rule 79    eachExpression -> Or eachExpression
Rule 80    eachExpression -> relExpression
Rule 81    eachExpression -> eachExpression Or Else_KW eachExpression
Rule 82    eachExpression -> eachExpression And Else_KW eachExpression
Rule 83    eachExpression -> eachExpression Tilda Else_KW eachExpression
Rule 84    eachExpression -> eachExpression DoubleOr Else_KW eachExpression
Rule 85    eachExpression -> eachExpression DoubleAnd Else_KW eachExpression
Rule 86    relExpression -> mathEXP compareType mathEXP
Rule 87    relExpression -> mathEXP
Rule 88    compareType -> equal
Rule 89    compareType -> nonEqual
Rule 90    equal -> LEqual
Rule 91    equal -> GEqual
Rule 92    equal -> EEqual
Rule 93    nonEqual -> GreaterOP
Rule 94    nonEqual -> LessOP
Rule 95    nonEqual -> NonEqualOP
Rule 96    mathEXP -> mathEXP Plus mathEXP
Rule 97    mathEXP -> mathEXP Minus mathEXP
Rule 98    mathEXP -> mathEXP Times mathEXP
Rule 99    mathEXP -> mathEXP Divide mathEXP
Rule 100   mathEXP -> mathEXP ModeOP mathEXP
Rule 101   mathEXP -> unaryExpression
Rule 102   unaryExpression -> unaryop unaryExpression
Rule 103   unaryExpression -> factor
Rule 104   unaryop -> Minus
Rule 105   unaryop -> Times
Rule 106   unaryop -> QMark
Rule 107   factor -> inalterable
Rule 108   factor -> alterable
Rule 109   alterable -> VarName
Rule 110   alterable -> alterable Opening_Bracket allExpression Closing_Bracket
Rule 111   alterable -> alterable Dot VarName
Rule 112   inalterable -> Opening_Parentheses allExpression Closing_Parentheses
Rule 113   inalterable -> constant
Rule 114   inalterable -> VarName Opening_Parentheses args Closing_Parentheses
Rule 115   args -> arguments
Rule 116   args -> <empty>
Rule 117   arguments -> arguments Comma allExpression
Rule 118   arguments -> allExpression
Rule 119   constant -> Const_KW
Rule 120   constant -> True_KW
Rule 121   constant -> False_KW

Terminals, with rules where they appear

And                  : 68 73 78 82
Boolean_KW           : 16
Character_KW         : 17
Closing_Brace        : 24 43 49
Closing_Bracket      : 12 36 110
Closing_Parentheses  : 11 24 25 48 49 52 112 114
Colon                : 11
ComeBack_KW          : 53
Comma                : 8 31 117
Comment              : 
Const_KW             : 119
Continue_KW          : 55
Divide               : 99
DivideEqual          : 64
Dot                  : 111
DoubleAnd            : 65 70 75 85
DoubleOr             : 66 71 76 84
EEqual               : 92
Else_KW              : 81 82 83 84 85
Equal                : 60
False_KW             : 121
GEqual               : 91
GiveBack_KW          : 54
GreaterOP            : 93
If_KW                : 48 49
Integer_KW           : 18
LEqual               : 90
LessOP               : 94
MM                   : 58
MethName             : 22
Minus                : 97 104
MinusEqual           : 62
ModeOP               : 100
NonEqualOP           : 95
Num                  : 12
Opening_Brace        : 24 43 49
Opening_Bracket      : 12 36 110
Opening_Parentheses  : 11 24 25 48 49 52 112 114
Or                   : 69 74 79 81
Other_KW             : 51
PP                   : 57
Plus                 : 96
PlusEqual            : 61
QMark                : 106
Semicolon            : 6 7 28 46 47 53 54 55
Static_KW            : 14
Then_KW              : 70 71 72 73 74
Tilda                : 67 72 77 83
Till_KW              : 52
Times                : 98 105
TimesEqual           : 63
True_KW              : 120
VarName              : 12 13 23 25 35 36 109 111 114
bool_KW              : 20
char_KW              : 19
error                : 
int_KW               : 21
reserved             : 
void_KW              : 24

Nonterminals, with rules where they appear

ScopedVariableDec    : 33
allExpression        : 46 54 56 110 112 117 118
alterable            : 56 57 58 108 110 111
args                 : 114
arguments            : 115 117
compareType          : 86
compoundPhrase       : 38
constant             : 113
continue             : 42
declaration          : 2 3
eachExpression       : 11 48 49 52 59 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 76 77 78 79 81 81 82 82 83 83 84 84 85 85
equal                : 88
factor               : 103
function             : 4
ifBody               : 48 49 49
inalterable          : 107
iterationPhrase      : 40
list                 : 1 2
listOfParameters     : 26 28
localDeclarations    : 33 43
mathEXP              : 86 86 87 96 96 97 97 98 98 99 99 100 100
mathOp               : 56
nameOfMethod         : 24
nonEqual             : 89
paramId              : 31 32
paramList            : 30 31
paramTypeList        : 28 29
parameter            : 24 25
phrase               : 37
program              : 0
relExpression        : 80
returnPhrase         : 41
scopedSpecifier      : 7
selectPhrase         : 39
statement            : 24 25 44 50 51 51 52
statementList        : 43 44
type                 : 6 14 15 25 30
unaryExpression      : 101 102
unaryop              : 102
varDeclaration       : 5
varForm              : 10 11
varInitialization    : 8 9
variableList         : 6 7 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (2) list -> . list declaration
    (3) list -> . declaration
    (4) declaration -> . function
    (5) declaration -> . varDeclaration
    (24) function -> . void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace
    (25) function -> . type VarName Opening_Parentheses parameter Closing_Parentheses statement
    (6) varDeclaration -> . type variableList Semicolon
    (16) type -> . Boolean_KW
    (17) type -> . Character_KW
    (18) type -> . Integer_KW
    (19) type -> . char_KW
    (20) type -> . bool_KW
    (21) type -> . int_KW

    void_KW         shift and go to state 6
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    program                        shift and go to state 1
    list                           shift and go to state 2
    declaration                    shift and go to state 3
    function                       shift and go to state 4
    varDeclaration                 shift and go to state 5
    type                           shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> list .
    (2) list -> list . declaration
    (4) declaration -> . function
    (5) declaration -> . varDeclaration
    (24) function -> . void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace
    (25) function -> . type VarName Opening_Parentheses parameter Closing_Parentheses statement
    (6) varDeclaration -> . type variableList Semicolon
    (16) type -> . Boolean_KW
    (17) type -> . Character_KW
    (18) type -> . Integer_KW
    (19) type -> . char_KW
    (20) type -> . bool_KW
    (21) type -> . int_KW

    $end            reduce using rule 1 (program -> list .)
    void_KW         shift and go to state 6
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    declaration                    shift and go to state 14
    function                       shift and go to state 4
    varDeclaration                 shift and go to state 5
    type                           shift and go to state 7

state 3

    (3) list -> declaration .

    void_KW         reduce using rule 3 (list -> declaration .)
    Boolean_KW      reduce using rule 3 (list -> declaration .)
    Character_KW    reduce using rule 3 (list -> declaration .)
    Integer_KW      reduce using rule 3 (list -> declaration .)
    char_KW         reduce using rule 3 (list -> declaration .)
    bool_KW         reduce using rule 3 (list -> declaration .)
    int_KW          reduce using rule 3 (list -> declaration .)
    $end            reduce using rule 3 (list -> declaration .)


state 4

    (4) declaration -> function .

    void_KW         reduce using rule 4 (declaration -> function .)
    Boolean_KW      reduce using rule 4 (declaration -> function .)
    Character_KW    reduce using rule 4 (declaration -> function .)
    Integer_KW      reduce using rule 4 (declaration -> function .)
    char_KW         reduce using rule 4 (declaration -> function .)
    bool_KW         reduce using rule 4 (declaration -> function .)
    int_KW          reduce using rule 4 (declaration -> function .)
    $end            reduce using rule 4 (declaration -> function .)


state 5

    (5) declaration -> varDeclaration .

    void_KW         reduce using rule 5 (declaration -> varDeclaration .)
    Boolean_KW      reduce using rule 5 (declaration -> varDeclaration .)
    Character_KW    reduce using rule 5 (declaration -> varDeclaration .)
    Integer_KW      reduce using rule 5 (declaration -> varDeclaration .)
    char_KW         reduce using rule 5 (declaration -> varDeclaration .)
    bool_KW         reduce using rule 5 (declaration -> varDeclaration .)
    int_KW          reduce using rule 5 (declaration -> varDeclaration .)
    $end            reduce using rule 5 (declaration -> varDeclaration .)


state 6

    (24) function -> void_KW . nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace
    (22) nameOfMethod -> . MethName
    (23) nameOfMethod -> . VarName

    MethName        shift and go to state 16
    VarName         shift and go to state 17

    nameOfMethod                   shift and go to state 15

state 7

    (25) function -> type . VarName Opening_Parentheses parameter Closing_Parentheses statement
    (6) varDeclaration -> type . variableList Semicolon
    (8) variableList -> . variableList Comma varInitialization
    (9) variableList -> . varInitialization
    (10) varInitialization -> . varForm
    (11) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (12) varForm -> . VarName Opening_Bracket Num Closing_Bracket
    (13) varForm -> . VarName

    VarName         shift and go to state 18

    variableList                   shift and go to state 19
    varInitialization              shift and go to state 20
    varForm                        shift and go to state 21

state 8

    (16) type -> Boolean_KW .

    VarName         reduce using rule 16 (type -> Boolean_KW .)


state 9

    (17) type -> Character_KW .

    VarName         reduce using rule 17 (type -> Character_KW .)


state 10

    (18) type -> Integer_KW .

    VarName         reduce using rule 18 (type -> Integer_KW .)


state 11

    (19) type -> char_KW .

    VarName         reduce using rule 19 (type -> char_KW .)


state 12

    (20) type -> bool_KW .

    VarName         reduce using rule 20 (type -> bool_KW .)


state 13

    (21) type -> int_KW .

    VarName         reduce using rule 21 (type -> int_KW .)


state 14

    (2) list -> list declaration .

    void_KW         reduce using rule 2 (list -> list declaration .)
    Boolean_KW      reduce using rule 2 (list -> list declaration .)
    Character_KW    reduce using rule 2 (list -> list declaration .)
    Integer_KW      reduce using rule 2 (list -> list declaration .)
    char_KW         reduce using rule 2 (list -> list declaration .)
    bool_KW         reduce using rule 2 (list -> list declaration .)
    int_KW          reduce using rule 2 (list -> list declaration .)
    $end            reduce using rule 2 (list -> list declaration .)


state 15

    (24) function -> void_KW nameOfMethod . Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace

    Opening_Parentheses shift and go to state 22


state 16

    (22) nameOfMethod -> MethName .

    Opening_Parentheses reduce using rule 22 (nameOfMethod -> MethName .)


state 17

    (23) nameOfMethod -> VarName .

    Opening_Parentheses reduce using rule 23 (nameOfMethod -> VarName .)


state 18

    (25) function -> type VarName . Opening_Parentheses parameter Closing_Parentheses statement
    (12) varForm -> VarName . Opening_Bracket Num Closing_Bracket
    (13) varForm -> VarName .

    Opening_Parentheses shift and go to state 23
    Opening_Bracket shift and go to state 24
    Colon           reduce using rule 13 (varForm -> VarName .)
    Semicolon       reduce using rule 13 (varForm -> VarName .)
    Comma           reduce using rule 13 (varForm -> VarName .)


state 19

    (6) varDeclaration -> type variableList . Semicolon
    (8) variableList -> variableList . Comma varInitialization

    Semicolon       shift and go to state 25
    Comma           shift and go to state 26


state 20

    (9) variableList -> varInitialization .

    Semicolon       reduce using rule 9 (variableList -> varInitialization .)
    Comma           reduce using rule 9 (variableList -> varInitialization .)


state 21

    (10) varInitialization -> varForm .
    (11) varInitialization -> varForm . Colon Opening_Parentheses eachExpression Closing_Parentheses

    Semicolon       reduce using rule 10 (varInitialization -> varForm .)
    Comma           reduce using rule 10 (varInitialization -> varForm .)
    Colon           shift and go to state 27


state 22

    (24) function -> void_KW nameOfMethod Opening_Parentheses . parameter Closing_Parentheses Opening_Brace statement Closing_Brace
    (26) parameter -> . listOfParameters
    (27) parameter -> .
    (28) listOfParameters -> . listOfParameters Semicolon paramTypeList
    (29) listOfParameters -> . paramTypeList
    (30) paramTypeList -> . type paramList
    (16) type -> . Boolean_KW
    (17) type -> . Character_KW
    (18) type -> . Integer_KW
    (19) type -> . char_KW
    (20) type -> . bool_KW
    (21) type -> . int_KW

    Closing_Parentheses reduce using rule 27 (parameter -> .)
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    parameter                      shift and go to state 28
    listOfParameters               shift and go to state 29
    paramTypeList                  shift and go to state 30
    type                           shift and go to state 31

state 23

    (25) function -> type VarName Opening_Parentheses . parameter Closing_Parentheses statement
    (26) parameter -> . listOfParameters
    (27) parameter -> .
    (28) listOfParameters -> . listOfParameters Semicolon paramTypeList
    (29) listOfParameters -> . paramTypeList
    (30) paramTypeList -> . type paramList
    (16) type -> . Boolean_KW
    (17) type -> . Character_KW
    (18) type -> . Integer_KW
    (19) type -> . char_KW
    (20) type -> . bool_KW
    (21) type -> . int_KW

    Closing_Parentheses reduce using rule 27 (parameter -> .)
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    type                           shift and go to state 31
    parameter                      shift and go to state 32
    listOfParameters               shift and go to state 29
    paramTypeList                  shift and go to state 30

state 24

    (12) varForm -> VarName Opening_Bracket . Num Closing_Bracket

    Num             shift and go to state 33


state 25

    (6) varDeclaration -> type variableList Semicolon .

    void_KW         reduce using rule 6 (varDeclaration -> type variableList Semicolon .)
    Boolean_KW      reduce using rule 6 (varDeclaration -> type variableList Semicolon .)
    Character_KW    reduce using rule 6 (varDeclaration -> type variableList Semicolon .)
    Integer_KW      reduce using rule 6 (varDeclaration -> type variableList Semicolon .)
    char_KW         reduce using rule 6 (varDeclaration -> type variableList Semicolon .)
    bool_KW         reduce using rule 6 (varDeclaration -> type variableList Semicolon .)
    int_KW          reduce using rule 6 (varDeclaration -> type variableList Semicolon .)
    $end            reduce using rule 6 (varDeclaration -> type variableList Semicolon .)


state 26

    (8) variableList -> variableList Comma . varInitialization
    (10) varInitialization -> . varForm
    (11) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (12) varForm -> . VarName Opening_Bracket Num Closing_Bracket
    (13) varForm -> . VarName

    VarName         shift and go to state 35

    varInitialization              shift and go to state 34
    varForm                        shift and go to state 21

state 27

    (11) varInitialization -> varForm Colon . Opening_Parentheses eachExpression Closing_Parentheses

    Opening_Parentheses shift and go to state 36


state 28

    (24) function -> void_KW nameOfMethod Opening_Parentheses parameter . Closing_Parentheses Opening_Brace statement Closing_Brace

    Closing_Parentheses shift and go to state 37


state 29

    (26) parameter -> listOfParameters .
    (28) listOfParameters -> listOfParameters . Semicolon paramTypeList

    Closing_Parentheses reduce using rule 26 (parameter -> listOfParameters .)
    Semicolon       shift and go to state 38


state 30

    (29) listOfParameters -> paramTypeList .

    Semicolon       reduce using rule 29 (listOfParameters -> paramTypeList .)
    Closing_Parentheses reduce using rule 29 (listOfParameters -> paramTypeList .)


state 31

    (30) paramTypeList -> type . paramList
    (31) paramList -> . paramList Comma paramId
    (32) paramList -> . paramId
    (35) paramId -> . VarName
    (36) paramId -> . VarName Opening_Bracket Closing_Bracket

    VarName         shift and go to state 41

    paramList                      shift and go to state 39
    paramId                        shift and go to state 40

state 32

    (25) function -> type VarName Opening_Parentheses parameter . Closing_Parentheses statement

    Closing_Parentheses shift and go to state 42


state 33

    (12) varForm -> VarName Opening_Bracket Num . Closing_Bracket

    Closing_Bracket shift and go to state 43


state 34

    (8) variableList -> variableList Comma varInitialization .

    Semicolon       reduce using rule 8 (variableList -> variableList Comma varInitialization .)
    Comma           reduce using rule 8 (variableList -> variableList Comma varInitialization .)


state 35

    (12) varForm -> VarName . Opening_Bracket Num Closing_Bracket
    (13) varForm -> VarName .

    Opening_Bracket shift and go to state 24
    Colon           reduce using rule 13 (varForm -> VarName .)
    Semicolon       reduce using rule 13 (varForm -> VarName .)
    Comma           reduce using rule 13 (varForm -> VarName .)


state 36

    (11) varInitialization -> varForm Colon Opening_Parentheses . eachExpression Closing_Parentheses
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 45
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 37

    (24) function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses . Opening_Brace statement Closing_Brace

    Opening_Brace   shift and go to state 66


state 38

    (28) listOfParameters -> listOfParameters Semicolon . paramTypeList
    (30) paramTypeList -> . type paramList
    (16) type -> . Boolean_KW
    (17) type -> . Character_KW
    (18) type -> . Integer_KW
    (19) type -> . char_KW
    (20) type -> . bool_KW
    (21) type -> . int_KW

    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    paramTypeList                  shift and go to state 67
    type                           shift and go to state 31

state 39

    (30) paramTypeList -> type paramList .
    (31) paramList -> paramList . Comma paramId

    Semicolon       reduce using rule 30 (paramTypeList -> type paramList .)
    Closing_Parentheses reduce using rule 30 (paramTypeList -> type paramList .)
    Comma           shift and go to state 68


state 40

    (32) paramList -> paramId .

    Comma           reduce using rule 32 (paramList -> paramId .)
    Semicolon       reduce using rule 32 (paramList -> paramId .)
    Closing_Parentheses reduce using rule 32 (paramList -> paramId .)


state 41

    (35) paramId -> VarName .
    (36) paramId -> VarName . Opening_Bracket Closing_Bracket

    Comma           reduce using rule 35 (paramId -> VarName .)
    Semicolon       reduce using rule 35 (paramId -> VarName .)
    Closing_Parentheses reduce using rule 35 (paramId -> VarName .)
    Opening_Bracket shift and go to state 69


state 42

    (25) function -> type VarName Opening_Parentheses parameter Closing_Parentheses . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (46) phrase -> . allExpression Semicolon
    (47) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (48) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (52) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (53) returnPhrase -> . ComeBack_KW Semicolon
    (54) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Semicolon       shift and go to state 79
    Opening_Brace   shift and go to state 80
    If_KW           shift and go to state 81
    Till_KW         shift and go to state 83
    ComeBack_KW     shift and go to state 84
    GiveBack_KW     shift and go to state 85
    Continue_KW     shift and go to state 86
    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    statement                      shift and go to state 71
    phrase                         shift and go to state 72
    compoundPhrase                 shift and go to state 73
    selectPhrase                   shift and go to state 74
    iterationPhrase                shift and go to state 75
    returnPhrase                   shift and go to state 76
    continue                       shift and go to state 77
    allExpression                  shift and go to state 78
    eachExpression                 shift and go to state 82
    alterable                      shift and go to state 87
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 43

    (12) varForm -> VarName Opening_Bracket Num Closing_Bracket .

    Colon           reduce using rule 12 (varForm -> VarName Opening_Bracket Num Closing_Bracket .)
    Semicolon       reduce using rule 12 (varForm -> VarName Opening_Bracket Num Closing_Bracket .)
    Comma           reduce using rule 12 (varForm -> VarName Opening_Bracket Num Closing_Bracket .)


state 44

    (112) inalterable -> Opening_Parentheses . allExpression Closing_Parentheses
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    allExpression                  shift and go to state 88
    alterable                      shift and go to state 87
    eachExpression                 shift and go to state 82
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 45

    (11) varInitialization -> varForm Colon Opening_Parentheses eachExpression . Closing_Parentheses
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses shift and go to state 89
    DoubleAnd       shift and go to state 90
    DoubleOr        shift and go to state 91
    Tilda           shift and go to state 92
    And             shift and go to state 93
    Or              shift and go to state 94


state 46

    (75) eachExpression -> DoubleAnd . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 95
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 47

    (76) eachExpression -> DoubleOr . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 96
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 48

    (77) eachExpression -> Tilda . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 97
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 49

    (78) eachExpression -> And . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 98
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 50

    (79) eachExpression -> Or . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 99
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 51

    (80) eachExpression -> relExpression .

    Closing_Parentheses reduce using rule 80 (eachExpression -> relExpression .)
    DoubleAnd       reduce using rule 80 (eachExpression -> relExpression .)
    DoubleOr        reduce using rule 80 (eachExpression -> relExpression .)
    Tilda           reduce using rule 80 (eachExpression -> relExpression .)
    And             reduce using rule 80 (eachExpression -> relExpression .)
    Or              reduce using rule 80 (eachExpression -> relExpression .)
    Semicolon       reduce using rule 80 (eachExpression -> relExpression .)
    Closing_Bracket reduce using rule 80 (eachExpression -> relExpression .)
    Comma           reduce using rule 80 (eachExpression -> relExpression .)


state 52

    (86) relExpression -> mathEXP . compareType mathEXP
    (87) relExpression -> mathEXP .
    (96) mathEXP -> mathEXP . Plus mathEXP
    (97) mathEXP -> mathEXP . Minus mathEXP
    (98) mathEXP -> mathEXP . Times mathEXP
    (99) mathEXP -> mathEXP . Divide mathEXP
    (100) mathEXP -> mathEXP . ModeOP mathEXP
    (88) compareType -> . equal
    (89) compareType -> . nonEqual
    (90) equal -> . LEqual
    (91) equal -> . GEqual
    (92) equal -> . EEqual
    (93) nonEqual -> . GreaterOP
    (94) nonEqual -> . LessOP
    (95) nonEqual -> . NonEqualOP

    Closing_Parentheses reduce using rule 87 (relExpression -> mathEXP .)
    DoubleAnd       reduce using rule 87 (relExpression -> mathEXP .)
    DoubleOr        reduce using rule 87 (relExpression -> mathEXP .)
    Tilda           reduce using rule 87 (relExpression -> mathEXP .)
    And             reduce using rule 87 (relExpression -> mathEXP .)
    Or              reduce using rule 87 (relExpression -> mathEXP .)
    Semicolon       reduce using rule 87 (relExpression -> mathEXP .)
    Closing_Bracket reduce using rule 87 (relExpression -> mathEXP .)
    Comma           reduce using rule 87 (relExpression -> mathEXP .)
    Plus            shift and go to state 101
    Minus           shift and go to state 102
    Times           shift and go to state 103
    Divide          shift and go to state 104
    ModeOP          shift and go to state 105
    LEqual          shift and go to state 108
    GEqual          shift and go to state 109
    EEqual          shift and go to state 110
    GreaterOP       shift and go to state 111
    LessOP          shift and go to state 112
    NonEqualOP      shift and go to state 113

    compareType                    shift and go to state 100
    equal                          shift and go to state 106
    nonEqual                       shift and go to state 107

state 53

    (104) unaryop -> Minus .

    Minus           reduce using rule 104 (unaryop -> Minus .)
    Times           reduce using rule 104 (unaryop -> Minus .)
    QMark           reduce using rule 104 (unaryop -> Minus .)
    Opening_Parentheses reduce using rule 104 (unaryop -> Minus .)
    VarName         reduce using rule 104 (unaryop -> Minus .)
    Const_KW        reduce using rule 104 (unaryop -> Minus .)
    True_KW         reduce using rule 104 (unaryop -> Minus .)
    False_KW        reduce using rule 104 (unaryop -> Minus .)


state 54

    (105) unaryop -> Times .

    Minus           reduce using rule 105 (unaryop -> Times .)
    Times           reduce using rule 105 (unaryop -> Times .)
    QMark           reduce using rule 105 (unaryop -> Times .)
    Opening_Parentheses reduce using rule 105 (unaryop -> Times .)
    VarName         reduce using rule 105 (unaryop -> Times .)
    Const_KW        reduce using rule 105 (unaryop -> Times .)
    True_KW         reduce using rule 105 (unaryop -> Times .)
    False_KW        reduce using rule 105 (unaryop -> Times .)


state 55

    (101) mathEXP -> unaryExpression .

    Plus            reduce using rule 101 (mathEXP -> unaryExpression .)
    Minus           reduce using rule 101 (mathEXP -> unaryExpression .)
    Times           reduce using rule 101 (mathEXP -> unaryExpression .)
    Divide          reduce using rule 101 (mathEXP -> unaryExpression .)
    ModeOP          reduce using rule 101 (mathEXP -> unaryExpression .)
    LEqual          reduce using rule 101 (mathEXP -> unaryExpression .)
    GEqual          reduce using rule 101 (mathEXP -> unaryExpression .)
    EEqual          reduce using rule 101 (mathEXP -> unaryExpression .)
    GreaterOP       reduce using rule 101 (mathEXP -> unaryExpression .)
    LessOP          reduce using rule 101 (mathEXP -> unaryExpression .)
    NonEqualOP      reduce using rule 101 (mathEXP -> unaryExpression .)
    Closing_Parentheses reduce using rule 101 (mathEXP -> unaryExpression .)
    DoubleAnd       reduce using rule 101 (mathEXP -> unaryExpression .)
    DoubleOr        reduce using rule 101 (mathEXP -> unaryExpression .)
    Tilda           reduce using rule 101 (mathEXP -> unaryExpression .)
    And             reduce using rule 101 (mathEXP -> unaryExpression .)
    Or              reduce using rule 101 (mathEXP -> unaryExpression .)
    Semicolon       reduce using rule 101 (mathEXP -> unaryExpression .)
    Closing_Bracket reduce using rule 101 (mathEXP -> unaryExpression .)
    Comma           reduce using rule 101 (mathEXP -> unaryExpression .)


state 56

    (102) unaryExpression -> unaryop . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    unaryop                        shift and go to state 56
    unaryExpression                shift and go to state 114
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 57

    (103) unaryExpression -> factor .

    Plus            reduce using rule 103 (unaryExpression -> factor .)
    Minus           reduce using rule 103 (unaryExpression -> factor .)
    Times           reduce using rule 103 (unaryExpression -> factor .)
    Divide          reduce using rule 103 (unaryExpression -> factor .)
    ModeOP          reduce using rule 103 (unaryExpression -> factor .)
    LEqual          reduce using rule 103 (unaryExpression -> factor .)
    GEqual          reduce using rule 103 (unaryExpression -> factor .)
    EEqual          reduce using rule 103 (unaryExpression -> factor .)
    GreaterOP       reduce using rule 103 (unaryExpression -> factor .)
    LessOP          reduce using rule 103 (unaryExpression -> factor .)
    NonEqualOP      reduce using rule 103 (unaryExpression -> factor .)
    Closing_Parentheses reduce using rule 103 (unaryExpression -> factor .)
    DoubleAnd       reduce using rule 103 (unaryExpression -> factor .)
    DoubleOr        reduce using rule 103 (unaryExpression -> factor .)
    Tilda           reduce using rule 103 (unaryExpression -> factor .)
    And             reduce using rule 103 (unaryExpression -> factor .)
    Or              reduce using rule 103 (unaryExpression -> factor .)
    Semicolon       reduce using rule 103 (unaryExpression -> factor .)
    Closing_Bracket reduce using rule 103 (unaryExpression -> factor .)
    Comma           reduce using rule 103 (unaryExpression -> factor .)


state 58

    (106) unaryop -> QMark .

    Minus           reduce using rule 106 (unaryop -> QMark .)
    Times           reduce using rule 106 (unaryop -> QMark .)
    QMark           reduce using rule 106 (unaryop -> QMark .)
    Opening_Parentheses reduce using rule 106 (unaryop -> QMark .)
    VarName         reduce using rule 106 (unaryop -> QMark .)
    Const_KW        reduce using rule 106 (unaryop -> QMark .)
    True_KW         reduce using rule 106 (unaryop -> QMark .)
    False_KW        reduce using rule 106 (unaryop -> QMark .)


state 59

    (107) factor -> inalterable .

    Plus            reduce using rule 107 (factor -> inalterable .)
    Minus           reduce using rule 107 (factor -> inalterable .)
    Times           reduce using rule 107 (factor -> inalterable .)
    Divide          reduce using rule 107 (factor -> inalterable .)
    ModeOP          reduce using rule 107 (factor -> inalterable .)
    LEqual          reduce using rule 107 (factor -> inalterable .)
    GEqual          reduce using rule 107 (factor -> inalterable .)
    EEqual          reduce using rule 107 (factor -> inalterable .)
    GreaterOP       reduce using rule 107 (factor -> inalterable .)
    LessOP          reduce using rule 107 (factor -> inalterable .)
    NonEqualOP      reduce using rule 107 (factor -> inalterable .)
    Closing_Parentheses reduce using rule 107 (factor -> inalterable .)
    DoubleAnd       reduce using rule 107 (factor -> inalterable .)
    DoubleOr        reduce using rule 107 (factor -> inalterable .)
    Tilda           reduce using rule 107 (factor -> inalterable .)
    And             reduce using rule 107 (factor -> inalterable .)
    Or              reduce using rule 107 (factor -> inalterable .)
    Semicolon       reduce using rule 107 (factor -> inalterable .)
    Closing_Bracket reduce using rule 107 (factor -> inalterable .)
    Comma           reduce using rule 107 (factor -> inalterable .)


state 60

    (108) factor -> alterable .
    (110) alterable -> alterable . Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> alterable . Dot VarName

    Plus            reduce using rule 108 (factor -> alterable .)
    Minus           reduce using rule 108 (factor -> alterable .)
    Times           reduce using rule 108 (factor -> alterable .)
    Divide          reduce using rule 108 (factor -> alterable .)
    ModeOP          reduce using rule 108 (factor -> alterable .)
    LEqual          reduce using rule 108 (factor -> alterable .)
    GEqual          reduce using rule 108 (factor -> alterable .)
    EEqual          reduce using rule 108 (factor -> alterable .)
    GreaterOP       reduce using rule 108 (factor -> alterable .)
    LessOP          reduce using rule 108 (factor -> alterable .)
    NonEqualOP      reduce using rule 108 (factor -> alterable .)
    Closing_Parentheses reduce using rule 108 (factor -> alterable .)
    DoubleAnd       reduce using rule 108 (factor -> alterable .)
    DoubleOr        reduce using rule 108 (factor -> alterable .)
    Tilda           reduce using rule 108 (factor -> alterable .)
    And             reduce using rule 108 (factor -> alterable .)
    Or              reduce using rule 108 (factor -> alterable .)
    Semicolon       reduce using rule 108 (factor -> alterable .)
    Closing_Bracket reduce using rule 108 (factor -> alterable .)
    Comma           reduce using rule 108 (factor -> alterable .)
    Opening_Bracket shift and go to state 115
    Dot             shift and go to state 116


state 61

    (113) inalterable -> constant .

    Plus            reduce using rule 113 (inalterable -> constant .)
    Minus           reduce using rule 113 (inalterable -> constant .)
    Times           reduce using rule 113 (inalterable -> constant .)
    Divide          reduce using rule 113 (inalterable -> constant .)
    ModeOP          reduce using rule 113 (inalterable -> constant .)
    LEqual          reduce using rule 113 (inalterable -> constant .)
    GEqual          reduce using rule 113 (inalterable -> constant .)
    EEqual          reduce using rule 113 (inalterable -> constant .)
    GreaterOP       reduce using rule 113 (inalterable -> constant .)
    LessOP          reduce using rule 113 (inalterable -> constant .)
    NonEqualOP      reduce using rule 113 (inalterable -> constant .)
    Closing_Parentheses reduce using rule 113 (inalterable -> constant .)
    DoubleAnd       reduce using rule 113 (inalterable -> constant .)
    DoubleOr        reduce using rule 113 (inalterable -> constant .)
    Tilda           reduce using rule 113 (inalterable -> constant .)
    And             reduce using rule 113 (inalterable -> constant .)
    Or              reduce using rule 113 (inalterable -> constant .)
    Semicolon       reduce using rule 113 (inalterable -> constant .)
    Closing_Bracket reduce using rule 113 (inalterable -> constant .)
    Comma           reduce using rule 113 (inalterable -> constant .)


state 62

    (114) inalterable -> VarName . Opening_Parentheses args Closing_Parentheses
    (109) alterable -> VarName .

    Opening_Parentheses shift and go to state 117
    Opening_Bracket reduce using rule 109 (alterable -> VarName .)
    Dot             reduce using rule 109 (alterable -> VarName .)
    Plus            reduce using rule 109 (alterable -> VarName .)
    Minus           reduce using rule 109 (alterable -> VarName .)
    Times           reduce using rule 109 (alterable -> VarName .)
    Divide          reduce using rule 109 (alterable -> VarName .)
    ModeOP          reduce using rule 109 (alterable -> VarName .)
    LEqual          reduce using rule 109 (alterable -> VarName .)
    GEqual          reduce using rule 109 (alterable -> VarName .)
    EEqual          reduce using rule 109 (alterable -> VarName .)
    GreaterOP       reduce using rule 109 (alterable -> VarName .)
    LessOP          reduce using rule 109 (alterable -> VarName .)
    NonEqualOP      reduce using rule 109 (alterable -> VarName .)
    Closing_Parentheses reduce using rule 109 (alterable -> VarName .)
    DoubleAnd       reduce using rule 109 (alterable -> VarName .)
    DoubleOr        reduce using rule 109 (alterable -> VarName .)
    Tilda           reduce using rule 109 (alterable -> VarName .)
    And             reduce using rule 109 (alterable -> VarName .)
    Or              reduce using rule 109 (alterable -> VarName .)
    Semicolon       reduce using rule 109 (alterable -> VarName .)
    Closing_Bracket reduce using rule 109 (alterable -> VarName .)
    Comma           reduce using rule 109 (alterable -> VarName .)


state 63

    (119) constant -> Const_KW .

    Plus            reduce using rule 119 (constant -> Const_KW .)
    Minus           reduce using rule 119 (constant -> Const_KW .)
    Times           reduce using rule 119 (constant -> Const_KW .)
    Divide          reduce using rule 119 (constant -> Const_KW .)
    ModeOP          reduce using rule 119 (constant -> Const_KW .)
    LEqual          reduce using rule 119 (constant -> Const_KW .)
    GEqual          reduce using rule 119 (constant -> Const_KW .)
    EEqual          reduce using rule 119 (constant -> Const_KW .)
    GreaterOP       reduce using rule 119 (constant -> Const_KW .)
    LessOP          reduce using rule 119 (constant -> Const_KW .)
    NonEqualOP      reduce using rule 119 (constant -> Const_KW .)
    Closing_Parentheses reduce using rule 119 (constant -> Const_KW .)
    DoubleAnd       reduce using rule 119 (constant -> Const_KW .)
    DoubleOr        reduce using rule 119 (constant -> Const_KW .)
    Tilda           reduce using rule 119 (constant -> Const_KW .)
    And             reduce using rule 119 (constant -> Const_KW .)
    Or              reduce using rule 119 (constant -> Const_KW .)
    Semicolon       reduce using rule 119 (constant -> Const_KW .)
    Closing_Bracket reduce using rule 119 (constant -> Const_KW .)
    Comma           reduce using rule 119 (constant -> Const_KW .)


state 64

    (120) constant -> True_KW .

    Plus            reduce using rule 120 (constant -> True_KW .)
    Minus           reduce using rule 120 (constant -> True_KW .)
    Times           reduce using rule 120 (constant -> True_KW .)
    Divide          reduce using rule 120 (constant -> True_KW .)
    ModeOP          reduce using rule 120 (constant -> True_KW .)
    LEqual          reduce using rule 120 (constant -> True_KW .)
    GEqual          reduce using rule 120 (constant -> True_KW .)
    EEqual          reduce using rule 120 (constant -> True_KW .)
    GreaterOP       reduce using rule 120 (constant -> True_KW .)
    LessOP          reduce using rule 120 (constant -> True_KW .)
    NonEqualOP      reduce using rule 120 (constant -> True_KW .)
    Closing_Parentheses reduce using rule 120 (constant -> True_KW .)
    DoubleAnd       reduce using rule 120 (constant -> True_KW .)
    DoubleOr        reduce using rule 120 (constant -> True_KW .)
    Tilda           reduce using rule 120 (constant -> True_KW .)
    And             reduce using rule 120 (constant -> True_KW .)
    Or              reduce using rule 120 (constant -> True_KW .)
    Semicolon       reduce using rule 120 (constant -> True_KW .)
    Closing_Bracket reduce using rule 120 (constant -> True_KW .)
    Comma           reduce using rule 120 (constant -> True_KW .)


state 65

    (121) constant -> False_KW .

    Plus            reduce using rule 121 (constant -> False_KW .)
    Minus           reduce using rule 121 (constant -> False_KW .)
    Times           reduce using rule 121 (constant -> False_KW .)
    Divide          reduce using rule 121 (constant -> False_KW .)
    ModeOP          reduce using rule 121 (constant -> False_KW .)
    LEqual          reduce using rule 121 (constant -> False_KW .)
    GEqual          reduce using rule 121 (constant -> False_KW .)
    EEqual          reduce using rule 121 (constant -> False_KW .)
    GreaterOP       reduce using rule 121 (constant -> False_KW .)
    LessOP          reduce using rule 121 (constant -> False_KW .)
    NonEqualOP      reduce using rule 121 (constant -> False_KW .)
    Closing_Parentheses reduce using rule 121 (constant -> False_KW .)
    DoubleAnd       reduce using rule 121 (constant -> False_KW .)
    DoubleOr        reduce using rule 121 (constant -> False_KW .)
    Tilda           reduce using rule 121 (constant -> False_KW .)
    And             reduce using rule 121 (constant -> False_KW .)
    Or              reduce using rule 121 (constant -> False_KW .)
    Semicolon       reduce using rule 121 (constant -> False_KW .)
    Closing_Bracket reduce using rule 121 (constant -> False_KW .)
    Comma           reduce using rule 121 (constant -> False_KW .)


state 66

    (24) function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace . statement Closing_Brace
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (46) phrase -> . allExpression Semicolon
    (47) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (48) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (52) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (53) returnPhrase -> . ComeBack_KW Semicolon
    (54) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Semicolon       shift and go to state 79
    Opening_Brace   shift and go to state 80
    If_KW           shift and go to state 81
    Till_KW         shift and go to state 83
    ComeBack_KW     shift and go to state 84
    GiveBack_KW     shift and go to state 85
    Continue_KW     shift and go to state 86
    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    statement                      shift and go to state 118
    phrase                         shift and go to state 72
    compoundPhrase                 shift and go to state 73
    selectPhrase                   shift and go to state 74
    iterationPhrase                shift and go to state 75
    returnPhrase                   shift and go to state 76
    continue                       shift and go to state 77
    allExpression                  shift and go to state 78
    eachExpression                 shift and go to state 82
    alterable                      shift and go to state 87
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 67

    (28) listOfParameters -> listOfParameters Semicolon paramTypeList .

    Semicolon       reduce using rule 28 (listOfParameters -> listOfParameters Semicolon paramTypeList .)
    Closing_Parentheses reduce using rule 28 (listOfParameters -> listOfParameters Semicolon paramTypeList .)


state 68

    (31) paramList -> paramList Comma . paramId
    (35) paramId -> . VarName
    (36) paramId -> . VarName Opening_Bracket Closing_Bracket

    VarName         shift and go to state 41

    paramId                        shift and go to state 119

state 69

    (36) paramId -> VarName Opening_Bracket . Closing_Bracket

    Closing_Bracket shift and go to state 120


state 70

    (109) alterable -> VarName .
    (114) inalterable -> VarName . Opening_Parentheses args Closing_Parentheses

    PP              reduce using rule 109 (alterable -> VarName .)
    MM              reduce using rule 109 (alterable -> VarName .)
    Opening_Bracket reduce using rule 109 (alterable -> VarName .)
    Dot             reduce using rule 109 (alterable -> VarName .)
    Equal           reduce using rule 109 (alterable -> VarName .)
    PlusEqual       reduce using rule 109 (alterable -> VarName .)
    MinusEqual      reduce using rule 109 (alterable -> VarName .)
    TimesEqual      reduce using rule 109 (alterable -> VarName .)
    DivideEqual     reduce using rule 109 (alterable -> VarName .)
    Plus            reduce using rule 109 (alterable -> VarName .)
    Minus           reduce using rule 109 (alterable -> VarName .)
    Times           reduce using rule 109 (alterable -> VarName .)
    Divide          reduce using rule 109 (alterable -> VarName .)
    ModeOP          reduce using rule 109 (alterable -> VarName .)
    LEqual          reduce using rule 109 (alterable -> VarName .)
    GEqual          reduce using rule 109 (alterable -> VarName .)
    EEqual          reduce using rule 109 (alterable -> VarName .)
    GreaterOP       reduce using rule 109 (alterable -> VarName .)
    LessOP          reduce using rule 109 (alterable -> VarName .)
    NonEqualOP      reduce using rule 109 (alterable -> VarName .)
    DoubleAnd       reduce using rule 109 (alterable -> VarName .)
    DoubleOr        reduce using rule 109 (alterable -> VarName .)
    Tilda           reduce using rule 109 (alterable -> VarName .)
    And             reduce using rule 109 (alterable -> VarName .)
    Or              reduce using rule 109 (alterable -> VarName .)
    Semicolon       reduce using rule 109 (alterable -> VarName .)
    Closing_Parentheses reduce using rule 109 (alterable -> VarName .)
    Closing_Bracket reduce using rule 109 (alterable -> VarName .)
    Comma           reduce using rule 109 (alterable -> VarName .)
    Opening_Parentheses shift and go to state 117


state 71

    (25) function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement .

    void_KW         reduce using rule 25 (function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement .)
    Boolean_KW      reduce using rule 25 (function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement .)
    Character_KW    reduce using rule 25 (function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement .)
    Integer_KW      reduce using rule 25 (function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement .)
    char_KW         reduce using rule 25 (function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement .)
    bool_KW         reduce using rule 25 (function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement .)
    int_KW          reduce using rule 25 (function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement .)
    $end            reduce using rule 25 (function -> type VarName Opening_Parentheses parameter Closing_Parentheses statement .)


state 72

    (37) statement -> phrase .

    void_KW         reduce using rule 37 (statement -> phrase .)
    Boolean_KW      reduce using rule 37 (statement -> phrase .)
    Character_KW    reduce using rule 37 (statement -> phrase .)
    Integer_KW      reduce using rule 37 (statement -> phrase .)
    char_KW         reduce using rule 37 (statement -> phrase .)
    bool_KW         reduce using rule 37 (statement -> phrase .)
    int_KW          reduce using rule 37 (statement -> phrase .)
    $end            reduce using rule 37 (statement -> phrase .)
    Closing_Brace   reduce using rule 37 (statement -> phrase .)
    Semicolon       reduce using rule 37 (statement -> phrase .)
    Opening_Brace   reduce using rule 37 (statement -> phrase .)
    If_KW           reduce using rule 37 (statement -> phrase .)
    Till_KW         reduce using rule 37 (statement -> phrase .)
    ComeBack_KW     reduce using rule 37 (statement -> phrase .)
    GiveBack_KW     reduce using rule 37 (statement -> phrase .)
    Continue_KW     reduce using rule 37 (statement -> phrase .)
    VarName         reduce using rule 37 (statement -> phrase .)
    DoubleAnd       reduce using rule 37 (statement -> phrase .)
    DoubleOr        reduce using rule 37 (statement -> phrase .)
    Tilda           reduce using rule 37 (statement -> phrase .)
    And             reduce using rule 37 (statement -> phrase .)
    Or              reduce using rule 37 (statement -> phrase .)
    Minus           reduce using rule 37 (statement -> phrase .)
    Times           reduce using rule 37 (statement -> phrase .)
    QMark           reduce using rule 37 (statement -> phrase .)
    Opening_Parentheses reduce using rule 37 (statement -> phrase .)
    Const_KW        reduce using rule 37 (statement -> phrase .)
    True_KW         reduce using rule 37 (statement -> phrase .)
    False_KW        reduce using rule 37 (statement -> phrase .)
    Other_KW        reduce using rule 37 (statement -> phrase .)


state 73

    (38) statement -> compoundPhrase .

    void_KW         reduce using rule 38 (statement -> compoundPhrase .)
    Boolean_KW      reduce using rule 38 (statement -> compoundPhrase .)
    Character_KW    reduce using rule 38 (statement -> compoundPhrase .)
    Integer_KW      reduce using rule 38 (statement -> compoundPhrase .)
    char_KW         reduce using rule 38 (statement -> compoundPhrase .)
    bool_KW         reduce using rule 38 (statement -> compoundPhrase .)
    int_KW          reduce using rule 38 (statement -> compoundPhrase .)
    $end            reduce using rule 38 (statement -> compoundPhrase .)
    Closing_Brace   reduce using rule 38 (statement -> compoundPhrase .)
    Semicolon       reduce using rule 38 (statement -> compoundPhrase .)
    Opening_Brace   reduce using rule 38 (statement -> compoundPhrase .)
    If_KW           reduce using rule 38 (statement -> compoundPhrase .)
    Till_KW         reduce using rule 38 (statement -> compoundPhrase .)
    ComeBack_KW     reduce using rule 38 (statement -> compoundPhrase .)
    GiveBack_KW     reduce using rule 38 (statement -> compoundPhrase .)
    Continue_KW     reduce using rule 38 (statement -> compoundPhrase .)
    VarName         reduce using rule 38 (statement -> compoundPhrase .)
    DoubleAnd       reduce using rule 38 (statement -> compoundPhrase .)
    DoubleOr        reduce using rule 38 (statement -> compoundPhrase .)
    Tilda           reduce using rule 38 (statement -> compoundPhrase .)
    And             reduce using rule 38 (statement -> compoundPhrase .)
    Or              reduce using rule 38 (statement -> compoundPhrase .)
    Minus           reduce using rule 38 (statement -> compoundPhrase .)
    Times           reduce using rule 38 (statement -> compoundPhrase .)
    QMark           reduce using rule 38 (statement -> compoundPhrase .)
    Opening_Parentheses reduce using rule 38 (statement -> compoundPhrase .)
    Const_KW        reduce using rule 38 (statement -> compoundPhrase .)
    True_KW         reduce using rule 38 (statement -> compoundPhrase .)
    False_KW        reduce using rule 38 (statement -> compoundPhrase .)
    Other_KW        reduce using rule 38 (statement -> compoundPhrase .)


state 74

    (39) statement -> selectPhrase .

    void_KW         reduce using rule 39 (statement -> selectPhrase .)
    Boolean_KW      reduce using rule 39 (statement -> selectPhrase .)
    Character_KW    reduce using rule 39 (statement -> selectPhrase .)
    Integer_KW      reduce using rule 39 (statement -> selectPhrase .)
    char_KW         reduce using rule 39 (statement -> selectPhrase .)
    bool_KW         reduce using rule 39 (statement -> selectPhrase .)
    int_KW          reduce using rule 39 (statement -> selectPhrase .)
    $end            reduce using rule 39 (statement -> selectPhrase .)
    Closing_Brace   reduce using rule 39 (statement -> selectPhrase .)
    Semicolon       reduce using rule 39 (statement -> selectPhrase .)
    Opening_Brace   reduce using rule 39 (statement -> selectPhrase .)
    If_KW           reduce using rule 39 (statement -> selectPhrase .)
    Till_KW         reduce using rule 39 (statement -> selectPhrase .)
    ComeBack_KW     reduce using rule 39 (statement -> selectPhrase .)
    GiveBack_KW     reduce using rule 39 (statement -> selectPhrase .)
    Continue_KW     reduce using rule 39 (statement -> selectPhrase .)
    VarName         reduce using rule 39 (statement -> selectPhrase .)
    DoubleAnd       reduce using rule 39 (statement -> selectPhrase .)
    DoubleOr        reduce using rule 39 (statement -> selectPhrase .)
    Tilda           reduce using rule 39 (statement -> selectPhrase .)
    And             reduce using rule 39 (statement -> selectPhrase .)
    Or              reduce using rule 39 (statement -> selectPhrase .)
    Minus           reduce using rule 39 (statement -> selectPhrase .)
    Times           reduce using rule 39 (statement -> selectPhrase .)
    QMark           reduce using rule 39 (statement -> selectPhrase .)
    Opening_Parentheses reduce using rule 39 (statement -> selectPhrase .)
    Const_KW        reduce using rule 39 (statement -> selectPhrase .)
    True_KW         reduce using rule 39 (statement -> selectPhrase .)
    False_KW        reduce using rule 39 (statement -> selectPhrase .)
    Other_KW        reduce using rule 39 (statement -> selectPhrase .)


state 75

    (40) statement -> iterationPhrase .

    void_KW         reduce using rule 40 (statement -> iterationPhrase .)
    Boolean_KW      reduce using rule 40 (statement -> iterationPhrase .)
    Character_KW    reduce using rule 40 (statement -> iterationPhrase .)
    Integer_KW      reduce using rule 40 (statement -> iterationPhrase .)
    char_KW         reduce using rule 40 (statement -> iterationPhrase .)
    bool_KW         reduce using rule 40 (statement -> iterationPhrase .)
    int_KW          reduce using rule 40 (statement -> iterationPhrase .)
    $end            reduce using rule 40 (statement -> iterationPhrase .)
    Closing_Brace   reduce using rule 40 (statement -> iterationPhrase .)
    Semicolon       reduce using rule 40 (statement -> iterationPhrase .)
    Opening_Brace   reduce using rule 40 (statement -> iterationPhrase .)
    If_KW           reduce using rule 40 (statement -> iterationPhrase .)
    Till_KW         reduce using rule 40 (statement -> iterationPhrase .)
    ComeBack_KW     reduce using rule 40 (statement -> iterationPhrase .)
    GiveBack_KW     reduce using rule 40 (statement -> iterationPhrase .)
    Continue_KW     reduce using rule 40 (statement -> iterationPhrase .)
    VarName         reduce using rule 40 (statement -> iterationPhrase .)
    DoubleAnd       reduce using rule 40 (statement -> iterationPhrase .)
    DoubleOr        reduce using rule 40 (statement -> iterationPhrase .)
    Tilda           reduce using rule 40 (statement -> iterationPhrase .)
    And             reduce using rule 40 (statement -> iterationPhrase .)
    Or              reduce using rule 40 (statement -> iterationPhrase .)
    Minus           reduce using rule 40 (statement -> iterationPhrase .)
    Times           reduce using rule 40 (statement -> iterationPhrase .)
    QMark           reduce using rule 40 (statement -> iterationPhrase .)
    Opening_Parentheses reduce using rule 40 (statement -> iterationPhrase .)
    Const_KW        reduce using rule 40 (statement -> iterationPhrase .)
    True_KW         reduce using rule 40 (statement -> iterationPhrase .)
    False_KW        reduce using rule 40 (statement -> iterationPhrase .)
    Other_KW        reduce using rule 40 (statement -> iterationPhrase .)


state 76

    (41) statement -> returnPhrase .

    void_KW         reduce using rule 41 (statement -> returnPhrase .)
    Boolean_KW      reduce using rule 41 (statement -> returnPhrase .)
    Character_KW    reduce using rule 41 (statement -> returnPhrase .)
    Integer_KW      reduce using rule 41 (statement -> returnPhrase .)
    char_KW         reduce using rule 41 (statement -> returnPhrase .)
    bool_KW         reduce using rule 41 (statement -> returnPhrase .)
    int_KW          reduce using rule 41 (statement -> returnPhrase .)
    $end            reduce using rule 41 (statement -> returnPhrase .)
    Closing_Brace   reduce using rule 41 (statement -> returnPhrase .)
    Semicolon       reduce using rule 41 (statement -> returnPhrase .)
    Opening_Brace   reduce using rule 41 (statement -> returnPhrase .)
    If_KW           reduce using rule 41 (statement -> returnPhrase .)
    Till_KW         reduce using rule 41 (statement -> returnPhrase .)
    ComeBack_KW     reduce using rule 41 (statement -> returnPhrase .)
    GiveBack_KW     reduce using rule 41 (statement -> returnPhrase .)
    Continue_KW     reduce using rule 41 (statement -> returnPhrase .)
    VarName         reduce using rule 41 (statement -> returnPhrase .)
    DoubleAnd       reduce using rule 41 (statement -> returnPhrase .)
    DoubleOr        reduce using rule 41 (statement -> returnPhrase .)
    Tilda           reduce using rule 41 (statement -> returnPhrase .)
    And             reduce using rule 41 (statement -> returnPhrase .)
    Or              reduce using rule 41 (statement -> returnPhrase .)
    Minus           reduce using rule 41 (statement -> returnPhrase .)
    Times           reduce using rule 41 (statement -> returnPhrase .)
    QMark           reduce using rule 41 (statement -> returnPhrase .)
    Opening_Parentheses reduce using rule 41 (statement -> returnPhrase .)
    Const_KW        reduce using rule 41 (statement -> returnPhrase .)
    True_KW         reduce using rule 41 (statement -> returnPhrase .)
    False_KW        reduce using rule 41 (statement -> returnPhrase .)
    Other_KW        reduce using rule 41 (statement -> returnPhrase .)


state 77

    (42) statement -> continue .

    void_KW         reduce using rule 42 (statement -> continue .)
    Boolean_KW      reduce using rule 42 (statement -> continue .)
    Character_KW    reduce using rule 42 (statement -> continue .)
    Integer_KW      reduce using rule 42 (statement -> continue .)
    char_KW         reduce using rule 42 (statement -> continue .)
    bool_KW         reduce using rule 42 (statement -> continue .)
    int_KW          reduce using rule 42 (statement -> continue .)
    $end            reduce using rule 42 (statement -> continue .)
    Closing_Brace   reduce using rule 42 (statement -> continue .)
    Semicolon       reduce using rule 42 (statement -> continue .)
    Opening_Brace   reduce using rule 42 (statement -> continue .)
    If_KW           reduce using rule 42 (statement -> continue .)
    Till_KW         reduce using rule 42 (statement -> continue .)
    ComeBack_KW     reduce using rule 42 (statement -> continue .)
    GiveBack_KW     reduce using rule 42 (statement -> continue .)
    Continue_KW     reduce using rule 42 (statement -> continue .)
    VarName         reduce using rule 42 (statement -> continue .)
    DoubleAnd       reduce using rule 42 (statement -> continue .)
    DoubleOr        reduce using rule 42 (statement -> continue .)
    Tilda           reduce using rule 42 (statement -> continue .)
    And             reduce using rule 42 (statement -> continue .)
    Or              reduce using rule 42 (statement -> continue .)
    Minus           reduce using rule 42 (statement -> continue .)
    Times           reduce using rule 42 (statement -> continue .)
    QMark           reduce using rule 42 (statement -> continue .)
    Opening_Parentheses reduce using rule 42 (statement -> continue .)
    Const_KW        reduce using rule 42 (statement -> continue .)
    True_KW         reduce using rule 42 (statement -> continue .)
    False_KW        reduce using rule 42 (statement -> continue .)
    Other_KW        reduce using rule 42 (statement -> continue .)


state 78

    (46) phrase -> allExpression . Semicolon

    Semicolon       shift and go to state 121


state 79

    (47) phrase -> Semicolon .

    void_KW         reduce using rule 47 (phrase -> Semicolon .)
    Boolean_KW      reduce using rule 47 (phrase -> Semicolon .)
    Character_KW    reduce using rule 47 (phrase -> Semicolon .)
    Integer_KW      reduce using rule 47 (phrase -> Semicolon .)
    char_KW         reduce using rule 47 (phrase -> Semicolon .)
    bool_KW         reduce using rule 47 (phrase -> Semicolon .)
    int_KW          reduce using rule 47 (phrase -> Semicolon .)
    $end            reduce using rule 47 (phrase -> Semicolon .)
    Closing_Brace   reduce using rule 47 (phrase -> Semicolon .)
    Semicolon       reduce using rule 47 (phrase -> Semicolon .)
    Opening_Brace   reduce using rule 47 (phrase -> Semicolon .)
    If_KW           reduce using rule 47 (phrase -> Semicolon .)
    Till_KW         reduce using rule 47 (phrase -> Semicolon .)
    ComeBack_KW     reduce using rule 47 (phrase -> Semicolon .)
    GiveBack_KW     reduce using rule 47 (phrase -> Semicolon .)
    Continue_KW     reduce using rule 47 (phrase -> Semicolon .)
    VarName         reduce using rule 47 (phrase -> Semicolon .)
    DoubleAnd       reduce using rule 47 (phrase -> Semicolon .)
    DoubleOr        reduce using rule 47 (phrase -> Semicolon .)
    Tilda           reduce using rule 47 (phrase -> Semicolon .)
    And             reduce using rule 47 (phrase -> Semicolon .)
    Or              reduce using rule 47 (phrase -> Semicolon .)
    Minus           reduce using rule 47 (phrase -> Semicolon .)
    Times           reduce using rule 47 (phrase -> Semicolon .)
    QMark           reduce using rule 47 (phrase -> Semicolon .)
    Opening_Parentheses reduce using rule 47 (phrase -> Semicolon .)
    Const_KW        reduce using rule 47 (phrase -> Semicolon .)
    True_KW         reduce using rule 47 (phrase -> Semicolon .)
    False_KW        reduce using rule 47 (phrase -> Semicolon .)
    Other_KW        reduce using rule 47 (phrase -> Semicolon .)


state 80

    (43) compoundPhrase -> Opening_Brace . localDeclarations statementList Closing_Brace
    (33) localDeclarations -> . localDeclarations ScopedVariableDec
    (34) localDeclarations -> .

    Static_KW       reduce using rule 34 (localDeclarations -> .)
    Boolean_KW      reduce using rule 34 (localDeclarations -> .)
    Character_KW    reduce using rule 34 (localDeclarations -> .)
    Integer_KW      reduce using rule 34 (localDeclarations -> .)
    char_KW         reduce using rule 34 (localDeclarations -> .)
    bool_KW         reduce using rule 34 (localDeclarations -> .)
    int_KW          reduce using rule 34 (localDeclarations -> .)
    Closing_Brace   reduce using rule 34 (localDeclarations -> .)
    Semicolon       reduce using rule 34 (localDeclarations -> .)
    Opening_Brace   reduce using rule 34 (localDeclarations -> .)
    If_KW           reduce using rule 34 (localDeclarations -> .)
    Till_KW         reduce using rule 34 (localDeclarations -> .)
    ComeBack_KW     reduce using rule 34 (localDeclarations -> .)
    GiveBack_KW     reduce using rule 34 (localDeclarations -> .)
    Continue_KW     reduce using rule 34 (localDeclarations -> .)
    VarName         reduce using rule 34 (localDeclarations -> .)
    DoubleAnd       reduce using rule 34 (localDeclarations -> .)
    DoubleOr        reduce using rule 34 (localDeclarations -> .)
    Tilda           reduce using rule 34 (localDeclarations -> .)
    And             reduce using rule 34 (localDeclarations -> .)
    Or              reduce using rule 34 (localDeclarations -> .)
    Minus           reduce using rule 34 (localDeclarations -> .)
    Times           reduce using rule 34 (localDeclarations -> .)
    QMark           reduce using rule 34 (localDeclarations -> .)
    Opening_Parentheses reduce using rule 34 (localDeclarations -> .)
    Const_KW        reduce using rule 34 (localDeclarations -> .)
    True_KW         reduce using rule 34 (localDeclarations -> .)
    False_KW        reduce using rule 34 (localDeclarations -> .)

    localDeclarations              shift and go to state 122

state 81

    (48) selectPhrase -> If_KW . Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> If_KW . Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace

    Opening_Parentheses shift and go to state 123


state 82

    (59) allExpression -> eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Semicolon       reduce using rule 59 (allExpression -> eachExpression .)
    Closing_Parentheses reduce using rule 59 (allExpression -> eachExpression .)
    Closing_Bracket reduce using rule 59 (allExpression -> eachExpression .)
    Comma           reduce using rule 59 (allExpression -> eachExpression .)
    DoubleAnd       shift and go to state 90
    DoubleOr        shift and go to state 91
    Tilda           shift and go to state 92
    And             shift and go to state 93
    Or              shift and go to state 94


state 83

    (52) iterationPhrase -> Till_KW . Opening_Parentheses eachExpression Closing_Parentheses statement

    Opening_Parentheses shift and go to state 124


state 84

    (53) returnPhrase -> ComeBack_KW . Semicolon

    Semicolon       shift and go to state 125


state 85

    (54) returnPhrase -> GiveBack_KW . allExpression Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    allExpression                  shift and go to state 126
    alterable                      shift and go to state 87
    eachExpression                 shift and go to state 82
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 86

    (55) continue -> Continue_KW . Semicolon

    Semicolon       shift and go to state 127


state 87

    (56) allExpression -> alterable . mathOp allExpression
    (57) allExpression -> alterable . PP
    (58) allExpression -> alterable . MM
    (110) alterable -> alterable . Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> alterable . Dot VarName
    (108) factor -> alterable .
    (60) mathOp -> . Equal
    (61) mathOp -> . PlusEqual
    (62) mathOp -> . MinusEqual
    (63) mathOp -> . TimesEqual
    (64) mathOp -> . DivideEqual

    PP              shift and go to state 129
    MM              shift and go to state 130
    Opening_Bracket shift and go to state 115
    Dot             shift and go to state 116
    Plus            reduce using rule 108 (factor -> alterable .)
    Minus           reduce using rule 108 (factor -> alterable .)
    Times           reduce using rule 108 (factor -> alterable .)
    Divide          reduce using rule 108 (factor -> alterable .)
    ModeOP          reduce using rule 108 (factor -> alterable .)
    LEqual          reduce using rule 108 (factor -> alterable .)
    GEqual          reduce using rule 108 (factor -> alterable .)
    EEqual          reduce using rule 108 (factor -> alterable .)
    GreaterOP       reduce using rule 108 (factor -> alterable .)
    LessOP          reduce using rule 108 (factor -> alterable .)
    NonEqualOP      reduce using rule 108 (factor -> alterable .)
    DoubleAnd       reduce using rule 108 (factor -> alterable .)
    DoubleOr        reduce using rule 108 (factor -> alterable .)
    Tilda           reduce using rule 108 (factor -> alterable .)
    And             reduce using rule 108 (factor -> alterable .)
    Or              reduce using rule 108 (factor -> alterable .)
    Semicolon       reduce using rule 108 (factor -> alterable .)
    Closing_Parentheses reduce using rule 108 (factor -> alterable .)
    Closing_Bracket reduce using rule 108 (factor -> alterable .)
    Comma           reduce using rule 108 (factor -> alterable .)
    Equal           shift and go to state 131
    PlusEqual       shift and go to state 132
    MinusEqual      shift and go to state 133
    TimesEqual      shift and go to state 134
    DivideEqual     shift and go to state 135

    mathOp                         shift and go to state 128

state 88

    (112) inalterable -> Opening_Parentheses allExpression . Closing_Parentheses

    Closing_Parentheses shift and go to state 136


state 89

    (11) varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses .

    Semicolon       reduce using rule 11 (varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses .)
    Comma           reduce using rule 11 (varInitialization -> varForm Colon Opening_Parentheses eachExpression Closing_Parentheses .)


state 90

    (65) eachExpression -> eachExpression DoubleAnd . eachExpression
    (70) eachExpression -> eachExpression DoubleAnd . Then_KW eachExpression
    (85) eachExpression -> eachExpression DoubleAnd . Else_KW eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Then_KW         shift and go to state 138
    Else_KW         shift and go to state 139
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 137
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 91

    (66) eachExpression -> eachExpression DoubleOr . eachExpression
    (71) eachExpression -> eachExpression DoubleOr . Then_KW eachExpression
    (84) eachExpression -> eachExpression DoubleOr . Else_KW eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Then_KW         shift and go to state 141
    Else_KW         shift and go to state 142
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 140
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 92

    (67) eachExpression -> eachExpression Tilda . eachExpression
    (72) eachExpression -> eachExpression Tilda . Then_KW eachExpression
    (83) eachExpression -> eachExpression Tilda . Else_KW eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Then_KW         shift and go to state 144
    Else_KW         shift and go to state 145
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 143
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 93

    (68) eachExpression -> eachExpression And . eachExpression
    (73) eachExpression -> eachExpression And . Then_KW eachExpression
    (82) eachExpression -> eachExpression And . Else_KW eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Then_KW         shift and go to state 147
    Else_KW         shift and go to state 148
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 146
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 94

    (69) eachExpression -> eachExpression Or . eachExpression
    (74) eachExpression -> eachExpression Or . Then_KW eachExpression
    (81) eachExpression -> eachExpression Or . Else_KW eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Then_KW         shift and go to state 150
    Else_KW         shift and go to state 151
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 149
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 95

    (75) eachExpression -> DoubleAnd eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 75 (eachExpression -> DoubleAnd eachExpression .)
    DoubleAnd       reduce using rule 75 (eachExpression -> DoubleAnd eachExpression .)
    DoubleOr        reduce using rule 75 (eachExpression -> DoubleAnd eachExpression .)
    And             reduce using rule 75 (eachExpression -> DoubleAnd eachExpression .)
    Or              reduce using rule 75 (eachExpression -> DoubleAnd eachExpression .)
    Semicolon       reduce using rule 75 (eachExpression -> DoubleAnd eachExpression .)
    Closing_Bracket reduce using rule 75 (eachExpression -> DoubleAnd eachExpression .)
    Comma           reduce using rule 75 (eachExpression -> DoubleAnd eachExpression .)
    Tilda           shift and go to state 92

  ! Tilda           [ reduce using rule 75 (eachExpression -> DoubleAnd eachExpression .) ]
  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 96

    (76) eachExpression -> DoubleOr eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 76 (eachExpression -> DoubleOr eachExpression .)
    DoubleOr        reduce using rule 76 (eachExpression -> DoubleOr eachExpression .)
    Or              reduce using rule 76 (eachExpression -> DoubleOr eachExpression .)
    Semicolon       reduce using rule 76 (eachExpression -> DoubleOr eachExpression .)
    Closing_Bracket reduce using rule 76 (eachExpression -> DoubleOr eachExpression .)
    Comma           reduce using rule 76 (eachExpression -> DoubleOr eachExpression .)
    DoubleAnd       shift and go to state 90
    Tilda           shift and go to state 92
    And             shift and go to state 93

  ! DoubleAnd       [ reduce using rule 76 (eachExpression -> DoubleOr eachExpression .) ]
  ! Tilda           [ reduce using rule 76 (eachExpression -> DoubleOr eachExpression .) ]
  ! And             [ reduce using rule 76 (eachExpression -> DoubleOr eachExpression .) ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Or              [ shift and go to state 94 ]


state 97

    (77) eachExpression -> Tilda eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 77 (eachExpression -> Tilda eachExpression .)
    DoubleAnd       reduce using rule 77 (eachExpression -> Tilda eachExpression .)
    DoubleOr        reduce using rule 77 (eachExpression -> Tilda eachExpression .)
    And             reduce using rule 77 (eachExpression -> Tilda eachExpression .)
    Or              reduce using rule 77 (eachExpression -> Tilda eachExpression .)
    Semicolon       reduce using rule 77 (eachExpression -> Tilda eachExpression .)
    Closing_Bracket reduce using rule 77 (eachExpression -> Tilda eachExpression .)
    Comma           reduce using rule 77 (eachExpression -> Tilda eachExpression .)
    Tilda           shift and go to state 92

  ! Tilda           [ reduce using rule 77 (eachExpression -> Tilda eachExpression .) ]
  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 98

    (78) eachExpression -> And eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 78 (eachExpression -> And eachExpression .)
    DoubleAnd       reduce using rule 78 (eachExpression -> And eachExpression .)
    DoubleOr        reduce using rule 78 (eachExpression -> And eachExpression .)
    And             reduce using rule 78 (eachExpression -> And eachExpression .)
    Or              reduce using rule 78 (eachExpression -> And eachExpression .)
    Semicolon       reduce using rule 78 (eachExpression -> And eachExpression .)
    Closing_Bracket reduce using rule 78 (eachExpression -> And eachExpression .)
    Comma           reduce using rule 78 (eachExpression -> And eachExpression .)
    Tilda           shift and go to state 92

  ! Tilda           [ reduce using rule 78 (eachExpression -> And eachExpression .) ]
  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 99

    (79) eachExpression -> Or eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 79 (eachExpression -> Or eachExpression .)
    DoubleOr        reduce using rule 79 (eachExpression -> Or eachExpression .)
    Or              reduce using rule 79 (eachExpression -> Or eachExpression .)
    Semicolon       reduce using rule 79 (eachExpression -> Or eachExpression .)
    Closing_Bracket reduce using rule 79 (eachExpression -> Or eachExpression .)
    Comma           reduce using rule 79 (eachExpression -> Or eachExpression .)
    DoubleAnd       shift and go to state 90
    Tilda           shift and go to state 92
    And             shift and go to state 93

  ! DoubleAnd       [ reduce using rule 79 (eachExpression -> Or eachExpression .) ]
  ! Tilda           [ reduce using rule 79 (eachExpression -> Or eachExpression .) ]
  ! And             [ reduce using rule 79 (eachExpression -> Or eachExpression .) ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Or              [ shift and go to state 94 ]


state 100

    (86) relExpression -> mathEXP compareType . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    mathEXP                        shift and go to state 152
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 101

    (96) mathEXP -> mathEXP Plus . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    mathEXP                        shift and go to state 153
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 102

    (97) mathEXP -> mathEXP Minus . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    mathEXP                        shift and go to state 154
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 103

    (98) mathEXP -> mathEXP Times . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    mathEXP                        shift and go to state 155
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 104

    (99) mathEXP -> mathEXP Divide . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    mathEXP                        shift and go to state 156
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 105

    (100) mathEXP -> mathEXP ModeOP . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    mathEXP                        shift and go to state 157
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 106

    (88) compareType -> equal .

    Minus           reduce using rule 88 (compareType -> equal .)
    Times           reduce using rule 88 (compareType -> equal .)
    QMark           reduce using rule 88 (compareType -> equal .)
    Opening_Parentheses reduce using rule 88 (compareType -> equal .)
    VarName         reduce using rule 88 (compareType -> equal .)
    Const_KW        reduce using rule 88 (compareType -> equal .)
    True_KW         reduce using rule 88 (compareType -> equal .)
    False_KW        reduce using rule 88 (compareType -> equal .)


state 107

    (89) compareType -> nonEqual .

    Minus           reduce using rule 89 (compareType -> nonEqual .)
    Times           reduce using rule 89 (compareType -> nonEqual .)
    QMark           reduce using rule 89 (compareType -> nonEqual .)
    Opening_Parentheses reduce using rule 89 (compareType -> nonEqual .)
    VarName         reduce using rule 89 (compareType -> nonEqual .)
    Const_KW        reduce using rule 89 (compareType -> nonEqual .)
    True_KW         reduce using rule 89 (compareType -> nonEqual .)
    False_KW        reduce using rule 89 (compareType -> nonEqual .)


state 108

    (90) equal -> LEqual .

    Minus           reduce using rule 90 (equal -> LEqual .)
    Times           reduce using rule 90 (equal -> LEqual .)
    QMark           reduce using rule 90 (equal -> LEqual .)
    Opening_Parentheses reduce using rule 90 (equal -> LEqual .)
    VarName         reduce using rule 90 (equal -> LEqual .)
    Const_KW        reduce using rule 90 (equal -> LEqual .)
    True_KW         reduce using rule 90 (equal -> LEqual .)
    False_KW        reduce using rule 90 (equal -> LEqual .)


state 109

    (91) equal -> GEqual .

    Minus           reduce using rule 91 (equal -> GEqual .)
    Times           reduce using rule 91 (equal -> GEqual .)
    QMark           reduce using rule 91 (equal -> GEqual .)
    Opening_Parentheses reduce using rule 91 (equal -> GEqual .)
    VarName         reduce using rule 91 (equal -> GEqual .)
    Const_KW        reduce using rule 91 (equal -> GEqual .)
    True_KW         reduce using rule 91 (equal -> GEqual .)
    False_KW        reduce using rule 91 (equal -> GEqual .)


state 110

    (92) equal -> EEqual .

    Minus           reduce using rule 92 (equal -> EEqual .)
    Times           reduce using rule 92 (equal -> EEqual .)
    QMark           reduce using rule 92 (equal -> EEqual .)
    Opening_Parentheses reduce using rule 92 (equal -> EEqual .)
    VarName         reduce using rule 92 (equal -> EEqual .)
    Const_KW        reduce using rule 92 (equal -> EEqual .)
    True_KW         reduce using rule 92 (equal -> EEqual .)
    False_KW        reduce using rule 92 (equal -> EEqual .)


state 111

    (93) nonEqual -> GreaterOP .

    Minus           reduce using rule 93 (nonEqual -> GreaterOP .)
    Times           reduce using rule 93 (nonEqual -> GreaterOP .)
    QMark           reduce using rule 93 (nonEqual -> GreaterOP .)
    Opening_Parentheses reduce using rule 93 (nonEqual -> GreaterOP .)
    VarName         reduce using rule 93 (nonEqual -> GreaterOP .)
    Const_KW        reduce using rule 93 (nonEqual -> GreaterOP .)
    True_KW         reduce using rule 93 (nonEqual -> GreaterOP .)
    False_KW        reduce using rule 93 (nonEqual -> GreaterOP .)


state 112

    (94) nonEqual -> LessOP .

    Minus           reduce using rule 94 (nonEqual -> LessOP .)
    Times           reduce using rule 94 (nonEqual -> LessOP .)
    QMark           reduce using rule 94 (nonEqual -> LessOP .)
    Opening_Parentheses reduce using rule 94 (nonEqual -> LessOP .)
    VarName         reduce using rule 94 (nonEqual -> LessOP .)
    Const_KW        reduce using rule 94 (nonEqual -> LessOP .)
    True_KW         reduce using rule 94 (nonEqual -> LessOP .)
    False_KW        reduce using rule 94 (nonEqual -> LessOP .)


state 113

    (95) nonEqual -> NonEqualOP .

    Minus           reduce using rule 95 (nonEqual -> NonEqualOP .)
    Times           reduce using rule 95 (nonEqual -> NonEqualOP .)
    QMark           reduce using rule 95 (nonEqual -> NonEqualOP .)
    Opening_Parentheses reduce using rule 95 (nonEqual -> NonEqualOP .)
    VarName         reduce using rule 95 (nonEqual -> NonEqualOP .)
    Const_KW        reduce using rule 95 (nonEqual -> NonEqualOP .)
    True_KW         reduce using rule 95 (nonEqual -> NonEqualOP .)
    False_KW        reduce using rule 95 (nonEqual -> NonEqualOP .)


state 114

    (102) unaryExpression -> unaryop unaryExpression .

    Plus            reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    Minus           reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    Times           reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    Divide          reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    ModeOP          reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    LEqual          reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    GEqual          reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    EEqual          reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    GreaterOP       reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    LessOP          reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    NonEqualOP      reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    Closing_Parentheses reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    DoubleAnd       reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    DoubleOr        reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    Tilda           reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    And             reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    Or              reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    Semicolon       reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    Closing_Bracket reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)
    Comma           reduce using rule 102 (unaryExpression -> unaryop unaryExpression .)


state 115

    (110) alterable -> alterable Opening_Bracket . allExpression Closing_Bracket
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    alterable                      shift and go to state 87
    allExpression                  shift and go to state 158
    eachExpression                 shift and go to state 82
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 116

    (111) alterable -> alterable Dot . VarName

    VarName         shift and go to state 159


state 117

    (114) inalterable -> VarName Opening_Parentheses . args Closing_Parentheses
    (115) args -> . arguments
    (116) args -> .
    (117) arguments -> . arguments Comma allExpression
    (118) arguments -> . allExpression
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Closing_Parentheses reduce using rule 116 (args -> .)
    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    args                           shift and go to state 160
    arguments                      shift and go to state 161
    allExpression                  shift and go to state 162
    alterable                      shift and go to state 87
    eachExpression                 shift and go to state 82
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 118

    (24) function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement . Closing_Brace

    Closing_Brace   shift and go to state 163


state 119

    (31) paramList -> paramList Comma paramId .

    Comma           reduce using rule 31 (paramList -> paramList Comma paramId .)
    Semicolon       reduce using rule 31 (paramList -> paramList Comma paramId .)
    Closing_Parentheses reduce using rule 31 (paramList -> paramList Comma paramId .)


state 120

    (36) paramId -> VarName Opening_Bracket Closing_Bracket .

    Comma           reduce using rule 36 (paramId -> VarName Opening_Bracket Closing_Bracket .)
    Semicolon       reduce using rule 36 (paramId -> VarName Opening_Bracket Closing_Bracket .)
    Closing_Parentheses reduce using rule 36 (paramId -> VarName Opening_Bracket Closing_Bracket .)


state 121

    (46) phrase -> allExpression Semicolon .

    void_KW         reduce using rule 46 (phrase -> allExpression Semicolon .)
    Boolean_KW      reduce using rule 46 (phrase -> allExpression Semicolon .)
    Character_KW    reduce using rule 46 (phrase -> allExpression Semicolon .)
    Integer_KW      reduce using rule 46 (phrase -> allExpression Semicolon .)
    char_KW         reduce using rule 46 (phrase -> allExpression Semicolon .)
    bool_KW         reduce using rule 46 (phrase -> allExpression Semicolon .)
    int_KW          reduce using rule 46 (phrase -> allExpression Semicolon .)
    $end            reduce using rule 46 (phrase -> allExpression Semicolon .)
    Closing_Brace   reduce using rule 46 (phrase -> allExpression Semicolon .)
    Semicolon       reduce using rule 46 (phrase -> allExpression Semicolon .)
    Opening_Brace   reduce using rule 46 (phrase -> allExpression Semicolon .)
    If_KW           reduce using rule 46 (phrase -> allExpression Semicolon .)
    Till_KW         reduce using rule 46 (phrase -> allExpression Semicolon .)
    ComeBack_KW     reduce using rule 46 (phrase -> allExpression Semicolon .)
    GiveBack_KW     reduce using rule 46 (phrase -> allExpression Semicolon .)
    Continue_KW     reduce using rule 46 (phrase -> allExpression Semicolon .)
    VarName         reduce using rule 46 (phrase -> allExpression Semicolon .)
    DoubleAnd       reduce using rule 46 (phrase -> allExpression Semicolon .)
    DoubleOr        reduce using rule 46 (phrase -> allExpression Semicolon .)
    Tilda           reduce using rule 46 (phrase -> allExpression Semicolon .)
    And             reduce using rule 46 (phrase -> allExpression Semicolon .)
    Or              reduce using rule 46 (phrase -> allExpression Semicolon .)
    Minus           reduce using rule 46 (phrase -> allExpression Semicolon .)
    Times           reduce using rule 46 (phrase -> allExpression Semicolon .)
    QMark           reduce using rule 46 (phrase -> allExpression Semicolon .)
    Opening_Parentheses reduce using rule 46 (phrase -> allExpression Semicolon .)
    Const_KW        reduce using rule 46 (phrase -> allExpression Semicolon .)
    True_KW         reduce using rule 46 (phrase -> allExpression Semicolon .)
    False_KW        reduce using rule 46 (phrase -> allExpression Semicolon .)
    Other_KW        reduce using rule 46 (phrase -> allExpression Semicolon .)


state 122

    (43) compoundPhrase -> Opening_Brace localDeclarations . statementList Closing_Brace
    (33) localDeclarations -> localDeclarations . ScopedVariableDec
    (44) statementList -> . statementList statement
    (45) statementList -> .
    (7) ScopedVariableDec -> . scopedSpecifier variableList Semicolon
    (14) scopedSpecifier -> . Static_KW type
    (15) scopedSpecifier -> . type
    (16) type -> . Boolean_KW
    (17) type -> . Character_KW
    (18) type -> . Integer_KW
    (19) type -> . char_KW
    (20) type -> . bool_KW
    (21) type -> . int_KW

    Closing_Brace   reduce using rule 45 (statementList -> .)
    Semicolon       reduce using rule 45 (statementList -> .)
    Opening_Brace   reduce using rule 45 (statementList -> .)
    If_KW           reduce using rule 45 (statementList -> .)
    Till_KW         reduce using rule 45 (statementList -> .)
    ComeBack_KW     reduce using rule 45 (statementList -> .)
    GiveBack_KW     reduce using rule 45 (statementList -> .)
    Continue_KW     reduce using rule 45 (statementList -> .)
    VarName         reduce using rule 45 (statementList -> .)
    DoubleAnd       reduce using rule 45 (statementList -> .)
    DoubleOr        reduce using rule 45 (statementList -> .)
    Tilda           reduce using rule 45 (statementList -> .)
    And             reduce using rule 45 (statementList -> .)
    Or              reduce using rule 45 (statementList -> .)
    Minus           reduce using rule 45 (statementList -> .)
    Times           reduce using rule 45 (statementList -> .)
    QMark           reduce using rule 45 (statementList -> .)
    Opening_Parentheses reduce using rule 45 (statementList -> .)
    Const_KW        reduce using rule 45 (statementList -> .)
    True_KW         reduce using rule 45 (statementList -> .)
    False_KW        reduce using rule 45 (statementList -> .)
    Static_KW       shift and go to state 167
    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    statementList                  shift and go to state 164
    ScopedVariableDec              shift and go to state 165
    scopedSpecifier                shift and go to state 166
    type                           shift and go to state 168

state 123

    (48) selectPhrase -> If_KW Opening_Parentheses . eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> If_KW Opening_Parentheses . eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 169
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 124

    (52) iterationPhrase -> Till_KW Opening_Parentheses . eachExpression Closing_Parentheses statement
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 170
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 125

    (53) returnPhrase -> ComeBack_KW Semicolon .

    void_KW         reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Boolean_KW      reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Character_KW    reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Integer_KW      reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    char_KW         reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    bool_KW         reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    int_KW          reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    $end            reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Closing_Brace   reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Semicolon       reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Opening_Brace   reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    If_KW           reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Till_KW         reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    ComeBack_KW     reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    GiveBack_KW     reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Continue_KW     reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    VarName         reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    DoubleAnd       reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    DoubleOr        reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Tilda           reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    And             reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Or              reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Minus           reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Times           reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    QMark           reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Opening_Parentheses reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Const_KW        reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    True_KW         reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    False_KW        reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)
    Other_KW        reduce using rule 53 (returnPhrase -> ComeBack_KW Semicolon .)


state 126

    (54) returnPhrase -> GiveBack_KW allExpression . Semicolon

    Semicolon       shift and go to state 171


state 127

    (55) continue -> Continue_KW Semicolon .

    void_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Boolean_KW      reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Character_KW    reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Integer_KW      reduce using rule 55 (continue -> Continue_KW Semicolon .)
    char_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    bool_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    int_KW          reduce using rule 55 (continue -> Continue_KW Semicolon .)
    $end            reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Closing_Brace   reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Semicolon       reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Opening_Brace   reduce using rule 55 (continue -> Continue_KW Semicolon .)
    If_KW           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Till_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    ComeBack_KW     reduce using rule 55 (continue -> Continue_KW Semicolon .)
    GiveBack_KW     reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Continue_KW     reduce using rule 55 (continue -> Continue_KW Semicolon .)
    VarName         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    DoubleAnd       reduce using rule 55 (continue -> Continue_KW Semicolon .)
    DoubleOr        reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Tilda           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    And             reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Or              reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Minus           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Times           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    QMark           reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Opening_Parentheses reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Const_KW        reduce using rule 55 (continue -> Continue_KW Semicolon .)
    True_KW         reduce using rule 55 (continue -> Continue_KW Semicolon .)
    False_KW        reduce using rule 55 (continue -> Continue_KW Semicolon .)
    Other_KW        reduce using rule 55 (continue -> Continue_KW Semicolon .)


state 128

    (56) allExpression -> alterable mathOp . allExpression
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    alterable                      shift and go to state 87
    allExpression                  shift and go to state 172
    eachExpression                 shift and go to state 82
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 129

    (57) allExpression -> alterable PP .

    Semicolon       reduce using rule 57 (allExpression -> alterable PP .)
    Closing_Parentheses reduce using rule 57 (allExpression -> alterable PP .)
    Closing_Bracket reduce using rule 57 (allExpression -> alterable PP .)
    Comma           reduce using rule 57 (allExpression -> alterable PP .)


state 130

    (58) allExpression -> alterable MM .

    Semicolon       reduce using rule 58 (allExpression -> alterable MM .)
    Closing_Parentheses reduce using rule 58 (allExpression -> alterable MM .)
    Closing_Bracket reduce using rule 58 (allExpression -> alterable MM .)
    Comma           reduce using rule 58 (allExpression -> alterable MM .)


state 131

    (60) mathOp -> Equal .

    VarName         reduce using rule 60 (mathOp -> Equal .)
    DoubleAnd       reduce using rule 60 (mathOp -> Equal .)
    DoubleOr        reduce using rule 60 (mathOp -> Equal .)
    Tilda           reduce using rule 60 (mathOp -> Equal .)
    And             reduce using rule 60 (mathOp -> Equal .)
    Or              reduce using rule 60 (mathOp -> Equal .)
    Minus           reduce using rule 60 (mathOp -> Equal .)
    Times           reduce using rule 60 (mathOp -> Equal .)
    QMark           reduce using rule 60 (mathOp -> Equal .)
    Opening_Parentheses reduce using rule 60 (mathOp -> Equal .)
    Const_KW        reduce using rule 60 (mathOp -> Equal .)
    True_KW         reduce using rule 60 (mathOp -> Equal .)
    False_KW        reduce using rule 60 (mathOp -> Equal .)


state 132

    (61) mathOp -> PlusEqual .

    VarName         reduce using rule 61 (mathOp -> PlusEqual .)
    DoubleAnd       reduce using rule 61 (mathOp -> PlusEqual .)
    DoubleOr        reduce using rule 61 (mathOp -> PlusEqual .)
    Tilda           reduce using rule 61 (mathOp -> PlusEqual .)
    And             reduce using rule 61 (mathOp -> PlusEqual .)
    Or              reduce using rule 61 (mathOp -> PlusEqual .)
    Minus           reduce using rule 61 (mathOp -> PlusEqual .)
    Times           reduce using rule 61 (mathOp -> PlusEqual .)
    QMark           reduce using rule 61 (mathOp -> PlusEqual .)
    Opening_Parentheses reduce using rule 61 (mathOp -> PlusEqual .)
    Const_KW        reduce using rule 61 (mathOp -> PlusEqual .)
    True_KW         reduce using rule 61 (mathOp -> PlusEqual .)
    False_KW        reduce using rule 61 (mathOp -> PlusEqual .)


state 133

    (62) mathOp -> MinusEqual .

    VarName         reduce using rule 62 (mathOp -> MinusEqual .)
    DoubleAnd       reduce using rule 62 (mathOp -> MinusEqual .)
    DoubleOr        reduce using rule 62 (mathOp -> MinusEqual .)
    Tilda           reduce using rule 62 (mathOp -> MinusEqual .)
    And             reduce using rule 62 (mathOp -> MinusEqual .)
    Or              reduce using rule 62 (mathOp -> MinusEqual .)
    Minus           reduce using rule 62 (mathOp -> MinusEqual .)
    Times           reduce using rule 62 (mathOp -> MinusEqual .)
    QMark           reduce using rule 62 (mathOp -> MinusEqual .)
    Opening_Parentheses reduce using rule 62 (mathOp -> MinusEqual .)
    Const_KW        reduce using rule 62 (mathOp -> MinusEqual .)
    True_KW         reduce using rule 62 (mathOp -> MinusEqual .)
    False_KW        reduce using rule 62 (mathOp -> MinusEqual .)


state 134

    (63) mathOp -> TimesEqual .

    VarName         reduce using rule 63 (mathOp -> TimesEqual .)
    DoubleAnd       reduce using rule 63 (mathOp -> TimesEqual .)
    DoubleOr        reduce using rule 63 (mathOp -> TimesEqual .)
    Tilda           reduce using rule 63 (mathOp -> TimesEqual .)
    And             reduce using rule 63 (mathOp -> TimesEqual .)
    Or              reduce using rule 63 (mathOp -> TimesEqual .)
    Minus           reduce using rule 63 (mathOp -> TimesEqual .)
    Times           reduce using rule 63 (mathOp -> TimesEqual .)
    QMark           reduce using rule 63 (mathOp -> TimesEqual .)
    Opening_Parentheses reduce using rule 63 (mathOp -> TimesEqual .)
    Const_KW        reduce using rule 63 (mathOp -> TimesEqual .)
    True_KW         reduce using rule 63 (mathOp -> TimesEqual .)
    False_KW        reduce using rule 63 (mathOp -> TimesEqual .)


state 135

    (64) mathOp -> DivideEqual .

    VarName         reduce using rule 64 (mathOp -> DivideEqual .)
    DoubleAnd       reduce using rule 64 (mathOp -> DivideEqual .)
    DoubleOr        reduce using rule 64 (mathOp -> DivideEqual .)
    Tilda           reduce using rule 64 (mathOp -> DivideEqual .)
    And             reduce using rule 64 (mathOp -> DivideEqual .)
    Or              reduce using rule 64 (mathOp -> DivideEqual .)
    Minus           reduce using rule 64 (mathOp -> DivideEqual .)
    Times           reduce using rule 64 (mathOp -> DivideEqual .)
    QMark           reduce using rule 64 (mathOp -> DivideEqual .)
    Opening_Parentheses reduce using rule 64 (mathOp -> DivideEqual .)
    Const_KW        reduce using rule 64 (mathOp -> DivideEqual .)
    True_KW         reduce using rule 64 (mathOp -> DivideEqual .)
    False_KW        reduce using rule 64 (mathOp -> DivideEqual .)


state 136

    (112) inalterable -> Opening_Parentheses allExpression Closing_Parentheses .

    Plus            reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Minus           reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Times           reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Divide          reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    ModeOP          reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    LEqual          reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    GEqual          reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    EEqual          reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    GreaterOP       reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    LessOP          reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    NonEqualOP      reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Closing_Parentheses reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    DoubleAnd       reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    DoubleOr        reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Tilda           reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    And             reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Or              reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Semicolon       reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Closing_Bracket reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)
    Comma           reduce using rule 112 (inalterable -> Opening_Parentheses allExpression Closing_Parentheses .)


state 137

    (65) eachExpression -> eachExpression DoubleAnd eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 65 (eachExpression -> eachExpression DoubleAnd eachExpression .)
    DoubleAnd       reduce using rule 65 (eachExpression -> eachExpression DoubleAnd eachExpression .)
    DoubleOr        reduce using rule 65 (eachExpression -> eachExpression DoubleAnd eachExpression .)
    And             reduce using rule 65 (eachExpression -> eachExpression DoubleAnd eachExpression .)
    Or              reduce using rule 65 (eachExpression -> eachExpression DoubleAnd eachExpression .)
    Semicolon       reduce using rule 65 (eachExpression -> eachExpression DoubleAnd eachExpression .)
    Closing_Bracket reduce using rule 65 (eachExpression -> eachExpression DoubleAnd eachExpression .)
    Comma           reduce using rule 65 (eachExpression -> eachExpression DoubleAnd eachExpression .)
    Tilda           shift and go to state 92

  ! Tilda           [ reduce using rule 65 (eachExpression -> eachExpression DoubleAnd eachExpression .) ]
  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 138

    (70) eachExpression -> eachExpression DoubleAnd Then_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 173
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 139

    (85) eachExpression -> eachExpression DoubleAnd Else_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 174
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 140

    (66) eachExpression -> eachExpression DoubleOr eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 66 (eachExpression -> eachExpression DoubleOr eachExpression .)
    DoubleOr        reduce using rule 66 (eachExpression -> eachExpression DoubleOr eachExpression .)
    Or              reduce using rule 66 (eachExpression -> eachExpression DoubleOr eachExpression .)
    Semicolon       reduce using rule 66 (eachExpression -> eachExpression DoubleOr eachExpression .)
    Closing_Bracket reduce using rule 66 (eachExpression -> eachExpression DoubleOr eachExpression .)
    Comma           reduce using rule 66 (eachExpression -> eachExpression DoubleOr eachExpression .)
    DoubleAnd       shift and go to state 90
    Tilda           shift and go to state 92
    And             shift and go to state 93

  ! DoubleAnd       [ reduce using rule 66 (eachExpression -> eachExpression DoubleOr eachExpression .) ]
  ! Tilda           [ reduce using rule 66 (eachExpression -> eachExpression DoubleOr eachExpression .) ]
  ! And             [ reduce using rule 66 (eachExpression -> eachExpression DoubleOr eachExpression .) ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Or              [ shift and go to state 94 ]


state 141

    (71) eachExpression -> eachExpression DoubleOr Then_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 175
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 142

    (84) eachExpression -> eachExpression DoubleOr Else_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 176
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 143

    (67) eachExpression -> eachExpression Tilda eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 67 (eachExpression -> eachExpression Tilda eachExpression .)
    DoubleAnd       reduce using rule 67 (eachExpression -> eachExpression Tilda eachExpression .)
    DoubleOr        reduce using rule 67 (eachExpression -> eachExpression Tilda eachExpression .)
    And             reduce using rule 67 (eachExpression -> eachExpression Tilda eachExpression .)
    Or              reduce using rule 67 (eachExpression -> eachExpression Tilda eachExpression .)
    Semicolon       reduce using rule 67 (eachExpression -> eachExpression Tilda eachExpression .)
    Closing_Bracket reduce using rule 67 (eachExpression -> eachExpression Tilda eachExpression .)
    Comma           reduce using rule 67 (eachExpression -> eachExpression Tilda eachExpression .)
    Tilda           shift and go to state 92

  ! Tilda           [ reduce using rule 67 (eachExpression -> eachExpression Tilda eachExpression .) ]
  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 144

    (72) eachExpression -> eachExpression Tilda Then_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 177
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 145

    (83) eachExpression -> eachExpression Tilda Else_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 178
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 146

    (68) eachExpression -> eachExpression And eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 68 (eachExpression -> eachExpression And eachExpression .)
    DoubleAnd       reduce using rule 68 (eachExpression -> eachExpression And eachExpression .)
    DoubleOr        reduce using rule 68 (eachExpression -> eachExpression And eachExpression .)
    And             reduce using rule 68 (eachExpression -> eachExpression And eachExpression .)
    Or              reduce using rule 68 (eachExpression -> eachExpression And eachExpression .)
    Semicolon       reduce using rule 68 (eachExpression -> eachExpression And eachExpression .)
    Closing_Bracket reduce using rule 68 (eachExpression -> eachExpression And eachExpression .)
    Comma           reduce using rule 68 (eachExpression -> eachExpression And eachExpression .)
    Tilda           shift and go to state 92

  ! Tilda           [ reduce using rule 68 (eachExpression -> eachExpression And eachExpression .) ]
  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 147

    (73) eachExpression -> eachExpression And Then_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 179
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 148

    (82) eachExpression -> eachExpression And Else_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 180
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 149

    (69) eachExpression -> eachExpression Or eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 69 (eachExpression -> eachExpression Or eachExpression .)
    DoubleOr        reduce using rule 69 (eachExpression -> eachExpression Or eachExpression .)
    Or              reduce using rule 69 (eachExpression -> eachExpression Or eachExpression .)
    Semicolon       reduce using rule 69 (eachExpression -> eachExpression Or eachExpression .)
    Closing_Bracket reduce using rule 69 (eachExpression -> eachExpression Or eachExpression .)
    Comma           reduce using rule 69 (eachExpression -> eachExpression Or eachExpression .)
    DoubleAnd       shift and go to state 90
    Tilda           shift and go to state 92
    And             shift and go to state 93

  ! DoubleAnd       [ reduce using rule 69 (eachExpression -> eachExpression Or eachExpression .) ]
  ! Tilda           [ reduce using rule 69 (eachExpression -> eachExpression Or eachExpression .) ]
  ! And             [ reduce using rule 69 (eachExpression -> eachExpression Or eachExpression .) ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Or              [ shift and go to state 94 ]


state 150

    (74) eachExpression -> eachExpression Or Then_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 181
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 151

    (81) eachExpression -> eachExpression Or Else_KW . eachExpression
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    VarName         shift and go to state 62
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 182
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    alterable                      shift and go to state 60
    constant                       shift and go to state 61

state 152

    (86) relExpression -> mathEXP compareType mathEXP .
    (96) mathEXP -> mathEXP . Plus mathEXP
    (97) mathEXP -> mathEXP . Minus mathEXP
    (98) mathEXP -> mathEXP . Times mathEXP
    (99) mathEXP -> mathEXP . Divide mathEXP
    (100) mathEXP -> mathEXP . ModeOP mathEXP

    Closing_Parentheses reduce using rule 86 (relExpression -> mathEXP compareType mathEXP .)
    DoubleAnd       reduce using rule 86 (relExpression -> mathEXP compareType mathEXP .)
    DoubleOr        reduce using rule 86 (relExpression -> mathEXP compareType mathEXP .)
    Tilda           reduce using rule 86 (relExpression -> mathEXP compareType mathEXP .)
    And             reduce using rule 86 (relExpression -> mathEXP compareType mathEXP .)
    Or              reduce using rule 86 (relExpression -> mathEXP compareType mathEXP .)
    Semicolon       reduce using rule 86 (relExpression -> mathEXP compareType mathEXP .)
    Closing_Bracket reduce using rule 86 (relExpression -> mathEXP compareType mathEXP .)
    Comma           reduce using rule 86 (relExpression -> mathEXP compareType mathEXP .)
    Plus            shift and go to state 101
    Minus           shift and go to state 102
    Times           shift and go to state 103
    Divide          shift and go to state 104
    ModeOP          shift and go to state 105


state 153

    (96) mathEXP -> mathEXP Plus mathEXP .
    (96) mathEXP -> mathEXP . Plus mathEXP
    (97) mathEXP -> mathEXP . Minus mathEXP
    (98) mathEXP -> mathEXP . Times mathEXP
    (99) mathEXP -> mathEXP . Divide mathEXP
    (100) mathEXP -> mathEXP . ModeOP mathEXP

    Plus            reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    Minus           reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    LEqual          reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    GEqual          reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    EEqual          reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    GreaterOP       reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    LessOP          reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    NonEqualOP      reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    Closing_Parentheses reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    DoubleAnd       reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    DoubleOr        reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    Tilda           reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    And             reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    Or              reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    Semicolon       reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    Closing_Bracket reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    Comma           reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .)
    Times           shift and go to state 103
    Divide          shift and go to state 104
    ModeOP          shift and go to state 105

  ! Times           [ reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .) ]
  ! Divide          [ reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .) ]
  ! ModeOP          [ reduce using rule 96 (mathEXP -> mathEXP Plus mathEXP .) ]
  ! Plus            [ shift and go to state 101 ]
  ! Minus           [ shift and go to state 102 ]


state 154

    (97) mathEXP -> mathEXP Minus mathEXP .
    (96) mathEXP -> mathEXP . Plus mathEXP
    (97) mathEXP -> mathEXP . Minus mathEXP
    (98) mathEXP -> mathEXP . Times mathEXP
    (99) mathEXP -> mathEXP . Divide mathEXP
    (100) mathEXP -> mathEXP . ModeOP mathEXP

    Plus            reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    Minus           reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    LEqual          reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    GEqual          reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    EEqual          reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    GreaterOP       reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    LessOP          reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    NonEqualOP      reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    Closing_Parentheses reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    DoubleAnd       reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    DoubleOr        reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    Tilda           reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    And             reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    Or              reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    Semicolon       reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    Closing_Bracket reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    Comma           reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .)
    Times           shift and go to state 103
    Divide          shift and go to state 104
    ModeOP          shift and go to state 105

  ! Times           [ reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .) ]
  ! Divide          [ reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .) ]
  ! ModeOP          [ reduce using rule 97 (mathEXP -> mathEXP Minus mathEXP .) ]
  ! Plus            [ shift and go to state 101 ]
  ! Minus           [ shift and go to state 102 ]


state 155

    (98) mathEXP -> mathEXP Times mathEXP .
    (96) mathEXP -> mathEXP . Plus mathEXP
    (97) mathEXP -> mathEXP . Minus mathEXP
    (98) mathEXP -> mathEXP . Times mathEXP
    (99) mathEXP -> mathEXP . Divide mathEXP
    (100) mathEXP -> mathEXP . ModeOP mathEXP

    Plus            reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    Minus           reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    Times           reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    Divide          reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    LEqual          reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    GEqual          reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    EEqual          reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    GreaterOP       reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    LessOP          reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    NonEqualOP      reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    Closing_Parentheses reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    DoubleAnd       reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    DoubleOr        reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    Tilda           reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    And             reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    Or              reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    Semicolon       reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    Closing_Bracket reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    Comma           reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .)
    ModeOP          shift and go to state 105

  ! ModeOP          [ reduce using rule 98 (mathEXP -> mathEXP Times mathEXP .) ]
  ! Plus            [ shift and go to state 101 ]
  ! Minus           [ shift and go to state 102 ]
  ! Times           [ shift and go to state 103 ]
  ! Divide          [ shift and go to state 104 ]


state 156

    (99) mathEXP -> mathEXP Divide mathEXP .
    (96) mathEXP -> mathEXP . Plus mathEXP
    (97) mathEXP -> mathEXP . Minus mathEXP
    (98) mathEXP -> mathEXP . Times mathEXP
    (99) mathEXP -> mathEXP . Divide mathEXP
    (100) mathEXP -> mathEXP . ModeOP mathEXP

    Plus            reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    Minus           reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    Times           reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    Divide          reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    LEqual          reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    GEqual          reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    EEqual          reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    GreaterOP       reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    LessOP          reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    NonEqualOP      reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    Closing_Parentheses reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    DoubleAnd       reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    DoubleOr        reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    Tilda           reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    And             reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    Or              reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    Semicolon       reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    Closing_Bracket reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    Comma           reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .)
    ModeOP          shift and go to state 105

  ! ModeOP          [ reduce using rule 99 (mathEXP -> mathEXP Divide mathEXP .) ]
  ! Plus            [ shift and go to state 101 ]
  ! Minus           [ shift and go to state 102 ]
  ! Times           [ shift and go to state 103 ]
  ! Divide          [ shift and go to state 104 ]


state 157

    (100) mathEXP -> mathEXP ModeOP mathEXP .
    (96) mathEXP -> mathEXP . Plus mathEXP
    (97) mathEXP -> mathEXP . Minus mathEXP
    (98) mathEXP -> mathEXP . Times mathEXP
    (99) mathEXP -> mathEXP . Divide mathEXP
    (100) mathEXP -> mathEXP . ModeOP mathEXP

    Plus            reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    Minus           reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    Times           reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    Divide          reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    ModeOP          reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    LEqual          reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    GEqual          reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    EEqual          reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    GreaterOP       reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    LessOP          reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    NonEqualOP      reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    Closing_Parentheses reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    DoubleAnd       reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    DoubleOr        reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    Tilda           reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    And             reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    Or              reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    Semicolon       reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    Closing_Bracket reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)
    Comma           reduce using rule 100 (mathEXP -> mathEXP ModeOP mathEXP .)

  ! Plus            [ shift and go to state 101 ]
  ! Minus           [ shift and go to state 102 ]
  ! Times           [ shift and go to state 103 ]
  ! Divide          [ shift and go to state 104 ]
  ! ModeOP          [ shift and go to state 105 ]


state 158

    (110) alterable -> alterable Opening_Bracket allExpression . Closing_Bracket

    Closing_Bracket shift and go to state 183


state 159

    (111) alterable -> alterable Dot VarName .

    Opening_Bracket reduce using rule 111 (alterable -> alterable Dot VarName .)
    Dot             reduce using rule 111 (alterable -> alterable Dot VarName .)
    Plus            reduce using rule 111 (alterable -> alterable Dot VarName .)
    Minus           reduce using rule 111 (alterable -> alterable Dot VarName .)
    Times           reduce using rule 111 (alterable -> alterable Dot VarName .)
    Divide          reduce using rule 111 (alterable -> alterable Dot VarName .)
    ModeOP          reduce using rule 111 (alterable -> alterable Dot VarName .)
    LEqual          reduce using rule 111 (alterable -> alterable Dot VarName .)
    GEqual          reduce using rule 111 (alterable -> alterable Dot VarName .)
    EEqual          reduce using rule 111 (alterable -> alterable Dot VarName .)
    GreaterOP       reduce using rule 111 (alterable -> alterable Dot VarName .)
    LessOP          reduce using rule 111 (alterable -> alterable Dot VarName .)
    NonEqualOP      reduce using rule 111 (alterable -> alterable Dot VarName .)
    Closing_Parentheses reduce using rule 111 (alterable -> alterable Dot VarName .)
    DoubleAnd       reduce using rule 111 (alterable -> alterable Dot VarName .)
    DoubleOr        reduce using rule 111 (alterable -> alterable Dot VarName .)
    Tilda           reduce using rule 111 (alterable -> alterable Dot VarName .)
    And             reduce using rule 111 (alterable -> alterable Dot VarName .)
    Or              reduce using rule 111 (alterable -> alterable Dot VarName .)
    PP              reduce using rule 111 (alterable -> alterable Dot VarName .)
    MM              reduce using rule 111 (alterable -> alterable Dot VarName .)
    Equal           reduce using rule 111 (alterable -> alterable Dot VarName .)
    PlusEqual       reduce using rule 111 (alterable -> alterable Dot VarName .)
    MinusEqual      reduce using rule 111 (alterable -> alterable Dot VarName .)
    TimesEqual      reduce using rule 111 (alterable -> alterable Dot VarName .)
    DivideEqual     reduce using rule 111 (alterable -> alterable Dot VarName .)
    Semicolon       reduce using rule 111 (alterable -> alterable Dot VarName .)
    Closing_Bracket reduce using rule 111 (alterable -> alterable Dot VarName .)
    Comma           reduce using rule 111 (alterable -> alterable Dot VarName .)


state 160

    (114) inalterable -> VarName Opening_Parentheses args . Closing_Parentheses

    Closing_Parentheses shift and go to state 184


state 161

    (115) args -> arguments .
    (117) arguments -> arguments . Comma allExpression

    Closing_Parentheses reduce using rule 115 (args -> arguments .)
    Comma           shift and go to state 185


state 162

    (118) arguments -> allExpression .

    Comma           reduce using rule 118 (arguments -> allExpression .)
    Closing_Parentheses reduce using rule 118 (arguments -> allExpression .)


state 163

    (24) function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace .

    void_KW         reduce using rule 24 (function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace .)
    Boolean_KW      reduce using rule 24 (function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace .)
    Character_KW    reduce using rule 24 (function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace .)
    Integer_KW      reduce using rule 24 (function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace .)
    char_KW         reduce using rule 24 (function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace .)
    bool_KW         reduce using rule 24 (function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace .)
    int_KW          reduce using rule 24 (function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace .)
    $end            reduce using rule 24 (function -> void_KW nameOfMethod Opening_Parentheses parameter Closing_Parentheses Opening_Brace statement Closing_Brace .)


state 164

    (43) compoundPhrase -> Opening_Brace localDeclarations statementList . Closing_Brace
    (44) statementList -> statementList . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (46) phrase -> . allExpression Semicolon
    (47) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (48) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (52) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (53) returnPhrase -> . ComeBack_KW Semicolon
    (54) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Closing_Brace   shift and go to state 186
    Semicolon       shift and go to state 79
    Opening_Brace   shift and go to state 80
    If_KW           shift and go to state 81
    Till_KW         shift and go to state 83
    ComeBack_KW     shift and go to state 84
    GiveBack_KW     shift and go to state 85
    Continue_KW     shift and go to state 86
    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    statement                      shift and go to state 187
    phrase                         shift and go to state 72
    compoundPhrase                 shift and go to state 73
    selectPhrase                   shift and go to state 74
    iterationPhrase                shift and go to state 75
    returnPhrase                   shift and go to state 76
    continue                       shift and go to state 77
    allExpression                  shift and go to state 78
    eachExpression                 shift and go to state 82
    alterable                      shift and go to state 87
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 165

    (33) localDeclarations -> localDeclarations ScopedVariableDec .

    Static_KW       reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Boolean_KW      reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Character_KW    reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Integer_KW      reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    char_KW         reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    bool_KW         reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    int_KW          reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Closing_Brace   reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Semicolon       reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Opening_Brace   reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    If_KW           reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Till_KW         reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    ComeBack_KW     reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    GiveBack_KW     reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Continue_KW     reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    VarName         reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    DoubleAnd       reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    DoubleOr        reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Tilda           reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    And             reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Or              reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Minus           reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Times           reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    QMark           reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Opening_Parentheses reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    Const_KW        reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    True_KW         reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)
    False_KW        reduce using rule 33 (localDeclarations -> localDeclarations ScopedVariableDec .)


state 166

    (7) ScopedVariableDec -> scopedSpecifier . variableList Semicolon
    (8) variableList -> . variableList Comma varInitialization
    (9) variableList -> . varInitialization
    (10) varInitialization -> . varForm
    (11) varInitialization -> . varForm Colon Opening_Parentheses eachExpression Closing_Parentheses
    (12) varForm -> . VarName Opening_Bracket Num Closing_Bracket
    (13) varForm -> . VarName

    VarName         shift and go to state 35

    variableList                   shift and go to state 188
    varInitialization              shift and go to state 20
    varForm                        shift and go to state 21

state 167

    (14) scopedSpecifier -> Static_KW . type
    (16) type -> . Boolean_KW
    (17) type -> . Character_KW
    (18) type -> . Integer_KW
    (19) type -> . char_KW
    (20) type -> . bool_KW
    (21) type -> . int_KW

    Boolean_KW      shift and go to state 8
    Character_KW    shift and go to state 9
    Integer_KW      shift and go to state 10
    char_KW         shift and go to state 11
    bool_KW         shift and go to state 12
    int_KW          shift and go to state 13

    type                           shift and go to state 189

state 168

    (15) scopedSpecifier -> type .

    VarName         reduce using rule 15 (scopedSpecifier -> type .)


state 169

    (48) selectPhrase -> If_KW Opening_Parentheses eachExpression . Closing_Parentheses ifBody
    (49) selectPhrase -> If_KW Opening_Parentheses eachExpression . Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses shift and go to state 190
    DoubleAnd       shift and go to state 90
    DoubleOr        shift and go to state 91
    Tilda           shift and go to state 92
    And             shift and go to state 93
    Or              shift and go to state 94


state 170

    (52) iterationPhrase -> Till_KW Opening_Parentheses eachExpression . Closing_Parentheses statement
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses shift and go to state 191
    DoubleAnd       shift and go to state 90
    DoubleOr        shift and go to state 91
    Tilda           shift and go to state 92
    And             shift and go to state 93
    Or              shift and go to state 94


state 171

    (54) returnPhrase -> GiveBack_KW allExpression Semicolon .

    void_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Boolean_KW      reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Character_KW    reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Integer_KW      reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    char_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    bool_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    int_KW          reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    $end            reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Closing_Brace   reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Semicolon       reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Opening_Brace   reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    If_KW           reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Till_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    ComeBack_KW     reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    GiveBack_KW     reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Continue_KW     reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    VarName         reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    DoubleAnd       reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    DoubleOr        reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Tilda           reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    And             reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Or              reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Minus           reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Times           reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    QMark           reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Opening_Parentheses reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Const_KW        reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    True_KW         reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    False_KW        reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)
    Other_KW        reduce using rule 54 (returnPhrase -> GiveBack_KW allExpression Semicolon .)


state 172

    (56) allExpression -> alterable mathOp allExpression .

    Semicolon       reduce using rule 56 (allExpression -> alterable mathOp allExpression .)
    Closing_Parentheses reduce using rule 56 (allExpression -> alterable mathOp allExpression .)
    Closing_Bracket reduce using rule 56 (allExpression -> alterable mathOp allExpression .)
    Comma           reduce using rule 56 (allExpression -> alterable mathOp allExpression .)


state 173

    (70) eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 70 (eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .)
    DoubleAnd       reduce using rule 70 (eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .)
    DoubleOr        reduce using rule 70 (eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .)
    Tilda           reduce using rule 70 (eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .)
    And             reduce using rule 70 (eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .)
    Or              reduce using rule 70 (eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .)
    Semicolon       reduce using rule 70 (eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .)
    Closing_Bracket reduce using rule 70 (eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .)
    Comma           reduce using rule 70 (eachExpression -> eachExpression DoubleAnd Then_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 174

    (85) eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 85 (eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .)
    DoubleAnd       reduce using rule 85 (eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .)
    DoubleOr        reduce using rule 85 (eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .)
    Tilda           reduce using rule 85 (eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .)
    And             reduce using rule 85 (eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .)
    Or              reduce using rule 85 (eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .)
    Semicolon       reduce using rule 85 (eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .)
    Closing_Bracket reduce using rule 85 (eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .)
    Comma           reduce using rule 85 (eachExpression -> eachExpression DoubleAnd Else_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 175

    (71) eachExpression -> eachExpression DoubleOr Then_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 71 (eachExpression -> eachExpression DoubleOr Then_KW eachExpression .)
    DoubleAnd       reduce using rule 71 (eachExpression -> eachExpression DoubleOr Then_KW eachExpression .)
    DoubleOr        reduce using rule 71 (eachExpression -> eachExpression DoubleOr Then_KW eachExpression .)
    Tilda           reduce using rule 71 (eachExpression -> eachExpression DoubleOr Then_KW eachExpression .)
    And             reduce using rule 71 (eachExpression -> eachExpression DoubleOr Then_KW eachExpression .)
    Or              reduce using rule 71 (eachExpression -> eachExpression DoubleOr Then_KW eachExpression .)
    Semicolon       reduce using rule 71 (eachExpression -> eachExpression DoubleOr Then_KW eachExpression .)
    Closing_Bracket reduce using rule 71 (eachExpression -> eachExpression DoubleOr Then_KW eachExpression .)
    Comma           reduce using rule 71 (eachExpression -> eachExpression DoubleOr Then_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 176

    (84) eachExpression -> eachExpression DoubleOr Else_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 84 (eachExpression -> eachExpression DoubleOr Else_KW eachExpression .)
    DoubleAnd       reduce using rule 84 (eachExpression -> eachExpression DoubleOr Else_KW eachExpression .)
    DoubleOr        reduce using rule 84 (eachExpression -> eachExpression DoubleOr Else_KW eachExpression .)
    Tilda           reduce using rule 84 (eachExpression -> eachExpression DoubleOr Else_KW eachExpression .)
    And             reduce using rule 84 (eachExpression -> eachExpression DoubleOr Else_KW eachExpression .)
    Or              reduce using rule 84 (eachExpression -> eachExpression DoubleOr Else_KW eachExpression .)
    Semicolon       reduce using rule 84 (eachExpression -> eachExpression DoubleOr Else_KW eachExpression .)
    Closing_Bracket reduce using rule 84 (eachExpression -> eachExpression DoubleOr Else_KW eachExpression .)
    Comma           reduce using rule 84 (eachExpression -> eachExpression DoubleOr Else_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 177

    (72) eachExpression -> eachExpression Tilda Then_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 72 (eachExpression -> eachExpression Tilda Then_KW eachExpression .)
    DoubleAnd       reduce using rule 72 (eachExpression -> eachExpression Tilda Then_KW eachExpression .)
    DoubleOr        reduce using rule 72 (eachExpression -> eachExpression Tilda Then_KW eachExpression .)
    Tilda           reduce using rule 72 (eachExpression -> eachExpression Tilda Then_KW eachExpression .)
    And             reduce using rule 72 (eachExpression -> eachExpression Tilda Then_KW eachExpression .)
    Or              reduce using rule 72 (eachExpression -> eachExpression Tilda Then_KW eachExpression .)
    Semicolon       reduce using rule 72 (eachExpression -> eachExpression Tilda Then_KW eachExpression .)
    Closing_Bracket reduce using rule 72 (eachExpression -> eachExpression Tilda Then_KW eachExpression .)
    Comma           reduce using rule 72 (eachExpression -> eachExpression Tilda Then_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 178

    (83) eachExpression -> eachExpression Tilda Else_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 83 (eachExpression -> eachExpression Tilda Else_KW eachExpression .)
    DoubleAnd       reduce using rule 83 (eachExpression -> eachExpression Tilda Else_KW eachExpression .)
    DoubleOr        reduce using rule 83 (eachExpression -> eachExpression Tilda Else_KW eachExpression .)
    Tilda           reduce using rule 83 (eachExpression -> eachExpression Tilda Else_KW eachExpression .)
    And             reduce using rule 83 (eachExpression -> eachExpression Tilda Else_KW eachExpression .)
    Or              reduce using rule 83 (eachExpression -> eachExpression Tilda Else_KW eachExpression .)
    Semicolon       reduce using rule 83 (eachExpression -> eachExpression Tilda Else_KW eachExpression .)
    Closing_Bracket reduce using rule 83 (eachExpression -> eachExpression Tilda Else_KW eachExpression .)
    Comma           reduce using rule 83 (eachExpression -> eachExpression Tilda Else_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 179

    (73) eachExpression -> eachExpression And Then_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 73 (eachExpression -> eachExpression And Then_KW eachExpression .)
    DoubleAnd       reduce using rule 73 (eachExpression -> eachExpression And Then_KW eachExpression .)
    DoubleOr        reduce using rule 73 (eachExpression -> eachExpression And Then_KW eachExpression .)
    Tilda           reduce using rule 73 (eachExpression -> eachExpression And Then_KW eachExpression .)
    And             reduce using rule 73 (eachExpression -> eachExpression And Then_KW eachExpression .)
    Or              reduce using rule 73 (eachExpression -> eachExpression And Then_KW eachExpression .)
    Semicolon       reduce using rule 73 (eachExpression -> eachExpression And Then_KW eachExpression .)
    Closing_Bracket reduce using rule 73 (eachExpression -> eachExpression And Then_KW eachExpression .)
    Comma           reduce using rule 73 (eachExpression -> eachExpression And Then_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 180

    (82) eachExpression -> eachExpression And Else_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 82 (eachExpression -> eachExpression And Else_KW eachExpression .)
    DoubleAnd       reduce using rule 82 (eachExpression -> eachExpression And Else_KW eachExpression .)
    DoubleOr        reduce using rule 82 (eachExpression -> eachExpression And Else_KW eachExpression .)
    Tilda           reduce using rule 82 (eachExpression -> eachExpression And Else_KW eachExpression .)
    And             reduce using rule 82 (eachExpression -> eachExpression And Else_KW eachExpression .)
    Or              reduce using rule 82 (eachExpression -> eachExpression And Else_KW eachExpression .)
    Semicolon       reduce using rule 82 (eachExpression -> eachExpression And Else_KW eachExpression .)
    Closing_Bracket reduce using rule 82 (eachExpression -> eachExpression And Else_KW eachExpression .)
    Comma           reduce using rule 82 (eachExpression -> eachExpression And Else_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 181

    (74) eachExpression -> eachExpression Or Then_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 74 (eachExpression -> eachExpression Or Then_KW eachExpression .)
    DoubleAnd       reduce using rule 74 (eachExpression -> eachExpression Or Then_KW eachExpression .)
    DoubleOr        reduce using rule 74 (eachExpression -> eachExpression Or Then_KW eachExpression .)
    Tilda           reduce using rule 74 (eachExpression -> eachExpression Or Then_KW eachExpression .)
    And             reduce using rule 74 (eachExpression -> eachExpression Or Then_KW eachExpression .)
    Or              reduce using rule 74 (eachExpression -> eachExpression Or Then_KW eachExpression .)
    Semicolon       reduce using rule 74 (eachExpression -> eachExpression Or Then_KW eachExpression .)
    Closing_Bracket reduce using rule 74 (eachExpression -> eachExpression Or Then_KW eachExpression .)
    Comma           reduce using rule 74 (eachExpression -> eachExpression Or Then_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 182

    (81) eachExpression -> eachExpression Or Else_KW eachExpression .
    (65) eachExpression -> eachExpression . DoubleAnd eachExpression
    (66) eachExpression -> eachExpression . DoubleOr eachExpression
    (67) eachExpression -> eachExpression . Tilda eachExpression
    (68) eachExpression -> eachExpression . And eachExpression
    (69) eachExpression -> eachExpression . Or eachExpression
    (70) eachExpression -> eachExpression . DoubleAnd Then_KW eachExpression
    (71) eachExpression -> eachExpression . DoubleOr Then_KW eachExpression
    (72) eachExpression -> eachExpression . Tilda Then_KW eachExpression
    (73) eachExpression -> eachExpression . And Then_KW eachExpression
    (74) eachExpression -> eachExpression . Or Then_KW eachExpression
    (81) eachExpression -> eachExpression . Or Else_KW eachExpression
    (82) eachExpression -> eachExpression . And Else_KW eachExpression
    (83) eachExpression -> eachExpression . Tilda Else_KW eachExpression
    (84) eachExpression -> eachExpression . DoubleOr Else_KW eachExpression
    (85) eachExpression -> eachExpression . DoubleAnd Else_KW eachExpression

    Closing_Parentheses reduce using rule 81 (eachExpression -> eachExpression Or Else_KW eachExpression .)
    DoubleAnd       reduce using rule 81 (eachExpression -> eachExpression Or Else_KW eachExpression .)
    DoubleOr        reduce using rule 81 (eachExpression -> eachExpression Or Else_KW eachExpression .)
    Tilda           reduce using rule 81 (eachExpression -> eachExpression Or Else_KW eachExpression .)
    And             reduce using rule 81 (eachExpression -> eachExpression Or Else_KW eachExpression .)
    Or              reduce using rule 81 (eachExpression -> eachExpression Or Else_KW eachExpression .)
    Semicolon       reduce using rule 81 (eachExpression -> eachExpression Or Else_KW eachExpression .)
    Closing_Bracket reduce using rule 81 (eachExpression -> eachExpression Or Else_KW eachExpression .)
    Comma           reduce using rule 81 (eachExpression -> eachExpression Or Else_KW eachExpression .)

  ! DoubleAnd       [ shift and go to state 90 ]
  ! DoubleOr        [ shift and go to state 91 ]
  ! Tilda           [ shift and go to state 92 ]
  ! And             [ shift and go to state 93 ]
  ! Or              [ shift and go to state 94 ]


state 183

    (110) alterable -> alterable Opening_Bracket allExpression Closing_Bracket .

    Opening_Bracket reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Dot             reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Plus            reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Minus           reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Times           reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Divide          reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    ModeOP          reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    LEqual          reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    GEqual          reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    EEqual          reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    GreaterOP       reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    LessOP          reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    NonEqualOP      reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Closing_Parentheses reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    DoubleAnd       reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    DoubleOr        reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Tilda           reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    And             reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Or              reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    PP              reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    MM              reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Equal           reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    PlusEqual       reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    MinusEqual      reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    TimesEqual      reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    DivideEqual     reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Semicolon       reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Closing_Bracket reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)
    Comma           reduce using rule 110 (alterable -> alterable Opening_Bracket allExpression Closing_Bracket .)


state 184

    (114) inalterable -> VarName Opening_Parentheses args Closing_Parentheses .

    Plus            reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    Minus           reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    Times           reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    Divide          reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    ModeOP          reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    LEqual          reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    GEqual          reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    EEqual          reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    GreaterOP       reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    LessOP          reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    NonEqualOP      reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    Closing_Parentheses reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    DoubleAnd       reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    DoubleOr        reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    Tilda           reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    And             reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    Or              reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    Semicolon       reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    Closing_Bracket reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)
    Comma           reduce using rule 114 (inalterable -> VarName Opening_Parentheses args Closing_Parentheses .)


state 185

    (117) arguments -> arguments Comma . allExpression
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    allExpression                  shift and go to state 192
    alterable                      shift and go to state 87
    eachExpression                 shift and go to state 82
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 186

    (43) compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .

    void_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Boolean_KW      reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Character_KW    reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Integer_KW      reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    char_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    bool_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    int_KW          reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    $end            reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Closing_Brace   reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Semicolon       reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Opening_Brace   reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    If_KW           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Till_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    ComeBack_KW     reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    GiveBack_KW     reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Continue_KW     reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    VarName         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    DoubleAnd       reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    DoubleOr        reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Tilda           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    And             reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Or              reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Minus           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Times           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    QMark           reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Opening_Parentheses reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Const_KW        reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    True_KW         reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    False_KW        reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)
    Other_KW        reduce using rule 43 (compoundPhrase -> Opening_Brace localDeclarations statementList Closing_Brace .)


state 187

    (44) statementList -> statementList statement .

    Closing_Brace   reduce using rule 44 (statementList -> statementList statement .)
    Semicolon       reduce using rule 44 (statementList -> statementList statement .)
    Opening_Brace   reduce using rule 44 (statementList -> statementList statement .)
    If_KW           reduce using rule 44 (statementList -> statementList statement .)
    Till_KW         reduce using rule 44 (statementList -> statementList statement .)
    ComeBack_KW     reduce using rule 44 (statementList -> statementList statement .)
    GiveBack_KW     reduce using rule 44 (statementList -> statementList statement .)
    Continue_KW     reduce using rule 44 (statementList -> statementList statement .)
    VarName         reduce using rule 44 (statementList -> statementList statement .)
    DoubleAnd       reduce using rule 44 (statementList -> statementList statement .)
    DoubleOr        reduce using rule 44 (statementList -> statementList statement .)
    Tilda           reduce using rule 44 (statementList -> statementList statement .)
    And             reduce using rule 44 (statementList -> statementList statement .)
    Or              reduce using rule 44 (statementList -> statementList statement .)
    Minus           reduce using rule 44 (statementList -> statementList statement .)
    Times           reduce using rule 44 (statementList -> statementList statement .)
    QMark           reduce using rule 44 (statementList -> statementList statement .)
    Opening_Parentheses reduce using rule 44 (statementList -> statementList statement .)
    Const_KW        reduce using rule 44 (statementList -> statementList statement .)
    True_KW         reduce using rule 44 (statementList -> statementList statement .)
    False_KW        reduce using rule 44 (statementList -> statementList statement .)


state 188

    (7) ScopedVariableDec -> scopedSpecifier variableList . Semicolon
    (8) variableList -> variableList . Comma varInitialization

    Semicolon       shift and go to state 193
    Comma           shift and go to state 26


state 189

    (14) scopedSpecifier -> Static_KW type .

    VarName         reduce using rule 14 (scopedSpecifier -> Static_KW type .)


state 190

    (48) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses . ifBody
    (49) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses . Opening_Brace ifBody ifBody Closing_Brace
    (50) ifBody -> . statement
    (51) ifBody -> . statement Other_KW statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (46) phrase -> . allExpression Semicolon
    (47) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (48) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (52) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (53) returnPhrase -> . ComeBack_KW Semicolon
    (54) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Opening_Brace   shift and go to state 195
    Semicolon       shift and go to state 79
    If_KW           shift and go to state 81
    Till_KW         shift and go to state 83
    ComeBack_KW     shift and go to state 84
    GiveBack_KW     shift and go to state 85
    Continue_KW     shift and go to state 86
    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 82
    ifBody                         shift and go to state 194
    statement                      shift and go to state 196
    phrase                         shift and go to state 72
    compoundPhrase                 shift and go to state 73
    selectPhrase                   shift and go to state 74
    iterationPhrase                shift and go to state 75
    returnPhrase                   shift and go to state 76
    continue                       shift and go to state 77
    allExpression                  shift and go to state 78
    alterable                      shift and go to state 87
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 191

    (52) iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (46) phrase -> . allExpression Semicolon
    (47) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (48) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (52) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (53) returnPhrase -> . ComeBack_KW Semicolon
    (54) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Semicolon       shift and go to state 79
    Opening_Brace   shift and go to state 80
    If_KW           shift and go to state 81
    Till_KW         shift and go to state 83
    ComeBack_KW     shift and go to state 84
    GiveBack_KW     shift and go to state 85
    Continue_KW     shift and go to state 86
    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 82
    statement                      shift and go to state 197
    phrase                         shift and go to state 72
    compoundPhrase                 shift and go to state 73
    selectPhrase                   shift and go to state 74
    iterationPhrase                shift and go to state 75
    returnPhrase                   shift and go to state 76
    continue                       shift and go to state 77
    allExpression                  shift and go to state 78
    alterable                      shift and go to state 87
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 192

    (117) arguments -> arguments Comma allExpression .

    Comma           reduce using rule 117 (arguments -> arguments Comma allExpression .)
    Closing_Parentheses reduce using rule 117 (arguments -> arguments Comma allExpression .)


state 193

    (7) ScopedVariableDec -> scopedSpecifier variableList Semicolon .

    Static_KW       reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Boolean_KW      reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Character_KW    reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Integer_KW      reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    char_KW         reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    bool_KW         reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    int_KW          reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Closing_Brace   reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Semicolon       reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Opening_Brace   reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    If_KW           reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Till_KW         reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    ComeBack_KW     reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    GiveBack_KW     reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Continue_KW     reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    VarName         reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    DoubleAnd       reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    DoubleOr        reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Tilda           reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    And             reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Or              reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Minus           reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Times           reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    QMark           reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Opening_Parentheses reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    Const_KW        reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    True_KW         reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)
    False_KW        reduce using rule 7 (ScopedVariableDec -> scopedSpecifier variableList Semicolon .)


state 194

    (48) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .

    void_KW         reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Boolean_KW      reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Character_KW    reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Integer_KW      reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    char_KW         reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    bool_KW         reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    int_KW          reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    $end            reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Closing_Brace   reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Semicolon       reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Opening_Brace   reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    If_KW           reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Till_KW         reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    ComeBack_KW     reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    GiveBack_KW     reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Continue_KW     reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    VarName         reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    DoubleAnd       reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    DoubleOr        reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Tilda           reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    And             reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Or              reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Minus           reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Times           reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    QMark           reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Opening_Parentheses reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Const_KW        reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    True_KW         reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    False_KW        reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)
    Other_KW        reduce using rule 48 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody .)


state 195

    (49) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace . ifBody ifBody Closing_Brace
    (43) compoundPhrase -> Opening_Brace . localDeclarations statementList Closing_Brace
    (50) ifBody -> . statement
    (51) ifBody -> . statement Other_KW statement
    (33) localDeclarations -> . localDeclarations ScopedVariableDec
    (34) localDeclarations -> .
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (46) phrase -> . allExpression Semicolon
    (47) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (48) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (52) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (53) returnPhrase -> . ComeBack_KW Semicolon
    (54) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

  ! shift/reduce conflict for Semicolon resolved as shift
  ! shift/reduce conflict for Opening_Brace resolved as shift
  ! shift/reduce conflict for If_KW resolved as shift
  ! shift/reduce conflict for Till_KW resolved as shift
  ! shift/reduce conflict for ComeBack_KW resolved as shift
  ! shift/reduce conflict for GiveBack_KW resolved as shift
  ! shift/reduce conflict for Continue_KW resolved as shift
  ! shift/reduce conflict for VarName resolved as shift
  ! shift/reduce conflict for DoubleAnd resolved as shift
  ! shift/reduce conflict for DoubleOr resolved as shift
  ! shift/reduce conflict for Tilda resolved as shift
  ! shift/reduce conflict for And resolved as shift
  ! shift/reduce conflict for Or resolved as shift
  ! shift/reduce conflict for Minus resolved as shift
  ! shift/reduce conflict for Times resolved as shift
  ! shift/reduce conflict for QMark resolved as shift
  ! shift/reduce conflict for Opening_Parentheses resolved as shift
  ! shift/reduce conflict for Const_KW resolved as shift
  ! shift/reduce conflict for True_KW resolved as shift
  ! shift/reduce conflict for False_KW resolved as shift
    Static_KW       reduce using rule 34 (localDeclarations -> .)
    Boolean_KW      reduce using rule 34 (localDeclarations -> .)
    Character_KW    reduce using rule 34 (localDeclarations -> .)
    Integer_KW      reduce using rule 34 (localDeclarations -> .)
    char_KW         reduce using rule 34 (localDeclarations -> .)
    bool_KW         reduce using rule 34 (localDeclarations -> .)
    int_KW          reduce using rule 34 (localDeclarations -> .)
    Closing_Brace   reduce using rule 34 (localDeclarations -> .)
    Semicolon       shift and go to state 79
    Opening_Brace   shift and go to state 80
    If_KW           shift and go to state 81
    Till_KW         shift and go to state 83
    ComeBack_KW     shift and go to state 84
    GiveBack_KW     shift and go to state 85
    Continue_KW     shift and go to state 86
    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

  ! Semicolon       [ reduce using rule 34 (localDeclarations -> .) ]
  ! Opening_Brace   [ reduce using rule 34 (localDeclarations -> .) ]
  ! If_KW           [ reduce using rule 34 (localDeclarations -> .) ]
  ! Till_KW         [ reduce using rule 34 (localDeclarations -> .) ]
  ! ComeBack_KW     [ reduce using rule 34 (localDeclarations -> .) ]
  ! GiveBack_KW     [ reduce using rule 34 (localDeclarations -> .) ]
  ! Continue_KW     [ reduce using rule 34 (localDeclarations -> .) ]
  ! VarName         [ reduce using rule 34 (localDeclarations -> .) ]
  ! DoubleAnd       [ reduce using rule 34 (localDeclarations -> .) ]
  ! DoubleOr        [ reduce using rule 34 (localDeclarations -> .) ]
  ! Tilda           [ reduce using rule 34 (localDeclarations -> .) ]
  ! And             [ reduce using rule 34 (localDeclarations -> .) ]
  ! Or              [ reduce using rule 34 (localDeclarations -> .) ]
  ! Minus           [ reduce using rule 34 (localDeclarations -> .) ]
  ! Times           [ reduce using rule 34 (localDeclarations -> .) ]
  ! QMark           [ reduce using rule 34 (localDeclarations -> .) ]
  ! Opening_Parentheses [ reduce using rule 34 (localDeclarations -> .) ]
  ! Const_KW        [ reduce using rule 34 (localDeclarations -> .) ]
  ! True_KW         [ reduce using rule 34 (localDeclarations -> .) ]
  ! False_KW        [ reduce using rule 34 (localDeclarations -> .) ]

    eachExpression                 shift and go to state 82
    ifBody                         shift and go to state 198
    localDeclarations              shift and go to state 122
    statement                      shift and go to state 196
    phrase                         shift and go to state 72
    compoundPhrase                 shift and go to state 73
    selectPhrase                   shift and go to state 74
    iterationPhrase                shift and go to state 75
    returnPhrase                   shift and go to state 76
    continue                       shift and go to state 77
    allExpression                  shift and go to state 78
    alterable                      shift and go to state 87
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 196

    (50) ifBody -> statement .
    (51) ifBody -> statement . Other_KW statement

  ! shift/reduce conflict for Other_KW resolved as shift
    void_KW         reduce using rule 50 (ifBody -> statement .)
    Boolean_KW      reduce using rule 50 (ifBody -> statement .)
    Character_KW    reduce using rule 50 (ifBody -> statement .)
    Integer_KW      reduce using rule 50 (ifBody -> statement .)
    char_KW         reduce using rule 50 (ifBody -> statement .)
    bool_KW         reduce using rule 50 (ifBody -> statement .)
    int_KW          reduce using rule 50 (ifBody -> statement .)
    $end            reduce using rule 50 (ifBody -> statement .)
    Closing_Brace   reduce using rule 50 (ifBody -> statement .)
    Semicolon       reduce using rule 50 (ifBody -> statement .)
    Opening_Brace   reduce using rule 50 (ifBody -> statement .)
    If_KW           reduce using rule 50 (ifBody -> statement .)
    Till_KW         reduce using rule 50 (ifBody -> statement .)
    ComeBack_KW     reduce using rule 50 (ifBody -> statement .)
    GiveBack_KW     reduce using rule 50 (ifBody -> statement .)
    Continue_KW     reduce using rule 50 (ifBody -> statement .)
    VarName         reduce using rule 50 (ifBody -> statement .)
    DoubleAnd       reduce using rule 50 (ifBody -> statement .)
    DoubleOr        reduce using rule 50 (ifBody -> statement .)
    Tilda           reduce using rule 50 (ifBody -> statement .)
    And             reduce using rule 50 (ifBody -> statement .)
    Or              reduce using rule 50 (ifBody -> statement .)
    Minus           reduce using rule 50 (ifBody -> statement .)
    Times           reduce using rule 50 (ifBody -> statement .)
    QMark           reduce using rule 50 (ifBody -> statement .)
    Opening_Parentheses reduce using rule 50 (ifBody -> statement .)
    Const_KW        reduce using rule 50 (ifBody -> statement .)
    True_KW         reduce using rule 50 (ifBody -> statement .)
    False_KW        reduce using rule 50 (ifBody -> statement .)
    Other_KW        shift and go to state 199

  ! Other_KW        [ reduce using rule 50 (ifBody -> statement .) ]


state 197

    (52) iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .

    void_KW         reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Boolean_KW      reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Character_KW    reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Integer_KW      reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    char_KW         reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    bool_KW         reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    int_KW          reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    $end            reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Closing_Brace   reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Semicolon       reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Opening_Brace   reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    If_KW           reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Till_KW         reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    ComeBack_KW     reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    GiveBack_KW     reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Continue_KW     reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    VarName         reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    DoubleAnd       reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    DoubleOr        reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Tilda           reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    And             reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Or              reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Minus           reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Times           reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    QMark           reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Opening_Parentheses reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Const_KW        reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    True_KW         reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    False_KW        reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)
    Other_KW        reduce using rule 52 (iterationPhrase -> Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement .)


state 198

    (49) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody . ifBody Closing_Brace
    (50) ifBody -> . statement
    (51) ifBody -> . statement Other_KW statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (46) phrase -> . allExpression Semicolon
    (47) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (48) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (52) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (53) returnPhrase -> . ComeBack_KW Semicolon
    (54) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Semicolon       shift and go to state 79
    Opening_Brace   shift and go to state 80
    If_KW           shift and go to state 81
    Till_KW         shift and go to state 83
    ComeBack_KW     shift and go to state 84
    GiveBack_KW     shift and go to state 85
    Continue_KW     shift and go to state 86
    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    eachExpression                 shift and go to state 82
    ifBody                         shift and go to state 200
    statement                      shift and go to state 196
    phrase                         shift and go to state 72
    compoundPhrase                 shift and go to state 73
    selectPhrase                   shift and go to state 74
    iterationPhrase                shift and go to state 75
    returnPhrase                   shift and go to state 76
    continue                       shift and go to state 77
    allExpression                  shift and go to state 78
    alterable                      shift and go to state 87
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 199

    (51) ifBody -> statement Other_KW . statement
    (37) statement -> . phrase
    (38) statement -> . compoundPhrase
    (39) statement -> . selectPhrase
    (40) statement -> . iterationPhrase
    (41) statement -> . returnPhrase
    (42) statement -> . continue
    (46) phrase -> . allExpression Semicolon
    (47) phrase -> . Semicolon
    (43) compoundPhrase -> . Opening_Brace localDeclarations statementList Closing_Brace
    (48) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses ifBody
    (49) selectPhrase -> . If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace
    (52) iterationPhrase -> . Till_KW Opening_Parentheses eachExpression Closing_Parentheses statement
    (53) returnPhrase -> . ComeBack_KW Semicolon
    (54) returnPhrase -> . GiveBack_KW allExpression Semicolon
    (55) continue -> . Continue_KW Semicolon
    (56) allExpression -> . alterable mathOp allExpression
    (57) allExpression -> . alterable PP
    (58) allExpression -> . alterable MM
    (59) allExpression -> . eachExpression
    (109) alterable -> . VarName
    (110) alterable -> . alterable Opening_Bracket allExpression Closing_Bracket
    (111) alterable -> . alterable Dot VarName
    (65) eachExpression -> . eachExpression DoubleAnd eachExpression
    (66) eachExpression -> . eachExpression DoubleOr eachExpression
    (67) eachExpression -> . eachExpression Tilda eachExpression
    (68) eachExpression -> . eachExpression And eachExpression
    (69) eachExpression -> . eachExpression Or eachExpression
    (70) eachExpression -> . eachExpression DoubleAnd Then_KW eachExpression
    (71) eachExpression -> . eachExpression DoubleOr Then_KW eachExpression
    (72) eachExpression -> . eachExpression Tilda Then_KW eachExpression
    (73) eachExpression -> . eachExpression And Then_KW eachExpression
    (74) eachExpression -> . eachExpression Or Then_KW eachExpression
    (75) eachExpression -> . DoubleAnd eachExpression
    (76) eachExpression -> . DoubleOr eachExpression
    (77) eachExpression -> . Tilda eachExpression
    (78) eachExpression -> . And eachExpression
    (79) eachExpression -> . Or eachExpression
    (80) eachExpression -> . relExpression
    (81) eachExpression -> . eachExpression Or Else_KW eachExpression
    (82) eachExpression -> . eachExpression And Else_KW eachExpression
    (83) eachExpression -> . eachExpression Tilda Else_KW eachExpression
    (84) eachExpression -> . eachExpression DoubleOr Else_KW eachExpression
    (85) eachExpression -> . eachExpression DoubleAnd Else_KW eachExpression
    (86) relExpression -> . mathEXP compareType mathEXP
    (87) relExpression -> . mathEXP
    (96) mathEXP -> . mathEXP Plus mathEXP
    (97) mathEXP -> . mathEXP Minus mathEXP
    (98) mathEXP -> . mathEXP Times mathEXP
    (99) mathEXP -> . mathEXP Divide mathEXP
    (100) mathEXP -> . mathEXP ModeOP mathEXP
    (101) mathEXP -> . unaryExpression
    (102) unaryExpression -> . unaryop unaryExpression
    (103) unaryExpression -> . factor
    (104) unaryop -> . Minus
    (105) unaryop -> . Times
    (106) unaryop -> . QMark
    (107) factor -> . inalterable
    (108) factor -> . alterable
    (112) inalterable -> . Opening_Parentheses allExpression Closing_Parentheses
    (113) inalterable -> . constant
    (114) inalterable -> . VarName Opening_Parentheses args Closing_Parentheses
    (119) constant -> . Const_KW
    (120) constant -> . True_KW
    (121) constant -> . False_KW

    Semicolon       shift and go to state 79
    Opening_Brace   shift and go to state 80
    If_KW           shift and go to state 81
    Till_KW         shift and go to state 83
    ComeBack_KW     shift and go to state 84
    GiveBack_KW     shift and go to state 85
    Continue_KW     shift and go to state 86
    VarName         shift and go to state 70
    DoubleAnd       shift and go to state 46
    DoubleOr        shift and go to state 47
    Tilda           shift and go to state 48
    And             shift and go to state 49
    Or              shift and go to state 50
    Minus           shift and go to state 53
    Times           shift and go to state 54
    QMark           shift and go to state 58
    Opening_Parentheses shift and go to state 44
    Const_KW        shift and go to state 63
    True_KW         shift and go to state 64
    False_KW        shift and go to state 65

    statement                      shift and go to state 201
    phrase                         shift and go to state 72
    compoundPhrase                 shift and go to state 73
    selectPhrase                   shift and go to state 74
    iterationPhrase                shift and go to state 75
    returnPhrase                   shift and go to state 76
    continue                       shift and go to state 77
    allExpression                  shift and go to state 78
    eachExpression                 shift and go to state 82
    alterable                      shift and go to state 87
    relExpression                  shift and go to state 51
    mathEXP                        shift and go to state 52
    unaryExpression                shift and go to state 55
    unaryop                        shift and go to state 56
    factor                         shift and go to state 57
    inalterable                    shift and go to state 59
    constant                       shift and go to state 61

state 200

    (49) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody . Closing_Brace

    Closing_Brace   shift and go to state 202


state 201

    (51) ifBody -> statement Other_KW statement .

    void_KW         reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Boolean_KW      reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Character_KW    reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Integer_KW      reduce using rule 51 (ifBody -> statement Other_KW statement .)
    char_KW         reduce using rule 51 (ifBody -> statement Other_KW statement .)
    bool_KW         reduce using rule 51 (ifBody -> statement Other_KW statement .)
    int_KW          reduce using rule 51 (ifBody -> statement Other_KW statement .)
    $end            reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Closing_Brace   reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Semicolon       reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Opening_Brace   reduce using rule 51 (ifBody -> statement Other_KW statement .)
    If_KW           reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Till_KW         reduce using rule 51 (ifBody -> statement Other_KW statement .)
    ComeBack_KW     reduce using rule 51 (ifBody -> statement Other_KW statement .)
    GiveBack_KW     reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Continue_KW     reduce using rule 51 (ifBody -> statement Other_KW statement .)
    VarName         reduce using rule 51 (ifBody -> statement Other_KW statement .)
    DoubleAnd       reduce using rule 51 (ifBody -> statement Other_KW statement .)
    DoubleOr        reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Tilda           reduce using rule 51 (ifBody -> statement Other_KW statement .)
    And             reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Or              reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Minus           reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Times           reduce using rule 51 (ifBody -> statement Other_KW statement .)
    QMark           reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Opening_Parentheses reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Const_KW        reduce using rule 51 (ifBody -> statement Other_KW statement .)
    True_KW         reduce using rule 51 (ifBody -> statement Other_KW statement .)
    False_KW        reduce using rule 51 (ifBody -> statement Other_KW statement .)
    Other_KW        reduce using rule 51 (ifBody -> statement Other_KW statement .)


state 202

    (49) selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .

    void_KW         reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Boolean_KW      reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Character_KW    reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Integer_KW      reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    char_KW         reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    bool_KW         reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    int_KW          reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    $end            reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Closing_Brace   reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Semicolon       reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Opening_Brace   reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    If_KW           reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Till_KW         reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    ComeBack_KW     reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    GiveBack_KW     reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Continue_KW     reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    VarName         reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    DoubleAnd       reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    DoubleOr        reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Tilda           reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    And             reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Or              reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Minus           reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Times           reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    QMark           reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Opening_Parentheses reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Const_KW        reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    True_KW         reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    False_KW        reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)
    Other_KW        reduce using rule 49 (selectPhrase -> If_KW Opening_Parentheses eachExpression Closing_Parentheses Opening_Brace ifBody ifBody Closing_Brace .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for Semicolon in state 195 resolved as shift
WARNING: shift/reduce conflict for Opening_Brace in state 195 resolved as shift
WARNING: shift/reduce conflict for If_KW in state 195 resolved as shift
WARNING: shift/reduce conflict for Till_KW in state 195 resolved as shift
WARNING: shift/reduce conflict for ComeBack_KW in state 195 resolved as shift
WARNING: shift/reduce conflict for GiveBack_KW in state 195 resolved as shift
WARNING: shift/reduce conflict for Continue_KW in state 195 resolved as shift
WARNING: shift/reduce conflict for VarName in state 195 resolved as shift
WARNING: shift/reduce conflict for DoubleAnd in state 195 resolved as shift
WARNING: shift/reduce conflict for DoubleOr in state 195 resolved as shift
WARNING: shift/reduce conflict for Tilda in state 195 resolved as shift
WARNING: shift/reduce conflict for And in state 195 resolved as shift
WARNING: shift/reduce conflict for Or in state 195 resolved as shift
WARNING: shift/reduce conflict for Minus in state 195 resolved as shift
WARNING: shift/reduce conflict for Times in state 195 resolved as shift
WARNING: shift/reduce conflict for QMark in state 195 resolved as shift
WARNING: shift/reduce conflict for Opening_Parentheses in state 195 resolved as shift
WARNING: shift/reduce conflict for Const_KW in state 195 resolved as shift
WARNING: shift/reduce conflict for True_KW in state 195 resolved as shift
WARNING: shift/reduce conflict for False_KW in state 195 resolved as shift
WARNING: shift/reduce conflict for Other_KW in state 196 resolved as shift
